<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>研究生的区块链学习之路 on songdehua blog</title>
    <link>http://localhost:1313/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E7%9A%84%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/</link>
    <description>Recent content in 研究生的区块链学习之路 on songdehua blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 05 Jul 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E7%9A%84%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>区块链网址收藏</title>
      <link>http://localhost:1313/2021/blockchain-url-collection/</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2021/blockchain-url-collection/</guid>
      <description>&lt;p&gt;区块链方向一些网址收藏，作为结尾。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2018-2021 研究历史</title>
      <link>http://localhost:1313/2021/2018-2020-research-history/</link>
      <pubDate>Thu, 22 Apr 2021 09:06:00 +0800</pubDate>
      <guid>http://localhost:1313/2021/2018-2020-research-history/</guid>
      <description>&lt;p&gt;本文总结2018年12月到2021年4月的研究工作历史，不包括论文阅读工作。&lt;/p&gt;&#xA;&lt;h2 id=&#34;201812&#34;&gt;2018.12&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;区块链主流共识算法收集了解和分析&lt;/li&gt;&#xA;&lt;li&gt;IIoT 与区块链结合的场景收集和一些研究思路， &lt;a href=&#34;https://songdehua.github.io/blockchain-for-iot/&#34;&gt;总结文档地址&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;利用 Hyperledge Composer 完成供应链场景下的易腐食品运输示例&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;201901&#34;&gt;2019.01&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;实时与非实时数据的区别，区块链存储问题分析，&lt;a href=&#34;https://songdehua.github.io/data-storage-in-blockchain/&#34;&gt;总结文档地址&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;区块链平台比较和选择，&lt;a href=&#34;https://songdehua.github.io/blockchain-platform-compare-and-select/&#34;&gt;总结文档地址&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;201903&#34;&gt;2019.03&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ethereum 原理、架构等基本知识学习&lt;/li&gt;&#xA;&lt;li&gt;利用虚拟机搭建 Ethereum 私有链，熟悉转账、挖矿等相关命令和操作&lt;/li&gt;&#xA;&lt;li&gt;了解智能合约编译、部署、调用全过程，了解智能合约开发与测试框架 Truffle&lt;/li&gt;&#xA;&lt;li&gt;搭建 Swarm 分布式存储网络&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;201904&#34;&gt;2019.04&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ethereum 区块生成时间数据集获取及分析 &lt;a href=&#34;https://songdehua.github.io/extract-the-block-generation-time-of-ethereum/&#34;&gt;过程记录&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;场景思考，初步的方案设计和实验设计，工业4.0背景了解。&lt;a href=&#34;https://songdehua.github.io/blockchain-for-smart-factory/&#34;&gt;未完成的智能工厂方案设计&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;智能合约编程语言 Solidity 语法学习及练习&lt;/li&gt;&#xA;&lt;li&gt;基于已有知识的区块链综述文章撰写，&lt;a href=&#34;https://songdehua.github.io/blockchain-for-iot/iiota-smart-factory-case-study/&#34;&gt;文档地址&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;201905&#34;&gt;2019.05&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;继续撰写综述文章，智能工厂场景可行性分析及相关问题考虑&lt;/li&gt;&#xA;&lt;li&gt;区块链安全与隐私问题总结分析，比如可能的攻击、相关解决方案等，相关方向论文阅读&lt;/li&gt;&#xA;&lt;li&gt;注意力集中在两篇当时新出的区块链和智能工厂结合的论文，初步确认了应实现一个访问控制方案&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;201906&#34;&gt;2019.06&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;各论文使用的访问控制方案总结比较&lt;/li&gt;&#xA;&lt;li&gt;各论文使用的存储方案总结&lt;/li&gt;&#xA;&lt;li&gt;起草开题报告第一版，确认三个创新方向为：访问控制，存储，其它（如共识、通信方式、不相干区块过滤），并确认具体的细节&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;201907&#34;&gt;2019.07&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;开题报告内容继续完善&lt;/li&gt;&#xA;&lt;li&gt;开始关注区块链平台性能分析工具，并将其作为一个可能的方向&lt;/li&gt;&#xA;&lt;li&gt;确认要做的三件事：1. 在 Zhang 的方案上复现然后做改进；2. 区块链压缩；3. 移动性和通信链路不稳定性问题解决&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;201908&#34;&gt;2019.08&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;关注性能分析可能遇到的问题及其实验设计细节，寻找可能的方向&lt;/li&gt;&#xA;&lt;li&gt;安排访问控制方案实现的时间表&lt;/li&gt;&#xA;&lt;li&gt;熟悉 Quorum 区块链及其网络搭建&lt;/li&gt;&#xA;&lt;li&gt;开题&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;201909&#34;&gt;2019.09&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;设计树莓派和PC的组网方案，Quorum 客户端编译部署到树莓派，最终将树莓派作为节点加入 Quorum网络&lt;/li&gt;&#xA;&lt;li&gt;Zhang 论文中的访问控制合约复现，部署及相关问题解决&lt;/li&gt;&#xA;&lt;li&gt;开始关注异常检测方向，了解强化学习概念和信誉问题&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;201910&#34;&gt;2019.10&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;复现合约的功能测试，相关测试脚本的编写&lt;/li&gt;&#xA;&lt;li&gt;异常检测方向的论文收集和阅读，相关思路提出，&lt;a href=&#34;https://songdehua.github.io/blockchain-and-anomaly-detection/&#34;&gt;总结文档地址&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;访问控制方案场景思考，可优化之处分析，&lt;a href=&#34;https://songdehua.github.io/idea-design-and-optimization-of-smart-contract-based-access-control-scheme/&#34;&gt;总结文档地址&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;201911&#34;&gt;2019.11&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;实验室已有设备梳理及实验方案设计&lt;/li&gt;&#xA;&lt;li&gt;优化的访问控制方案设计及智能合约实现&lt;/li&gt;&#xA;&lt;li&gt;区块链用于物联网访问控制的全部问题总结，&lt;a href=&#34;https://songdehua.github.io/blockchain-based-access-control-for-iot/&#34;&gt;文档地址&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;201912&#34;&gt;2019.12&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;区块链发展情况调查，包括论文发表情况，期刊、会议和基金信息，研究团队，著名研究者，征稿情况等&lt;/li&gt;&#xA;&lt;li&gt;已实现的访问控制合约功能测试，使用Truffle 部署，Gas和时间消耗统计，合约安全性检查&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;202001&#34;&gt;2020.01&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;整理已完成访问控制工作，总结创新点，思考下一步研究方向（异常检测、区块链压缩，细化方案，性能测试工具）&lt;/li&gt;&#xA;&lt;li&gt;通过阅读论文了解当时访问控制发展情况，区块链理论发展情况&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;202003&#34;&gt;2020.03&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;论文写作&lt;/li&gt;&#xA;&lt;li&gt;分析存储方向研究思路的可行性&lt;/li&gt;&#xA;&lt;li&gt;开始阅读 Edge-D2D-区块链 的论文&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;202004&#34;&gt;2020.04&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;D2D与区块链结合背景情况调查，初步方案提出，&lt;a href=&#34;https://songdehua.github.io/blockchain-for-d2d-cache-or-computing-offload/&#34;&gt;总结文档地址&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;阅读已有论文分析现有访问控制工作的可扩展性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;202005&#34;&gt;2020.05&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;设计具体的信誉函数，包括奖励和惩罚两部分&lt;/li&gt;&#xA;&lt;li&gt;修改现有合约结构，加入信誉合约，在其中实现设计的信誉函数&lt;/li&gt;&#xA;&lt;li&gt;搭建基于Docker的Quorum区块链环境，寻找合适的区块链浏览器&lt;/li&gt;&#xA;&lt;li&gt;进行合约功能测试，解决浮点数运算产生的影响&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;202006&#34;&gt;2020.06&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;完成合约功能测试，使用Mythx 进行合约审计（失败），尝试不同的合约部署方式，确定待测量值及测试方式&lt;/li&gt;&#xA;&lt;li&gt;设计具体的实验场景和设计的访问控制操作，阅读并对比 IBM Food Trust（一个基于区块链的供应链解决方案，&lt;/li&gt;&#xA;&lt;li&gt;测试私有合约及交易，获取合约部署的Gas消耗，测试访问控制时间并和未添加信誉部分时的系统进行对比&lt;/li&gt;&#xA;&lt;li&gt;复现wang的论文&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;202007&#34;&gt;2020.07&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对复现的论文进行功能测试、获取Gas消耗、访问时间测试&lt;/li&gt;&#xA;&lt;li&gt;确认访问时间与智能合约逻辑（代码逻辑、合约结构等）、和网络（发起访问的时机、CPU占用率）之间的关系&lt;/li&gt;&#xA;&lt;li&gt;利用linux time命令测试访问控制进程实际执行的CPU时间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;202008&#34;&gt;2020.08&lt;/h2&gt;&#xA;&lt;p&gt;阅读关于事件到达仿真的相关资料，模拟泊松过程，生成符合指数分布的事件到达间隔时间&lt;/p&gt;</description>
    </item>
    <item>
      <title>历次和老师讨论的一些问题总结</title>
      <link>http://localhost:1313/2021/summary-of-issues-discussed-with-the-teacher/</link>
      <pubDate>Wed, 21 Apr 2021 11:06:00 +0800</pubDate>
      <guid>http://localhost:1313/2021/summary-of-issues-discussed-with-the-teacher/</guid>
      <description>&lt;p&gt;每周会议摘要及老师提到的一些问题总结。&lt;/p&gt;</description>
    </item>
    <item>
      <title>硕士论文的格式</title>
      <link>http://localhost:1313/2021/masters-thesis-format/</link>
      <pubDate>Mon, 08 Mar 2021 11:00:00 +0800</pubDate>
      <guid>http://localhost:1313/2021/masters-thesis-format/</guid>
      <description>&lt;p&gt;当一个同学问我论文格式问题时，我欣然应允，当两个、三个同学问我论文格式问题时，我意识到了什么，当预答辩的老师在那里说着“你们不会比对着学校的格式要求一个一个看吗”的时候，我终于恍然大悟，啥，就那个写的不清不楚的东西？所以我打算自己整理一份Word 版论文格式要求，以硕士论文模板为基础，补充一些缺失细节的同时，给出在 Word 中进行这些格式设置的方法。不使用 LaTeX 的原因主要是学校要求最后的提交版本是 doc 或 docx 格式，而 LaTeX 转 word 总不能尽善尽美。&lt;/p&gt;&#xA;&lt;p&gt;为了描述方便，我们先声明 word 中几个区域的标准叫法，如下图所示，智能搜索框的作用在于将多步点击简化为一步搜索。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://picped-1301226557.cos.ap-beijing.myqcloud.com/YJS_20210308_word%E7%95%8C%E9%9D%A2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>科研基础3-伪代码规范</title>
      <link>http://localhost:1313/2021/pseudocode-specification/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2021/pseudocode-specification/</guid>
      <description>&lt;p&gt;论文的编辑要插入两段伪代码，这里总结一下伪代码书写用到的 LaTeX 包和书写规范。&lt;/p&gt;</description>
    </item>
    <item>
      <title>研究记录15-研究过程中的问题总结</title>
      <link>http://localhost:1313/2020/some-problems-in-research/</link>
      <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/some-problems-in-research/</guid>
      <description>&lt;p&gt;一些以前理解上出现偏差的地方，这里做校正或完善。研究过程中发现的问题，可作为下一步研究方向的，也总结在这里。&lt;/p&gt;</description>
    </item>
    <item>
      <title>区块链学习7-交易池底层实现</title>
      <link>http://localhost:1313/2020/transaction-and-txpool/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/transaction-and-txpool/</guid>
      <description>&lt;p&gt;起源于老师提出的一个问题：区块链是如何处理同时发起的多个请求的。想了想觉得核心是交易池机制，因此准备看一下交易池的原理和实现。&lt;/p&gt;</description>
    </item>
    <item>
      <title>研究记录14-重新实验及实验流程优化</title>
      <link>http://localhost:1313/2020/experimental-process-optimization-and-performance-test/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/experimental-process-optimization-and-performance-test/</guid>
      <description>&lt;p&gt;我们对之前的实验流程做了进一步的优化，并且对添加恶意行为检测后的系统进行了进一步的性能测试。&lt;/p&gt;</description>
    </item>
    <item>
      <title>智能合约知识点总结</title>
      <link>http://localhost:1313/2020/summary-of-smart-contract-knowledge-points/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/summary-of-smart-contract-knowledge-points/</guid>
      <description>&lt;p&gt;项目进行过程中知识点的总结&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-字符串比较&#34;&gt;1. 字符串比较&lt;/h2&gt;&#xA;&lt;p&gt;翻译自：&lt;a href=&#34;https://fravoll.github.io/solidity-patterns/string_equality_comparison.html&#34;&gt;Fravoll-String Equality Comparison&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;比较两个给定字符串是否相等，是 Solidity 编程中最常见的一种情况，但语言本身并没有提供内置函数用于字符串比较，本文介绍两种可用方法并分析 Gas 消耗情况。&lt;/p&gt;&#xA;&lt;h3 id=&#34;11-stringutils-库&#34;&gt;1.1 StringUtils 库&lt;/h3&gt;&#xA;&lt;p&gt;第一种方法是使用 Ethereum 基金会提供的 StringUtils 库，它对每个字符进行成对比较，如果有一个字符对不匹配，则返回false。这种办法可以返回正确的结果，对于短字符串和字符不同发生在字符串前面的情况仅消耗少量 Gas。但是对于相等的字符串和长字符串，这种方法的 Gas 消耗较高，因为必须做很多比较才能得到正确结果。因此，字符串比较的两个可衡量的因素是字符串平均长度和正确率。&lt;/p&gt;&#xA;&lt;h3 id=&#34;12-哈希函数&#34;&gt;1.2 哈希函数&lt;/h3&gt;&#xA;&lt;p&gt;作者提出使用哈希函数进行比较，同时检查所提供的字符串的长度，从一开始就剔除长度不匹配的字符串。其步骤如下&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;检查两个字符串是否有相同长度，通过转换为 &lt;code&gt;bytes&lt;/code&gt; 类型完成，因为 &lt;code&gt;bytes&lt;/code&gt; 类型有内置长度函数。如果相同进入第2步，如果不相同返回结果；&lt;/li&gt;&#xA;&lt;li&gt;使用 &lt;code&gt;keccak256()&lt;/code&gt; 函数对两个字符串求哈希，然后比较计算得到的哈希值，从而确定是否相等。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;一个示例代码如下&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;这段代码未经安全审计，使用有风险&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hashCompareWithLengthCheck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;internal&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;keccak256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;abi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encodePacket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;keccak256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;abi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encodePacket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;&lt;code&gt;abi.encodePacket(...) returns (bytes)&lt;/code&gt; 用于对给定参数执行&lt;a href=&#34;https://solidity-cn.readthedocs.io/zh/develop/abi-spec.html#abi-packed-mode&#34;&gt;紧打包编码&lt;/a&gt;，官方文档中不推荐使用 &lt;code&gt;keccak256(...)&lt;/code&gt; 直接计算哈希，而是使用 &lt;code&gt;keccak256(abi.encodePacked(...))&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;13-gas-消耗分析&#34;&gt;1.3 Gas 消耗分析&lt;/h3&gt;&#xA;&lt;p&gt;在 Remix 编写代码测试了三种不同情况的字符串比较的 Gas 消耗&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;比较哈希&lt;/li&gt;&#xA;&lt;li&gt;比较每个字符，同时比较字符串长度&lt;/li&gt;&#xA;&lt;li&gt;比较哈希，同时比较字符串长度&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;结果如下表所示，输入列为输入的待比较字符串，输出列的单位为 Wei&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Input A&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Input B&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: right&#34;&gt;Hash&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: right&#34;&gt;Character + Length&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: right&#34;&gt;Hash + Length&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;abcdefghijklmnopqrstuvwxyz&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;abcdefghijklmnopqrstuvwxyz&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1225&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;7062&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1261&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;abcdefghijklmnopqrstuvwxy&lt;strong&gt;X&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;abcdefghijklmnopqrstuvwxyz&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1225&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;7012&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1261&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;X&lt;/strong&gt;bcdefghijklmnopqrstuvwxyz&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;abcdefghijklmnopqrstuvwxyz&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1225&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;912&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1261&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;a&lt;strong&gt;X&lt;/strong&gt;cdefghijklmnopqrstuvwxyz&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;abcdefghijklmnopqrstuvwxyz&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1225&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1156&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1261&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;ab&lt;strong&gt;X&lt;/strong&gt;defghijklmnopqrstuvwxyz&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;abcdefghijklmnopqrstuvwxyz&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1225&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1400&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1261&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;abcdefghijkl&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;abcdefghijklmnopqrstuvwxyz&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1225&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;690&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;707&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;a&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;a&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1225&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;962&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1261&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;ab&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;ab&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1225&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1156&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1261&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;abc&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;abc&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1225&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1450&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1261&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;可以看出，哈希+字符串长度 的比较方式 Gas 消耗更加稳定，这种方式比较高效。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-可见性与getter函数&#34;&gt;2. 可见性与Getter函数&lt;/h2&gt;&#xA;&lt;p&gt;转自：&lt;a href=&#34;https://learnblockchain.cn/docs/solidity/contracts.html#getter&#34;&gt;Solidity 0.6.4 中文文档&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Solidity 有两种函数调用：内部调用（Internal Function Calls）和外部调用（External Function Calls）。前者指直接或递归地调用合约内部函数，不会产生实际的 EVM 调用，因此也被称为「消息嗲用」，后者指从合约外部调用合约中的函数，会产生一个 EVM 调用。&lt;/p&gt;&#xA;&lt;h3 id=&#34;21-可见性&#34;&gt;2.1 可见性&lt;/h3&gt;&#xA;&lt;p&gt;因此，函数和状态变量有四种可见性。函数可以指定为 &lt;code&gt;external&lt;/code&gt;，&lt;code&gt;public&lt;/code&gt;，&lt;code&gt;internal&lt;/code&gt; 或 &lt;code&gt;private&lt;/code&gt;，对于状态变量， 默认是 &lt;code&gt;internal&lt;/code&gt; 且不能设置为 &lt;code&gt;external&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;external&lt;/code&gt;：外部函数作为合约接口的一部分，意味着我们可以从其他合约和交易中调用。 一个外部函数 &lt;code&gt;f&lt;/code&gt; 不能从内部调用（即 &lt;code&gt;f&lt;/code&gt; 不起作用，但 &lt;code&gt;this.f()&lt;/code&gt;可以）。 当收到大量数据的时候，外部函数有时候会更有效率，因为数据不会从calldata复制到内存.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;public&lt;/code&gt;：public 函数是合约接口的一部分，可以在内部或通过消息调用。对于 public 状态变量， 会自动生成一个 getter 函数（见下面）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;internal&lt;/code&gt;：这些函数和状态变量只能是内部访问（即从当前合约内部或从它派生的合约访问），不使用 &lt;code&gt;this&lt;/code&gt; 调用。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;private&lt;/code&gt;：private 函数和状态变量仅在当前定义它们的合约中使用，并且不能被派生合约使用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;合约中的所有内容对外部观察者都是可见的。设置一些 &lt;code&gt;private&lt;/code&gt; 类型只能阻止其他合约访问和修改这些信息， 但是对于区块链外的整个世界它仍然是可见的。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;可见性标识符的定义位置，对于状态变量来说是在类型后面，对于函数是在参数列表和返回关键字中间，如下例&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;pragma solidity&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;internal&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;在下面的例子中，&lt;code&gt;D&lt;/code&gt; 可以调用 &lt;code&gt;c.getData（）&lt;/code&gt; 来获取状态存储中 &lt;code&gt;data&lt;/code&gt; 的值，但不能调用 &lt;code&gt;f&lt;/code&gt; 。 合约 &lt;code&gt;E&lt;/code&gt; 继承自 &lt;code&gt;C&lt;/code&gt; ，因此可以调用 &lt;code&gt;compute&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;pragma solidity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;internal&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 下面代码编译错误&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;readData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 错误：成员 `f` 不可见&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 错误：成员 `compute` 不可见&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;E&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 访问内部成员（从继承合约访问父合约成员）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;22-getter-函数&#34;&gt;2.2 Getter 函数&lt;/h3&gt;&#xA;&lt;p&gt;编译器自动为所有 &lt;strong&gt;public&lt;/strong&gt; 状态变量创建 getter 函数。对于下面给出的合约，编译器会生成一个名为 &lt;code&gt;data&lt;/code&gt; 的函数， 该函数没有参数，返回值是一个 &lt;code&gt;uint&lt;/code&gt; 类型，即状态变量 &lt;code&gt;data&lt;/code&gt; 的值。 状态变量的初始化可以在声明时完成。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;pragma solidity&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Caller&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;getter 函数具有外部（external）可见性。如果在内部访问 getter（即没有 &lt;code&gt;this.&lt;/code&gt; ），它被认为一个状态变量。 如果使用外部访问（即用 &lt;code&gt;this.&lt;/code&gt; ），它被认作为一个函数。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;pragma solidity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 内部访问&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 外部访问&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;如果你有一个数组类型的 &lt;code&gt;public&lt;/code&gt; 状态变量，那么你只能通过生成的 getter 函数访问数组的单个元素。 这个机制以避免返回整个数组时的高成本gas。 可以使用如 &lt;code&gt;data(0)&lt;/code&gt; 用于指定参数要返回的单个元素。 如果要在一次调用中返回整个数组，则需要写一个函数，例如：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;pragma solidity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;arrayExample&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// public state variable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// 指定生成的Getter 函数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;cm&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;  function myArray(uint i) public view returns (uint) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;      return myArray[i];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// 返回整个数组&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;现在可以使用 &lt;code&gt;getArray()&lt;/code&gt; 获得整个数组，而 &lt;code&gt;myArray(i)&lt;/code&gt; 是返回单个元素。&lt;/p&gt;&#xA;&lt;p&gt;下一个例子稍微复杂一些：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;pragma solidity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Complex&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;bytes3&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;mapping&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;mapping&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;mapping&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]))&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;这将会生成以下形式的函数&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bytes3&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;请注意，因为没有好的方法来提供映射的键，所以结构中的映射被省略。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-合约间调用&#34;&gt;3. 合约间调用&lt;/h2&gt;&#xA;&lt;p&gt;之前的实验合约间的调用没有成功，这次就仔细地研究一下合约间地调用机制。分为两种情况&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;调用者和被调用者在一个sol文件中&lt;/li&gt;&#xA;&lt;li&gt;调用者和被调用者在不同的sol文件中&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;本文提到的合约调用方法的实质是抽象合约的使用。&lt;/p&gt;&#xA;&lt;h3 id=&#34;31-同sol文件的智能合约调用&#34;&gt;3.1 同sol文件的智能合约调用&lt;/h3&gt;&#xA;&lt;p&gt;下面的智能合约中，Main和Add两个合约定义在一个Main.sol文件中，可以同时编译，然后逐个部署。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;pragma&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;solidity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Addnumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;add5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;add5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;以使用Remix为例，点击编译按钮编译Main.sol文件，将会同时编译Main和Add两个合约。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://picped-1301226557.cos.ap-beijing.myqcloud.com/YJS_20191108_68472178-e6294d00-025a-11ea-8b4b-41a53b471c18.png&#34; alt=&#34;编译&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;然后首先部署Add合约，因为Main合约的部署需要Add的合约地址作为参数。切换到部署和运行选项卡，选择Add合约，点击&lt;code&gt;Deploy&lt;/code&gt;，成功部署后，复制合约地址。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://picped-1301226557.cos.ap-beijing.myqcloud.com/YJS_20191108_68472256-0e18b080-025b-11ea-9a24-e324c82cd7b5.png&#34; alt=&#34;deploy simple Add&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;然后重新选择Main合约，填入Add合约地址作为参数，点击部署按钮。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://picped-1301226557.cos.ap-beijing.myqcloud.com/YJS_20191108_68472285-1a047280-025b-11ea-8bb5-a1fb5c65574e.png&#34; alt=&#34;deploy simple Main&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;测试合约间调用，由合约内容可知，Main合约中的Addnumber函数调用了Add合约的add5函数，传入参数为10，得到的结果应为15。展开左侧的&lt;code&gt;Deployed Contracts&lt;/code&gt;，点击Addnumber进行调用，结果如下。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://picped-1301226557.cos.ap-beijing.myqcloud.com/YJS_20191108_68472220-f5a89600-025a-11ea-9d2a-b39c8e39a810.png&#34; alt=&#34;call test&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;32-不同sol文件的智能合约调用&#34;&gt;3.2 不同sol文件的智能合约调用&lt;/h3&gt;&#xA;&lt;p&gt;这一次我们测试不同sol文件的智能合约调用，来一个复杂一点的，两个合约分别是Add.sol和Main.sol。&lt;/p&gt;&#xA;&lt;p&gt;Add.sol使用了一个结构体来定义数值，并通过映射定义查找表来寻找这个值。文件中定义了两个函数，numRegister用来向表中添加数值，addValue用来将从表中查到的指定值+5返回。之所以用这个结构是因为我们的项目里用到了，这里来测试一下可不可行。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;pragma&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;solidity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;mapping&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lookupTable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numRegister&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;lookupTable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lookupTable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Main.sol没有多大变化&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;pragma&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;solidity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Addnumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;仍然是先编译部署Add合约，部署后调用numRegister函数写入数值5，并调用addValue函数测试返回。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://picped-1301226557.cos.ap-beijing.myqcloud.com/YJS_20191108_68472316-2d174280-025b-11ea-96a6-51af8dd4fd4c.png&#34; alt=&#34;deploy comlex Add&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接着编译部署Main合约，复制Add合约地址作为初始化参数，部署后调用Addnumber函数测试&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://picped-1301226557.cos.ap-beijing.myqcloud.com/YJS_20191108_68472331-399b9b00-025b-11ea-933f-8c03ff95c55a.png&#34; alt=&#34;deploy comlex Main&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;33-总结&#34;&gt;3.3 总结&lt;/h3&gt;&#xA;&lt;p&gt;合约内的调用方法是相同的，都要先实例化，然后传入被调合约地址，接着才能调用。而写在不同sol文件中时，需要额外声明被调合约的抽象合约，有些文章中说使用&lt;code&gt;call&lt;/code&gt;，&lt;code&gt;callcode&lt;/code&gt;或&lt;code&gt;delegatecall&lt;/code&gt;，但并不建议，因为这三个函数都是非常底层的函数，破坏了类型的安全，只能作为最后的手段使用。&lt;/p&gt;&#xA;&lt;p&gt;详细的解释参考了&lt;a href=&#34;https://ethereum.stackexchange.com/questions/9733/calling-function-from-deployed-contract&#34;&gt;StackExchange-Calling function from deployed contract&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;4-函数修饰词pure和view&#34;&gt;4. 函数修饰词pure和view&lt;/h2&gt;&#xA;&lt;p&gt;转自&lt;a href=&#34;https://learnblockchain.cn/docs/solidity/contracts.html#view&#34;&gt;深入理解Solidity-函数&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;这两个函数修饰词的作用是告诉编译器函数是否会读取/修改状态，view 表示保证不修改状态，pure 表示保证不读取也不修改状态。Solidity v0.4.17 之前没有这两个修饰词，而是使用 constant 关键字，和 view 的含义相同，不过在 v0.5.0 之后被移除，现在只能使用这两个 view 和 pure。&lt;/p&gt;&#xA;&lt;h3 id=&#34;41-view-视图函数&#34;&gt;4.1 view 视图函数&lt;/h3&gt;&#xA;&lt;p&gt;Getter 方法会被自动标记为 &lt;code&gt;view&lt;/code&gt;，除此之外，一个 view 修饰的例子如下&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;pragma solidity&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;view 保证函数不修改状态，以下操作会被认为是修改状态&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;修改状态变量。&lt;/li&gt;&#xA;&lt;li&gt;产生事件。&lt;/li&gt;&#xA;&lt;li&gt;创建其它合约。&lt;/li&gt;&#xA;&lt;li&gt;使用 &lt;code&gt;selfdestruct&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;通过调用发送以太币。&lt;/li&gt;&#xA;&lt;li&gt;调用任何没有标记为 &lt;code&gt;view&lt;/code&gt; 或者 &lt;code&gt;pure&lt;/code&gt; 的函数。&lt;/li&gt;&#xA;&lt;li&gt;使用低级调用。&lt;/li&gt;&#xA;&lt;li&gt;使用包含特定操作码的内联汇编。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;42-pure-纯函数&#34;&gt;4.2 pure 纯函数&lt;/h3&gt;&#xA;&lt;p&gt;pure 保证不读取也不修改状态，不修改的定义上面已经提到，下面的操作被认为是读取状态&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;读取状态变量。&lt;/li&gt;&#xA;&lt;li&gt;访问 &lt;code&gt;address(this).balance&lt;/code&gt; 或者 &lt;code&gt;.balance&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;访问 &lt;code&gt;block&lt;/code&gt;，&lt;code&gt;tx&lt;/code&gt;， &lt;code&gt;msg&lt;/code&gt; 中任意成员 （除 &lt;code&gt;msg.sig&lt;/code&gt; 和 &lt;code&gt;msg.data&lt;/code&gt; 之外）。&lt;/li&gt;&#xA;&lt;li&gt;调用任何未标记为 &lt;code&gt;pure&lt;/code&gt; 的函数。&lt;/li&gt;&#xA;&lt;li&gt;使用包含某些操作码的内联汇编。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;一个 pure 修饰的例子如下&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;pragma solidity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h2 id=&#34;5-浮点数处理&#34;&gt;5. 浮点数处理&lt;/h2&gt;&#xA;&lt;p&gt;首先声明，Solidity 中支持浮点数定义，但无法赋值和进行计算。文档中对其描述是「目前还不完全支持」，虽然这意味着以后可能会完全支持，但等不及了，下面记录几个可参考的资料。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;来自 &lt;a href=&#34;https://ethereum.stackexchange.com/questions/83785/what-fixed-or-float-point-math-libraries-are-available-in-solidity&#34;&gt;ethereum stackexchange&lt;/a&gt; 中的回答，介绍了一些可用的库；&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMathQuad.md&#34;&gt;ABDK Math Quad&lt;/a&gt;，包含两个合约库，一个支持定点数，一个支持浮点数；&lt;/li&gt;&#xA;&lt;li&gt;Mikhail Vladimirov 的 &lt;a href=&#34;https://medium.com/coinmonks/math-in-solidity-part-1-numbers-384c8377f26d&#34;&gt;Math in Solidity&lt;/a&gt; 系列文章，介绍如何在 Solidity 中处理各种数学运算，写的非常棒。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;6-地址类型&#34;&gt;6. 地址类型&lt;/h2&gt;&#xA;&lt;p&gt;在智能合约中显式传入地址类型时，可能会出现如下错误&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Address checksum&lt;/p&gt;&#xA;&lt;p&gt;This looks like an address but has an invalid checksum. If this is not used as an address, please prepend &amp;lsquo;00&amp;rsquo;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;关于该问题的一个讨论见 &lt;a href=&#34;https://github.com/ethereum/EIPs/issues/55&#34;&gt;https://github.com/ethereum/EIPs/issues/55&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;这是因为合约中现在使用地址类型必须做一个转换，不是简单的全部大写字母或小写字母，而是遵循一定的规则，这个规则见 &lt;a href=&#34;https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md&#34;&gt;ethereum/EIPs#55&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;但是网上提供的解决方案一般是使用JS库中的转换函数，在智能合约中无法直接解决，好在，web3提供了一个&lt;a href=&#34;https://web3-tools.netlify.com/&#34;&gt;在线API接口&lt;/a&gt;，可以调用其&lt;code&gt;checkAddressChecksum&lt;/code&gt;函数对地址进行转换，然后将转换后的结果直接用于合约代码。&lt;/p&gt;&#xA;&lt;h2 id=&#34;7-gas-limit问题&#34;&gt;7. Gas limit问题&lt;/h2&gt;&#xA;&lt;p&gt;在搭建的以太坊私链上进行智能合约部署时，出现了以下问题&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;INFO&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;11.690&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Served&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;eth_sendTransaction&lt;/span&gt;               &lt;span class=&#34;nx&#34;&gt;reqid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;684.186&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;µs&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;exceeds block gas limit&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exceeds&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;block&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gas&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;undefined&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;出现该错误的原因如错误描述，是当前合约所需的gas超过了区块的最大gas。这可能与参数gasLimit有关。在创世区块的配置文件中，我们使用了默认的配置值，为&lt;code&gt;0x2fefd8&lt;/code&gt;，转换为10进制即&lt;code&gt;3141592&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;注：&lt;a href=&#34;http://tool.oschina.net/hexconvert/&#34;&gt;在线转换工具&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>研究记录13-添加恶意行为检测机制</title>
      <link>http://localhost:1313/2020/credit-based-mechanism/</link>
      <pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/credit-based-mechanism/</guid>
      <description>&lt;p&gt;吸收了一些新论文的想法，对原访问控制系统功能做了补充，添加了恶意行为检测（或者称为动态访问控制），目的是减少恶意行为，增加合法行为在区块链中得到确认的几率。所有调整总结查看 &lt;a href=&#34;#jump&#34;&gt;附录I&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>An Attribute-Based Distributed Access Control for Blockchain-enabled IoT</title>
      <link>http://localhost:1313/2020/an-attribute-based-distributed-access-control-for-blockchain-enabled-iot/</link>
      <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/an-attribute-based-distributed-access-control-for-blockchain-enabled-iot/</guid>
      <description>&lt;p&gt;P. Wang, Y. Yue, W. Sun, and J. Liu, “An Attribute-Based Distributed Access Control for Blockchain-enabled IoT,” in &lt;em&gt;2019 International Conference on Wireless and Mobile Computing, Networking and Communications (WiMob)&lt;/em&gt;, Barcelona, Spain, Oct. 2019, pp. 1–6, doi: &lt;a href=&#34;https://doi.org/10.1109/WiMOB.2019.8923232&#34;&gt;10.1109/WiMOB.2019.8923232&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;第一作者是西电的，国家自然科学基金项目成果，研究方向完全一致，都是利用智能合约实现 ABAC 模型完成物联网访问控制。可以看的出来，这篇论文也深受 Zhang&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 的影响，参考的文献全都看过，由于方向一致，这是必然的事情。因此，这里记的笔记不包括引言、相关工作、实验等部分，仅仅理解和阐述作者的架构描述，并分析其优缺点，将优点吸纳到我们当前的方案。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-系统架构&#34;&gt;1. 系统架构&lt;/h2&gt;&#xA;&lt;p&gt;用来说明方案的 IoT 场景是 smart home，如下图所示。作者将设备分为三类&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;有足够计算和存储能力的节点，比如 server 和 desktop，这部分作为区块链全节点；&lt;/li&gt;&#xA;&lt;li&gt;只有有限的计算和存储能力，比如 mobile phone 和 smart TV，这部分作为轻节点；&lt;/li&gt;&#xA;&lt;li&gt;计算和存储能力高度有限，比如传感器，这些设备称为超轻量级节点，由所连接的网关作为代理。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ieeexplore.ieee.org/mediastore_new/IEEE/content/media/8913409/8923119/8923232/wang1-p6-wang-small.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Server 负责存储 IoT 设备产生的数据，包括传感器收集的环境信息、运行过程产生的日志文件，同时向设备提供服务，因此也会发送一些命令到设备从而控制设备的执行。全节点或轻节点通过有线或 Wi-Fi 连到网络，维持区块链的运行，保存所有或部分访问控制信息，执行访问控制。超轻量级节点通过 Bluetooth、Wi-Fi、ZigBee 等技术连到网关，从而连到网络，不存储访问控制信息，只通过网关发起访问控制请求或获取访问控制结果。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-访问控制架构&#34;&gt;2. 访问控制架构&lt;/h2&gt;&#xA;&lt;p&gt;核心是 ABAC 模型，如下图所示，收到访问控制请求后根据主体属性（Subject Attribute, SA）、客体属性（Object Attribute, OA）和环境属性（Environment Attribute, EA）执行预定义的策略，从而得到结果。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Attribute-Based Access Control</title>
      <link>http://localhost:1313/2020/attribute-based-access-control/</link>
      <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/attribute-based-access-control/</guid>
      <description>&lt;p&gt;V. C. Hu, D. R. Kuhn, and D. F. Ferraiolo, “Attribute-Based Access Control,” &lt;em&gt;Computer&lt;/em&gt;, vol. 48, no. 2, pp. 85–88, Feb. 2015, doi: &lt;a href=&#34;https://doi.org/10.1109/MC.2015.33&#34;&gt;10.1109/MC.2015.33&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-引言&#34;&gt;1. 引言&lt;/h2&gt;&#xA;&lt;p&gt;传统的访问控制基于用户身份（分配给该用户的角色或组），这种方式在管理上非常繁琐，策略的表达能力也不足。一种解决办法是基于用户和对象属性以及环境条件来授予或拒绝用户请求，这种方法称为基于属性的访问控制（Attribute-based access control，ABAC）。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-abac-模型介绍&#34;&gt;2. ABAC 模型介绍&lt;/h2&gt;&#xA;&lt;p&gt;ABAC 是一个逻辑访问控制模型，它通过对实体（[主体]^(subject)和 [对象]^(object)）、操作、与请求相关的环境这三类属性定义评估规则来控制对对象的访问。由于它在决策逻辑中加入了更多的输入变量，提供了更大的可能性，使得策略规则的表示更加明确和详细。&lt;/p&gt;&#xA;&lt;p&gt;使用 ABAC 使得我们无需针对每个主体和对象创建访问规则集。例如，南希·史密斯是心脏科的一名护士，我们将她作为主体，并且在她受雇时为她分配一组主体属性，将心脏病患者的病历文件夹作为对象，在文件夹被创建时分配一组对象属性，对象属性由创建者直接赋予或从自动扫描工具接收。管理者或者对象所有者可以利用主体和对象的这些属性创建一组访问控制规则，比如心脏科的护士被允许查看心脏病患者的病例文件夹，从而控制访问请求。&lt;/p&gt;&#xA;&lt;p&gt;在 ABAC 模型中，只需要更改属性值即可影响最后的访问结果，而无需维护定义在主体和对象之上的规则集，这种方法提供了更加动态的访问控制管理能力。此外，ABAC 还允许管理员或对象所有者在事先不知道访问主体的情况下定义访问控制策略，也能够应对无限数量主体的访问请求。当新的主体加入组织时，也无需修改访问规则和对象属性，只需要为新加入的主体分配合适的主体属性即可，比如新入职的心脏科护士被分配部门为心脏科的属性。这种针对未知主体的适应性是 ABAC 的主要好处之一。&lt;/p&gt;&#xA;&lt;p&gt;由于 ABAC 高度的灵活性，已经引起了整个行业甚至政府的兴趣，并且是当今发展最快的访问控制模型。但是除了为主体、对象和环境设置属性这一基本思路外，ABAC 模型的实现并没有统一的标准。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-企业环境下的实现&#34;&gt;3. 企业环境下的实现&lt;/h2&gt;&#xA;&lt;p&gt;由于缺乏对 ABAC 特性的共识，用户无法准确评估与该模型相关的好处和挑战。为了解决这个问题，国家标准与技术研究所（NIST）发布了《Guide to Attribute Based Access Control (ABAC) Definition and Considerations》&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。这个文档有两个作用，首先，它提供了 ABAC 的定义和功能组件的描述。其次，它描述了在企业中使用 ABAC 控制信息的计划、设计、实现和操作考虑。这本指南的重点是 ABAC 的实现，而不是成本和效率的权衡。&lt;/p&gt;&#xA;&lt;p&gt;当跨企业部署 ABAC 用以增加不同组织之间的信息共享时，其实现可能会变得更加复杂，需要一个属性管理的基础设施、机器可执行的策略以及一系列支持访问决策和策略执行的功能。如下图所示，除了基本的策略、属性和访问控制机制要求外，企业还必须支持企业策略开发和分发、企业身份和主体属性、主体属性共享、企业对象属性、身份验证等管理功能，以及访问控制机制的部署和分发。启用这些功能需要仔细考虑影响企业 ABAC 解决方案设计、安全性和互操作性的许多因素，上面提到的指南可以帮助 ABAC 系统规划者、架构师、管理者和实现者来分阶段完成这些功能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Supply Chain Management Automation using Wireless Sensor Networks</title>
      <link>http://localhost:1313/2020/supply-chain-management-automation-using-wireless-sensor-networks/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/supply-chain-management-automation-using-wireless-sensor-networks/</guid>
      <description>&lt;p&gt;L. Evers and P. Havinga, “Supply Chain Management Automation using Wireless Sensor Networks,” in &lt;em&gt;2007 IEEE Internatonal Conference on Mobile Adhoc and Sensor Systems&lt;/em&gt;, Pisa, Italy, Oct. 2007, pp. 1–3, doi: &lt;a href=&#34;https://doi.org/10.1109/MOBHOC.2007.4428689&#34;&gt;10.1109/MOBHOC.2007.4428689&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;注：插图来自原论文和网络。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-引言&#34;&gt;1. 引言&lt;/h2&gt;&#xA;&lt;p&gt;这篇论文谈到的问题是无线传感器网络（WSN）如何用于供应链管理领域。&lt;/p&gt;&#xA;&lt;p&gt;以RFID&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;形式出现的无源射频技术已经被引入到供应链管理中用以简化流程，[主动无线电通信技术]^(active radio communication)也可以提高处理效率和降低成本。比如，通过对安装到板条箱（crate）、笼车（roll container）、托盘（pallet）和航运集装箱（shipping containers）上的 WSN 节点进行编程，可以监控整个货物运输过程，包括验证新鲜食品当前温度等环境情况和检测由于突然冲击、打开集装箱和其他形式的违约而造成的损失。这种全流程的监控可以大幅减少交货延误和货物丢失或被盗的可能性，避免造成重大损失。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://picped-1301226557.cos.ap-beijing.myqcloud.com/YJS_20200420_%E5%90%84%E7%A7%8D%E7%AE%B1%E5%AD%90.jpg&#34; alt=&#34;图1 从左到右依次是板条箱、笼车、托盘和集装箱&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-场景描述&#34;&gt;2. 场景描述&lt;/h2&gt;&#xA;&lt;p&gt;如下图，示例场景是一批香蕉从巴西里约热内卢附近的农场运往鹿特丹的超市配送中心。香蕉被打包放到托盘上，每个托盘都装有一个传感器节点。一大早，这些托盘就被卡车从农场运到港口的一个货运码头，在那里，托盘被装进集装箱，然后集装箱一路运到连锁超市的配送中心。在整个旅程中，香蕉的温度需要保持在10到15摄氏度之间，同时应该远离新鲜的咖啡豆等物品，因为这些东西产生的乙烯加速香蕉的成熟过程。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ieeexplore.ieee.org/mediastore_new/IEEE/content/media/4428591/4428592/4428689/4428689-fig-1-source-small.gif&#34; alt=&#34;图2 运输过程&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;从农场到配送中心的运输过程中（称之为[旅程]^(journey)），监控如下事件：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;托盘上的温度传感器测量环境温度，并将测量的温度存储在设备的日志文件中。如果温度超过限制，设备就会发出警报。&lt;/li&gt;&#xA;&lt;li&gt;每个托盘的设备与周围其他的设备通信，检查周围是否正在运输咖啡豆等货物。当托盘被装进集装箱时，设备还要求集装箱检查一定距离（比如10米）内是否有运送咖啡店等物品的其它集装箱。如果在附近发现了咖啡店等物品，设备会将其写入日志文件并发出警报。&lt;/li&gt;&#xA;&lt;li&gt;在整个旅程中，每个托盘上的设备都检查是否符合运输计划。如图2所示，在旅程的每个阶段，设备都会验证自己是否装到正确的卡车上，是否卸到了正确的仓库，所有的行程都会被记录下来，当设备没有在限定的时间位于正确的地点，就会发出警报。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;在农场中，装上卡车之前，托盘上的设备验证当前位置是否正确。接下来，设备随着托盘被装到卡车上，然后和周围同一卡车上的托盘设备通信，比较记录的目的地和内容，从而进行验证。而在卡车中，托盘节点必须检测从卡车中取出的操作，主要通过检测卡车和港口装卸码头无线基础设施（访问点，access point）的存在来推断。如果没有检测到正确的码头，则需要发出警报。托盘在码头卸货后，装在集装箱内，一直运到配送中心。设备在码头验证它们是否被放到正确的集装箱，最后通过检测配送中心的访问点，验证是否到达配送中心。&lt;/p&gt;&#xA;&lt;p&gt;当在旅途中检测到错误时，设备会发出警报。根据运输阶段的不同，使用不同类型的警报方法。例如，当托盘在卡车外面等待装运时，发出警报声和闪烁 LED 引起工人的注意，从而纠正问题。但当进入卡车内部时，应将警报信息发送给卡车驾驶员。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-实验&#34;&gt;3. 实验&lt;/h2&gt;&#xA;&lt;p&gt;作者使用 SensorScheme&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; 进行简单的实现，这是一个基于 Scheme 语言的解释器，能够动态加载 WSN 代码到设备。该平台提供了一个安全的执行环境，在该环境中，程序故障不会使节点崩溃。此外，由于传输的代码比较小，节点能够被快速而高效的编程，在实验中，节点在传输开始前重新编程，只花费了几秒钟。本文使用该平台实现了第二部分提到的场景，对货物运输的全过程进行监控，完成了供应链管理的自动化。&lt;a href=&#34;https://srfi.schemers.org/&#34;&gt;SensorScheme实现&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;实验在两个位置的桌子间进行，距离10米以上，使彼此的无线电无法直接到达，两边都需要连接到笔记本电脑和其他演示设备。使用一组 Tmote Sky&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;motes作为托盘上安装的设备，两个位置的桌子充当农场、港口、配送中心等不同地点，笔记本电脑连接的 mote 充当这些地点的访问点。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blockchain and Deep Reinforcement Learning Empowered Intelligent 5G Beyond</title>
      <link>http://localhost:1313/2020/blockchain-and-deep-reinforcement-learning-empowered-intelligent-5g-beyond/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/blockchain-and-deep-reinforcement-learning-empowered-intelligent-5g-beyond/</guid>
      <description>&lt;p&gt;Day Y, Xu D, Maharjan S, 等. Blockchain and Deep Reinforcement Learning Empowered Intelligent 5G Beyond[J]. IEEE Network, 2019, 33(3): 10–17. DOI:&lt;a href=&#34;https://doi.org/10.1109/MNET.2019.1800376&#34;&gt;10.1109/MNET.2019.1800376&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-引言&#34;&gt;1. 引言&lt;/h2&gt;&#xA;&lt;p&gt;区块链和 AI 会在 6G 中扮演关键角色，前者可保证分布式网络安全，后者可用于智能资源管理。不过 PoW 共识需要大量计算资源和电力，很难用在无线网络中，MEC（mobile edge computing） 是一种可能的解决办法。&lt;/p&gt;&#xA;&lt;p&gt;5G 中引入了异构网络和 D2D 通信来提高通信速率和保证无缝覆盖，MEC 同样可以起作用，主要通过计算卸载和分布式内容缓存来减少延迟并避免[回程拥塞]^(backhaul congestion)。但由于无线网络的时变特性，各种新兴应用和未知交通系统的多样化和严格的要求，设计一个解决这些问题（计算卸载或内容缓存）的高性能算法比较困难。AI 可以被引入处理该问题，例如，论文&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;利用深度强化学习（DRL）解决边缘计算和缓存资源分配的问题。&lt;/p&gt;&#xA;&lt;p&gt;无论是区块链还是 AI，将它们引入无线网络的研究都已经存在，但这些研究并没有将两者结合。作者在这篇论文中同时集成了这两种技术到无线网络，提出了一个用于下一代无线网络的架构，该架构可以进行安全和智能的资源管理，例如频谱共享、内容缓存、能量交易和计算卸载。主要思路是，利用联盟链建立安全的内容共享环境，利用 DRL 算法设计缓存策略从而最大化系统[效用]^(utility)。我们的主要关注点如下&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;集成区块链和 AI 到无线网络的架构组成&lt;/li&gt;&#xA;&lt;li&gt;频谱共享、内容缓存、能量交易和计算卸载四个场景的描述&lt;/li&gt;&#xA;&lt;li&gt;基于内容缓存场景的方案设计与实现&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;引言部分提到的论文中有几篇值得参考。论文&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;利用区块链开发了一个安全的本地 P2P 电子交易系统，用于电动汽车间的电力交易。论文&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;利用区块链和智能合约设计了一个用于车辆边缘网络的基于信誉的数据共享方案。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-架构&#34;&gt;2. 架构&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-架构描述&#34;&gt;2.1 架构描述&lt;/h3&gt;&#xA;&lt;p&gt;整体架构如下图所示，共分三层：云、边缘和用户。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ieeexplore.ieee.org/mediastore_new/IEEE/content/media/65/8726057/8726067/8726067-fig-1-source-small.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;云层&lt;/strong&gt;是一批计算、缓存和处理能力都相当强的服务器。一方面，可以利用数据挖掘和大数据等先进技术，通过预测一些事件或预分配一些资源，使 network-level orchestration shifting 从被动的网络操作转变为主动网络操作。另一方面，云服务器也可以处理一些对延迟容忍较高的应用，存储大容量或不受欢迎的内容。此外，云层还有一个中央权威，配备了防篡改硬件，用于管理所有实体的安全参数和密钥：宏基站（macro base station, MBS）、小型基站（small base station, SBS）、路边单元（roadside units, RSU）、移动设备和智能车辆。&lt;/p&gt;</description>
    </item>
    <item>
      <title>研究记录12-区块链与D2D内容缓存/计算卸载方向探索</title>
      <link>http://localhost:1313/2020/blockchain-for-d2d-cache-or-computing-offload/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/blockchain-for-d2d-cache-or-computing-offload/</guid>
      <description>&lt;h2 id=&#34;1-概念引入&#34;&gt;1. 概念引入&lt;/h2&gt;&#xA;&lt;p&gt;论文&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;提到，一些邻近的用户设备（User Equipment, UE）组合其计算能力，服务于具有更高性能需求的应用可以叫做 ad-hoc cloud。实际应用需要解决几个关键的问题：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在保证处理后的数据能够返回到源 UE 的同时，在附近找到合适的计算 UE；&lt;/li&gt;&#xA;&lt;li&gt;尽管没有用于促进可靠计算的控制信道，但必须启用计算 UE 间的协调；&lt;/li&gt;&#xA;&lt;li&gt;考虑到电池消耗和额外的数据传输约束，必须激励计算 UE 向其它设备提供其计算能力；&lt;/li&gt;&#xA;&lt;li&gt;安全和隐私问题。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;2-背景调查&#34;&gt;2. 背景调查&lt;/h2&gt;&#xA;&lt;p&gt;如第一部分所述，我们主要谈论的问题被称作 ad-hoc cloud，在论文&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;中，将该方向的研究正式命名为移动自组织云（Mobile ad hoc cloud，MAC），这篇综述对2016年及之前的该方向论文进行了总结，我们总结一些可能有用的内容。&lt;/p&gt;&#xA;&lt;p&gt;本地的计算密集型应用（如游戏、高清视频、AR、VR、图像识别等）需要大量的服务与资源，利用云提供这些资源的方式叫做移动云计算（Mobile Cloud Computing， MCC）。但是，考虑到网络连接的带宽和质量，这种方式不总是可行的，这种情况下，人们提出了 MAC，利用一组移动设备的共享资源，来实现一个共同的目标。MAC 不是用来取代原有技术的，而是一种补充，当网络质量不佳、附近基站不可用或其它情况时，使用这种方式。&lt;/p&gt;&#xA;&lt;p&gt;以实时会议（conference）出席的例子来说明：移动用户拍摄会议参与者的快照，并将捕获的人脸和存储的照片进行匹配，从而确定谁在参加哪个会话（session）；此外，出于会议议程的规划，会议组织者希望获取不同 session 中参与者的最新情况。在该场景中，移动用户可能没有足够的资源在单个设备上执行该任务，因此选择使用 MAC 满足任务执行的实时性需求。假设每个 session 有 50 个参与者，其中 10 个愿意参与 MAC，任务被分解为如下步骤&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;检测快照中的人脸数量，并为每个人脸裁剪一个小图像；&lt;/li&gt;&#xA;&lt;li&gt;分别提交每个人脸进行识别；&lt;/li&gt;&#xA;&lt;li&gt;将与会者列表返回给用户。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;假设第 1 步需要  15 秒，第2步需要 10 秒，第 3 步需要 6 秒，不使用 MAC 移动用户总共需要 15+10&lt;em&gt;50+6 = 512s，如果使用 MAC，任务 2 被分配给 10 个 MAC 参与者（provider），时间将大幅减少，假设与所有 provider 的通信开销是3s，那么总时间为 15+3 +10&lt;/em&gt; 5+6 = 74s。&lt;/p&gt;</description>
    </item>
    <item>
      <title>面对疫情区块链可以做些什么</title>
      <link>http://localhost:1313/2020/what-can-blockchain-do-during-the-covid-19/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/what-can-blockchain-do-during-the-covid-19/</guid>
      <description>&lt;p&gt;这场年初爆发的疫情在国内控制住以后，反而开始在全世界其它国家蔓延，如大数据、5G等技术均在当前这场疫情中产生了自己的作用，区块链能做些什么，可以引起我们的思考。本篇文章总结网上提到的和自己想到的一些方面，并作一些思考。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-疫情预警&#34;&gt;1. 疫情预警&lt;/h2&gt;&#xA;&lt;p&gt;据有关报道显示，新型冠状病毒在2019年12月其实就已经有迹可循了，但直到2020年1月中下旬才正式有公告通知，对于这种重要信息的滞后性，严重影响了相关病例的治疗和有关部门的防控工作。&lt;/p&gt;&#xA;&lt;p&gt;我国早在2008年就开始建立了国家传染病自动预警机制，采用的是自下而上的数据回馈及分析方式，在上报过程中会经过多层核实，在面对突然爆发的传染类疾病时，会有严重的滞后性。同时，医院在保护病人隐私的前提下，难以做到完全的共享数据，对疾病的评估也会有一定的难度。&lt;/p&gt;&#xA;&lt;p&gt;**区块链能解决的就是如何做到数据的同步更新，而不完全依赖于自下而上的现有预警机制，**利用目前已有的公共卫生数据交换平台作为每级数据的交换节点，形成实时自动化的数据交换机制。将医疗数据的上报下沉到各个环节，医疗机构上报初次传染病历；再由相关机构进行核实补充；最后由国家预警部门根据大数据预警，这就解决了多重审核的问题。同时构建出一个跨省、市、区等的医疗数据防疫链，上传的数据自动同步实时更新，也就解决了医院之间的数据孤岛问题。相较而言，疫情预警将会更快捷准时。&lt;/p&gt;&#xA;&lt;p&gt;下面是来源于链上观的一份关于区块链+传染病自动预警系统优化升级的解决方案：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;以省级为单位，由当地疾控中心主导建立一条“疾控联盟链”，首批成员是当地省、市、区、县级的大小医院。疾控中心应设定一套奖惩制度补贴各个医院，鼓励医院积极地提交各类传染病性质的病例，包括已有传染病例和未知传染病例及疑似传染病例等。&lt;/li&gt;&#xA;&lt;li&gt;每一次新数据提交后都会向全联盟链的各大医院发送广播，各个医院都设定专人负责审核上链。这么做可以对上链数据信息进行跨医院交叉验证。这样一来，医生不必担心组织体系内的上报压力，只负责呈现客观的临床数据，确保了上报数据的及时性和完整性。而且交叉验证过程需要由2/3以上的医院共同确认，极大地确保了数据的真实性。&lt;/li&gt;&#xA;&lt;li&gt;一旦一项新数据上链成功后，就会被加以时间戳，之后新产生的上链数据，只要病例相似度高达95%以上（阀值仅供参考）就会自动归类成链。如果一个新病例上链后成为了孤块，可视为临床病例尚未形成较大传染性，仅做一定预防和监控即可。如果一个新病例上链后，很快就形成了一条数据链，可设定一个阈值，达到一定数量后，疾控中心可协调当地政府力量进行匹配的防控举措（听数据的调度）。&lt;/li&gt;&#xA;&lt;li&gt;同理在地方联盟链之上，还会有一个以省级疾控中心为联盟链主体单位的国家级的疾控联盟链。地区在采集到异常数据并进行相应预防措施之后的同时应将当地的传染数据情况统一汇报给国家级疾控中心，并在链上进行广播，以便其他各省市地区能及早高度重视并做好预防防护工作。&lt;/li&gt;&#xA;&lt;li&gt;初期疾控链上链上的数据初期只对联盟链的成员开放，一旦达到一定的传播阈值之后再接入权威媒体进行透明化披露展示，让公众享有充分的知情权，避免不必要的猜忌和恐慌情绪滋生。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;疫情初期的问题是确诊标准问题，本来以为这个问题不解决数据无法上链，区块链无法起到太大作用，但这套系统中直接将病例数据上链，自动判断相似度从而归类疾病，最后触发预警系统，很好的解决了现有问题。但和其它区块链项目相同，现在面临的难题依然是基础设施建设问题，没有完善的基础设施，各医院不参与，就无法建成这套系统。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-谣言防治&#34;&gt;2. 谣言防治&lt;/h2&gt;&#xA;&lt;p&gt;在疫情警报拉响之后，关于疫情状况就是全国人民最关心的问题了。在近一个月的时间里，我们能够在网络中看到各种各样关于疫情的消息，一旦某个现像激发了群众的慷慨激昂后往往就会爆出其实是谣言，这种状况对于控制舆论有很大的不利影响，那么我们对于疫情的知悉究竟怎样才不会落入散发谣言中呢？&lt;/p&gt;&#xA;&lt;p&gt;关于普遍提到的流动人员追踪问题，因为涉及太多的隐私问题，我认为很难得到民众的认可，如果一个人的身份信息，所有出行、交往记录全部记载在区块链上，相当于将一个人完全公开在了网络上，而且这些数据还不可撤销，将会永久存在。即使这种作法确实对疫情防控有意义，但很难被大家接受，没有人希望自己的一举一动都被记录并被所有人随意阅览。&lt;/p&gt;&#xA;&lt;p&gt;另一个方面是感染人数等疫情信息的公开，民众对疫情真实进度不了解、对医院公布的数据不信任催生了大量的网络谣言。目前，国务院面向民众信息公开接受瞒报举报，微信也开了谣言识别功能，官方媒体每天都对各种谣言进行甄别和公示。首先可以确定的是，如果使用区块链，可以防止医院主管领导等因为职位绩效，或者舆论压力而隐瞒或者更改统计数据，只要信息上链和审核足够及时，由于区块链的分布式特性，消息就能以足够快的速度散发出去，切断谣言的传播。但这建立在基于区块链的疫情公示系统拥有足够多受众的情况，因为很多人轻易的就能相信微信群里各种难辨真假的消息、科普和视频。&lt;/p&gt;&#xA;&lt;p&gt;另外一个优点是上传到区块链平台的数据被权威节点确认后，可以一路追溯，追踪到消息的原始发布者，奖惩机制可以依赖这点起作用。&lt;/p&gt;&#xA;&lt;p&gt;目前，山东、青岛、浙江、济南等多个省市的官方机构以及学术机构已陆续上线了基于区块链的防控平台，可以对疫情的上报信息实施可溯源的上链管理。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://pic1.zhimg.com/80/v2-5722800a929c820cb52b24961cef61d8_720w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-公益捐赠&#34;&gt;3. 公益捐赠&lt;/h2&gt;&#xA;&lt;p&gt;武汉红十字会的情况使大家对现有公益体系产生了严重怀疑，如何使捐款及物资的流动透明，区块链能起到一定的作用。在这里基础设施依然非常重要，但我们不再提及，下面的描述都是在假设区块链已经铺设好正常运行之后可以达成什么样的目标。&lt;/p&gt;&#xA;&lt;p&gt;万向区块链有一个慈善平台&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;是针对这种业务场景的，在疫情之下，也做了一场线上直播&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;来介绍他们的系统。&lt;/p&gt;&#xA;&lt;p&gt;捐款及物资被用到哪里，什么时候用出去，用出去又经历了多少环节才用到需要帮助的人，每个环节上被损耗了多少，这些都是需要公开透明的信息。对捐赠人的服务中，由于各类文件有不可篡改的时间戳，此外如果捐赠人先后出具了多份意愿书，记录意愿的先后顺序，也可以避免纠纷的发生。因此区块链在公益捐赠中的核心作用有两个&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;捐款、物资等捐赠信息的存证。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;事务管理过程和财产管理、使用情况进行存证，锚定每笔钱和物资的去向。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;第二点很重要，需要去跟踪每分钱最终去哪儿了，中间损耗多少，只有用到最终受益人时，才成为可以支出的状态花出去，捐赠人很明确的想知道捐钱没问题，一些示例如&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://pic1.zhimg.com/80/v2-97e3acc2a38606fe86b60d14441497d0_720w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;&#xA;&lt;hr&gt;&#xA;&lt;ol&gt;&#xA;&lt;li id=&#34;fn:1&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI3MzYxNDg1Nw==&amp;amp;mid=2247486486&amp;amp;idx=1&amp;amp;sn=2514b0769ecc92f9129300809f6cd042&amp;amp;chksm=eb21dd70dc56546647a28e3e083a785ef4b629cc0fa6b59edc416b507bad55a9754aa0d5711c&amp;amp;scene=21#wechat_redirect&#34;&gt;万向慈善信托账户管理平台&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li id=&#34;fn:2&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/RVmmg4iUni6BDNyMfXErgw&#34;&gt;疫情之下，区块链如何服务于慈善场景&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>LVChain： A Lightweight and Vote-based Blockchain for Access Control in the IoT</title>
      <link>http://localhost:1313/2020/lvchain-a-lightweight-and-vote-based-blockchain-for-access-control-in-the-iot/</link>
      <pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/lvchain-a-lightweight-and-vote-based-blockchain-for-access-control-in-the-iot/</guid>
      <description>&lt;p&gt;Yu, Yue &amp;amp; Zhang, Sheng &amp;amp; Chen, Chao &amp;amp; Zhong, Xiaoxiong. (2018). LVChain: A Lightweight and Vote-based Blockchain for Access Control in the IoT. 870-874.&lt;/p&gt;&#xA;&lt;p&gt;DOI: &lt;a href=&#34;https://www.researchgate.net/deref/http%3A%2F%2Fdx.doi.org%2F10.1109%2FCompComm.2018.8780687&#34;&gt;10.1109/CompComm.2018.8780687&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;KeyWord: IoT, security, Blockchain, access authorization, BLE-based devies&lt;/p&gt;&#xA;&lt;p&gt;注：插图经过重新绘制，照片来自原论文截图。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-引言&#34;&gt;1. 引言&lt;/h2&gt;&#xA;&lt;p&gt;IoT与生活联系的越来越紧密，因此安全和隐私问题逐渐得到人们的关注。访问控制是安全的一个重要领域，一个完整而有效的访问控制系统应该满足机密性、完整性和可用性，并包括认证、授权和审计三个部分，这篇文章只关心授权部分。&lt;/p&gt;&#xA;&lt;p&gt;传统授权架构是中心化的，比如著名的有XACML、OAuth和UMA，这种架构很难解决单点故障问题和提供良好的可扩展性，因此正在朝着分布式的方向演变。&lt;/p&gt;&#xA;&lt;p&gt;作者设计了一条区块链(LVChain)来克服了上面提到的缺点，可以很好的用于蓝牙设备构成的家庭无线自组织网络。作者的主要贡献如下&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;提出了一个新的基于区块链的分布式架构，是轻量级、可扩展和容错的；&lt;/li&gt;&#xA;&lt;li&gt;在架构中引入和实施了一个基于投票的共识算法，对计算和存储资源依赖更少；&lt;/li&gt;&#xA;&lt;li&gt;对性能进行了全面地分析，比较了本文架构、传统中心化架构和现有的分布式架构，在虚拟环境中运行了一个实验证实了本文架构在IoT环境下的可行性。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;论文其余部分组织如下，第二部分为背景和相关工作，第三部分为架构总览，第四部分为性能评估和安全分析，第五部分总结全文。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-相关工作&#34;&gt;2. 相关工作&lt;/h2&gt;&#xA;&lt;p&gt;FairAccess&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;利用智能合约实现了基于token的访问控制，但是有较大的计算和时间开销，预设的授权规则也不可变。&lt;/p&gt;&#xA;&lt;p&gt;BlendCAC&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;同样基于token，利用智能合约完成访问授权的注册、传播和撤销。该模型具有较大的计算和存储开销，并且在具有足够资源的树莓派上实现，无法代表多数IoT设备。&lt;/p&gt;&#xA;&lt;p&gt;ControlChain&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;使用了四种区块链，分别负责记录设备和用户的关系、存储传感器收集的环境信息、存储授权或拒绝访问的权限信息和保存授权规则。该架构只是理论没有仿真或实现，复杂性较高而兼容性较差。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-方案&#34;&gt;3. 方案&lt;/h2&gt;&#xA;&lt;p&gt;本文的工作用于解决蓝牙设备构成的家庭无线自组织网络中的安全问题，具有如下特征：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;分布式结构，克服中心化结构的缺点，更好地满足IoT的开发需求；&lt;/li&gt;&#xA;&lt;li&gt;基于投票的共识，减小资源有限的IoT设备的计算压力，因此是轻量级的&lt;/li&gt;&#xA;&lt;li&gt;离线工作，因为控制和授权信息不需要通过连接的蓝牙设备扫描和广播&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;img src=&#34;https://ieeexplore.ieee.org/mediastore_new/IEEE/content/media/8767367/8780575/8780687/162-fig-1-source-large.gif&#34; alt=&#34;Architecture framework&#34; style=&#34;zoom: 50%;&#34; /&gt;&#xA;&lt;p&gt;架构总体结构如下图所示，分为三层：数据层、网络层和共识层。&lt;/p&gt;&#xA;&lt;p&gt;数据层包括时间戳、控制信息和授权信息，存储在本地来避免泄露隐私。用户控制设备(如switch等)的行为会生成控制信息，并按时间戳顺序链接在一起，这样做同样有利于接下来的审计工作。授权信息是授权用户的身份信息，通过哈希表存储，从而加快查询速度。&lt;/p&gt;&#xA;&lt;p&gt;网络层利用P2P协议构建蓝牙设备组成的网状网，由于蓝牙设备的广播和扫描状态，该架构是无连接的。网络中的设备结点是点对点的，一个设备接收到信息，会通过蓝牙转发和广播出去。另外，为了防止网络拥塞，限制了每个消息的转发次数，期间验证机制会验证控制信息的有效性和投票信息是否来自授权用户。&lt;/p&gt;&#xA;&lt;p&gt;受限于蓝牙设备的计算能力，使用了基于投票的共识算法。为了减少通信开销，共识算法设计为：请求授权的用户在收到大部分授权用户的投票信息时被授权。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ieeexplore.ieee.org/mediastore_new/IEEE/content/media/8767367/8780575/8780687/162-fig-2-source-large.gif&#34; alt=&#34;架构工作流&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;整个架构的工作流程如上图，当一个用户尝试操作一个设备时，设备会首先根据数据层的授权信息将用户区分为授权用户和非授权用户。如果是非授权用户，设备向整个P2P网络的授权用户发送授权请求，然后授权用户进行投票，每个用户对每个请求只有一票，同意则进行投票，不同意什么都不做。接下来，在共识层中，设备接收投票回应，检查回应的有效性并计算有效投票数量。在一段确定的时间内，如果投票用户的数量超过了授权用户数量的一半，请求者被授权，其信息存储在数据层中并添加到授权信息。如果是授权用户，一方面设备转发控制请求并将控制信息按时间戳添加到区块链，另一方面如果请求针对自己，设备直接进行响应。&lt;/p&gt;&#xA;&lt;h2 id=&#34;4-性能评估&#34;&gt;4. 性能评估&lt;/h2&gt;&#xA;&lt;h3 id=&#34;41-方案比较&#34;&gt;4.1 方案比较&lt;/h3&gt;&#xA;&lt;p&gt;论文中的架构和其它架构的比较如下表，其中(*)表示取决于证明类型和块的生成速度&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Scalability&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Fault Tolerant&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;New Authorization&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Get Authorization&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Off-Line working&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;XACML&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;-&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;-&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;+&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;+&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;-&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;OAuth&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;-&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;-&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;+&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;+&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;-&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;UMA&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;-&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;-&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;+&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;+&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;-&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;FairAccess&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;+&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;+-&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;-&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;-&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;+-&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;BlendCAC&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;+&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;+-&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;-&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;+&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;+-&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;ControlChain&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;+&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;+&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;-(*)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;+&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;+-&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;LVChain&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;+-&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;+&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;+-&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;+&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;+&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;&lt;strong&gt;可扩展性&lt;/strong&gt;：FairAccess、BlendCAC、ControlChain和本文的LVChain都是分布式结构，具有良好的可扩展性，但由于授权信息的不断增加可能对网络造成影响，LVChain的可扩展性可能略逊于其它三种。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Efficient Distributed Authentication and Access Control System</title>
      <link>http://localhost:1313/2020/efficient-distributed-authentication-and-access-control-system/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/efficient-distributed-authentication-and-access-control-system/</guid>
      <description>&lt;p&gt;Benhadj Djilali H., Tandjaoui D. (2019) Efficient Distributed Authentication and Access Control System Management for Internet of Things Using Blockchain. In: Renault É., Boumerdassi S., Leghris C., Bouzefrane S. (eds) Mobile, Secure, and Programmable Networking. MSPN 2019. Lecture Notes in Computer Science, vol 11557. Springer, Cham&lt;/p&gt;&#xA;&lt;p&gt;DOI：&lt;a href=&#34;https://doi.org/10.1007/978-3-030-22885-9_5&#34;&gt;https://doi.org/10.1007/978-3-030-22885-9_5&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Keywords：Internet of Things, Access controls system management, Authentication, Blockchain, Security.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;&#xA;&lt;p&gt;IoT现在的身份认证体系主要是基于PKI(公钥基础设施)的，以Certificate Authority(CA)作为第三方可信机构，通过数字证书来认证和管理身份。该体系有如下缺点：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;以CA为核心的中心化体系具有&lt;strong&gt;单点故障&lt;/strong&gt;的问题，容易被侵入导致安全问题&lt;/li&gt;&#xA;&lt;li&gt;使用数字证书在验证过程中引入了&lt;strong&gt;计算开销&lt;/strong&gt;，在带宽角度还有较高&lt;strong&gt;通信开销&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;为了在消息中包含证书，每条消息长度额外增加，导致通信量大、网络拥塞和资源耗尽，&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;许多方案致力于减少计算和通信开销，作者提出利用区块链技术构建一个用于IoT的安全的轻量级访问控制系统，核心思路是：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;利用区块链存储PKI体系中的数字证书，缓解单点故障问题&lt;/li&gt;&#xA;&lt;li&gt;对每条消息中嵌入的数字证书的验证过程转换为区块链中存储的数字证书的查询过程，减少认证过程(证书交换和验证)的开销&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;论文其余部分组织如下：第二部分总结相关工作，第三部分描述所提出的方案，第四部分讨论和评估系统性能，第五部分总结全文。&lt;/p&gt;&#xA;&lt;p&gt;第二部分没有实质性的东西，略过。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-proposal&#34;&gt;2. Proposal&lt;/h2&gt;&#xA;&lt;p&gt;作者所提出的方案是一个用于物联网网络的基于区块链的访问控制系统管理机制，设计目的是消除单点故障、减少原本的中心化PKI体系的通信和验证开销。为了实现这一目的，必须确保下面的功能集的实现：&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Blockchain based access control for IoT</title>
      <link>http://localhost:1313/2020/a-blockchain-based-access-control-for-iot/</link>
      <pubDate>Thu, 06 Feb 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/a-blockchain-based-access-control-for-iot/</guid>
      <description>&lt;p&gt;Imen Riabi, Yosr Dhif, Hella Kaffel Ben Ayed, Khaled Zaatouri. A Blockchain based access control for IoT[C]. International Wireless Communications &amp;amp; Mobile Computing Conference (IWCMC), 2019.&lt;/p&gt;&#xA;&lt;p&gt;DOI: &lt;a href=&#34;https://doi.org/10.1109/IWCMC.2019.8766506&#34;&gt;10.1109/IWCMC.2019.8766506&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Keywords: Access control, Blockchain, Smart Contract, Internet of Things&lt;/p&gt;&#xA;&lt;p&gt;注：本文图片来自原论文。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-引入&#34;&gt;1. 引入&lt;/h2&gt;&#xA;&lt;p&gt;作者的考虑主要基于三点&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;传统中心化的访问控制带来的单点故障和可扩展性问题；&lt;/li&gt;&#xA;&lt;li&gt;资源有限的IoT设备需要轻量级访问控制方案(对CPU、内存、功耗的低需求)&lt;/li&gt;&#xA;&lt;li&gt;对低延迟的需求&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;文章其它部分的组织结构为：第二部分为相关工作，第三部分为区块链技术介绍(阅读时略过)，第四部分为区块链安全机制介绍，第五部分阐述提出的访问控制模型，第六部分通过实验实施提出的方案，最后总结全文。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-相关工作&#34;&gt;2. 相关工作&lt;/h2&gt;&#xA;&lt;p&gt;该部分说明了已有物联网访问控制方案不合适的原因&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;RBAC&lt;/strong&gt;：the Role based access control，物联网环境高度动态且用户数量巨大，纯RBAC无法应对。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;ABAC&lt;/strong&gt;：the Attribute based access control，规则的数量随着用户、属性的增长迅速增加，不适用于物联网高度动态和实时的环境。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Cap-BAC&lt;/strong&gt;：Capability based access control，主要指OAuth-IoT，主要的问题是中心化结构会带来可扩展性问题和高延迟，同时该模型不支持可移动性。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-区块链安全机制&#34;&gt;3. 区块链安全机制&lt;/h2&gt;&#xA;&lt;p&gt;该部分讨论区块链的安全机制从而评估其安全级别，区块链提供的安全服务和对应的实现机制如下表所示：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;区块链安全服务&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;使用的机制&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;完整性&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;哈希函数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;交易真实性&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;数字签名&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;机密性&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;非对称加密&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;可用性&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;多个副本分布于整个网络&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;匿名性&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;公钥用作节点地址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;可追溯性&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;所有交易记录在区块链中&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;防篡改&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;需要大量的算力才能破坏区块链&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;4-方案&#34;&gt;4. 方案&lt;/h2&gt;&#xA;&lt;p&gt;作者选择将 Capability-BAC 和 Identity-BAC 两个模型相结合，利用token向请求者授权(Capability-BAC)，利用访问控制列表ACL记录请求者和对应的访问权限(Identity-BAC)。资源所有者在智能合约中存储ACL，资源请求者发起请求从而逐步填充ACL的内容，从而令区块链替代传统的中心化授权服务器。&lt;/p&gt;</description>
    </item>
    <item>
      <title>研究记录11-新访问控制方案的实现与测试</title>
      <link>http://localhost:1313/2020/optimize-the-implementation-and-testing-of-the-system/</link>
      <pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/optimize-the-implementation-and-testing-of-the-system/</guid>
      <description>&lt;p&gt;根据之前几篇文章的分析，我们对优化后的新方案进行了实现，本篇介绍新方案的一些测试与验证过程。代码可以参考 BBRAC 仓库的 &lt;a href=&#34;https://github.com/songdehua/BBRAC/tree/truffle&#34;&gt;truffle&lt;/a&gt; 分支，但是该分支包括后面添加的恶意行为检测的内容，是进行了二次完善后的代码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>研究记录10-实验场景的分析与选择</title>
      <link>http://localhost:1313/2019/analysis-and-selection-of-experimental-scenes/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/analysis-and-selection-of-experimental-scenes/</guid>
      <description>&lt;p&gt;考虑到开题时老师给的意见和编写论文的需要，这里再分析一次场景，并选择一个合适的纳入实验。&lt;/p&gt;</description>
    </item>
    <item>
      <title>研究记录9-区块链用于物联网访问控制梳理</title>
      <link>http://localhost:1313/2019/blockchain-based-access-control-for-iot/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/blockchain-based-access-control-for-iot/</guid>
      <description>&lt;p&gt;这篇文章是关于区块链用于物联网访问控制的总结，有两个目的，一是梳理脑子里的思路，指导接下来的研究方向，二是作为之后要完成的小论文的参考。&lt;/p&gt;&#xA;&lt;p&gt;在开始正文前，我们首先需要来定一个基调：区块链和智能合约只是一种实现访问控制的手段，我们可以用它来实现 ACL，也可以用它来实现 RBAC、ABAC、CapBAC 等其它任何访问控制模型。研究过程中遇到的很多问题，比如属性和策略的定义方法、属性发现机制、策略挖掘机制、策略冲突解决机制等，说到底，都是传统领域中研究这些模型已经出现过的问题，通常已有成熟的解决方案，直接拿来用就好，但不应当作为一个创新点来讨论；另外，这些模型间自身的区别，比如 RBAC 比 ACL 好在哪里、ABAC 又解决了什么问题、CapBAC 解决了什么特殊领域的问题，依然是传统方向已经深入讨论的问题，甚至是这些模型的开创者就在论文中详细阐述过的，我们没有必要继续阐述，当然也不能作为自己的创新或优势，不能说我将 ABAC 与区块链结合，就比你的 RBAC 和区块链结合好，它们都有各自的适用场景。我们真正应该关心的，是区块链用于实现物联网访问控制有哪些好处，我们设计的方案如何充分发挥了这种结合的优势，又如何解决了它们结合所产生的问题，这才是创新点应当所在之处。&lt;/p&gt;&#xA;&lt;p&gt;还有一个需要明确的问题，是我在研究过程中逐渐意识到的一点：再小的一个方案，涉及到的方向都很多，有些是我们必须解决的，有些不是，对于那些必须解决的问题，如果不是我们关注的重点，可以直接使用别人的设计或方法，这是不可避免的，人的精力也是有限的， 不可能在每个方向都有突破，但是，我们需要重点突出自己所做的改进，解决了什么问题，相比别人的方案有什么优点，这就是创新点，这种点，有2-3个就够了。举个例子，物联网和区块链结合，在吞吐量、存储、结合方式等太多方面有可做的事了，有些比如 PoW 对资源的需求和物联网设备的有限能力的冲突，是所有人都要面对的，但如果不是我们当前方案重点解决的问题，那么直接用别人设计好的方法就行，把精力放在自己重点关注的问题上。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-背景&#34;&gt;1. 背景&lt;/h2&gt;&#xA;&lt;p&gt;毫无疑问，物联网已经走进了我们工作和生活的方方面面，智能工厂、医院、车联网、智慧城市、智能电网、家里的智能家居，甚至我们身上的可穿戴设备，然而，物联网的快速增长带来了巨大的安全隐患。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;物联网设备会生成、处理和交换大量安全相关的数据和隐私敏感的信息，而且一些设备本身承担的功能十分重要，受到攻击后造成的危害也更大，比如一辆行驶中的汽车的控制权被夺取，可能威胁到驾驶员的生命；&lt;/li&gt;&#xA;&lt;li&gt;现有物联网设备朝着能耗低、重量轻的方向发展，其能量和计算资源主要用于执行核心程序，只有很少的一部分能配给处理安全和隐私问题，尤其是，对于传感器、执行器、RFID 标签等，自身完全没有能力处理相关逻辑；&lt;/li&gt;&#xA;&lt;li&gt;传统的解决安全与隐私问题的结构是集中式的，无法应对分布式的大规模物联网设备以及巨大的流量，还面临单点瓶颈和故障问题，并且往往代价较高，不适用于物联网&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;针对传统物联网访问控制的局限性，区块链具有如下优点，这些优点多是基于分布式、不可篡改、可追溯等特性。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;保证访问权限归属于用户。这点其实主要是针对手机App来说的[1]，但对工业场景如车联网也是适用的，汽车制造商会为车主提供各种服务，因此涉及到权限和隐私问题。总的来讲，凡是涉及服务提供方的场景，都可得益，这种归属权具体指代的是：1）服务商只能获取用户授予的权限，系统不是黑盒，用户的授权过程确实有效；2）用户可随时撤销权限，不受服务商阻挠。其缺点在于，链上的信息对所有区块链的参与者是完全公开的，但这种公开可以为我们带来对非法操作的追溯与惩罚，具有两面性。其局限性在于，服务商可以做出不授予权限就不提供服务的设计，即使这种权限是不必要的，区块链对这种情况无能无力。&lt;/li&gt;&#xA;&lt;li&gt;解决集中式的单点故障问题和可扩展性问题。由于分布式的特性，这种优点是显而易见的，虽然传统IoT访问控制中也有如CapBAC等分布式方案，但这些方案中轻量级设备无法保证自身安全性，无法应用在不可信环境下，区块链依然具有显著的优点。虽然区块链当前也面临可扩展性问题，但随着研究人员的不断努力，这一问题已取得较大进展，分片方案已经得到大量使用，并在持续不断的改进。&lt;/li&gt;&#xA;&lt;li&gt;保证访问控制权限不受篡改。基于不同的实现方案，可能指权限，也可能指实体属性、访问控制策略等，这一点有以下几方面的含义：1）无论服务提供商还是用户，防止一方以欺诈方式拒绝执行区块链的判决结果，实际上指的是依据链上内容的不可篡改性，对历史数据进行审计的过程；2）防止恶意第三方(黑客或其它)非法获取权限以谋取利益，这种抵御能力有时不仅限于对不可信环境(各方合作)有益，对信任域(电网系统、公司、工厂内部)也有意义，因为这种信任域在当前依然有着艰难的处境，攻击事件屡发不止。论文[3]有一部分描述是相关的。&lt;/li&gt;&#xA;&lt;li&gt;跨组织、跨域访问控制问题。这是区块链最能发挥自身优势的地方，涉及明显的信任问题，[2]描述了跨组织角色认证的问题，使用的是RBAC模型。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;以及一些对区块链完成物联网访问控制的理解：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;访问控制的实质是将区块链看作了&lt;strong&gt;分布式权限数据库&lt;/strong&gt;，因此而言，物联网数据量庞大的问题并不会在该领域造成困扰，因为数据本身并不会存入区块链。而如前所述，区块链不仅具有常规分布式数据库的优点，还具有自身的特性，抗攻击能力较高、容灾而且审计方便。&lt;/li&gt;&#xA;&lt;li&gt;正如普通互联网应用中涉及的访问控制，区块链的访问控制也理应是区块链应用(Dapp)的基础&lt;/li&gt;&#xA;&lt;li&gt;如果物联网和区块链是天然可结合的，是必然的发展方向，那么未来就不会继续使用原有的访问控制系统，遵循简单原则，使用同一套区块链系统完成访问控制是最好的选择&lt;/li&gt;&#xA;&lt;li&gt;访问控制的针对目标必然包含数据，但不仅限于此，对物联网而言，设备的执行权限也是访问控制的一部分。因此，访问控制的研究是和数据共享的研究有一部分重合的，但不等同，不过可以借鉴数据共享领域的前沿研究。&lt;/li&gt;&#xA;&lt;li&gt;传统访问控制的优点是吞吐量和存储。区块链在访问控制的速度上由于交易确认时间的存在，有着先天的缺陷，只能逐渐通过其它手段优化，而存储的高额代价，尤其是区块链中的存储只能增加不能减少，相比传统存储方案也是一个劣势。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;最后谈论应用场景问题。最为相关的一篇论文是[14]，基于属性的访问控制设计作为Dapp的一部分，用于医疗机构中对手术器械RFID标签的访问，并且最终设计目标是供应链，显然，这一案例涉及到了与我们相关的所有概念，是一个绝佳的参考。[7]中提到的场景是多个智能家庭之间彼此的访问控制，[7]的作者Dorri的另一篇区块链与车联网的论文则涉及&lt;strong&gt;保证权限归属用户&lt;/strong&gt;这一优点。综上，我们将应用场景分为两类：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;同一信任域内。显而易见的私链情况，现在依然存在大量关于私链是否有意义的讨论，这种情况私链单纯的作为一个分布式数据库存在，相比于传统分布式数据库的优点是抵御攻击的能力和智能合约，智能合约意味着可以在这个分布式数据库上编写和运行各种应用，这是最大的优势。&lt;/li&gt;&#xA;&lt;li&gt;不同组织间的协作。最典型的是供应链场景，但不止于此，同一集团位于各地的分公司和代理机构、公司与服务提供商、充电桩涉及的电动汽车网络、[10]中提到的产品个性化定制等，都是潜在的应用场景。我们在此对两个场景做具体描述，选择一个进行实验设计&#xA;&lt;ul&gt;&#xA;&lt;li&gt;以工厂为核心，设备供应商（维修商）、原材料供应商、监管机构、其它合作商等一同组成的联盟，涉及对彼此间设备信息的访问。（参考&lt;a href=&#34;https://ieeexplore.ieee.org/document/8378971&#34;&gt;Dennis Miller&lt;/a&gt;和&lt;a href=&#34;https://arxiv.org/ftp/arxiv/papers/1809/1809.06551.pdf&#34;&gt;Barco You&lt;/a&gt;）&lt;/li&gt;&#xA;&lt;li&gt;供应链。区块链记载货物的位置和时间信息，作为货物的装运证明和交付证明。这样可以最大限度地减少装运延迟，更准确地预测货物地交付时间，更好地实时检测库存水平。位置数据由IoT传感器捕获，IoT传感器将数据转发到IoT平台。供应链的参与者包括原始设备制造商（OEM），供应商，第三方物流提供商，托运人和仓库。每个参与者都可以根据参与者的角色查看区块链中的相关货运数据。制造商使用物流管理系统来查询区块链的装运数据，并向区块链提供额外的装运信息。这一描述来自论文[25]，这里显著的会涉及访问控制。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;对于实际应用场景的考虑，区块链本质解决的是信任问题，一些详细的内容可以参考[9]和[10]两篇论文的描述。实验的设计与考虑查看第6节。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-引入智能合约&#34;&gt;2. 引入智能合约&lt;/h2&gt;&#xA;&lt;p&gt;[1, 3-6]都是利用比特币解锁与锁定脚本完成访问控制的论文，Ouaddah A在[4]中提出的FairAccess是一个典型的解决方案，已被大量的研究者认可和引用，这是一个基于区块链技术用于物联网场景的访问控制模型。然后，Ouaddah A在论文[5]中对涉及的流程进一步做了详细的解释，因此我们基于论文[5]说明这一类访问控制的基本方法和存在的问题。&lt;/p&gt;&#xA;&lt;p&gt;比特币脚本存在的意义是自动化地验证交易的合法性，分为锁定脚本和解锁脚本两种。举个例子，假设Alice要向 bob支付0.015比特币, Alice会用到一个UTXO(假设是单输入，单输出)，这个UTXO带有一个&lt;strong&gt;锁定脚本&lt;/strong&gt;，为交易设置“障碍”。 bob如果要接收这笔比特币，就要给出一个&lt;strong&gt;解锁脚本&lt;/strong&gt;，然后解锁脚本和锁定脚本组合后执行的结果为真才能确认交易有效，换个说法就是Bob证明了对这笔比特币的所有权。&lt;/p&gt;&#xA;&lt;p&gt;比特币的脚本是简单的堆栈语言，是非图灵完备的，当把这种脚本语言推广到图灵完备的逻辑时，就是智能合约。因此智能合约可视作比特币脚本语言的超集，它可完成脚本语言本身的职能，同时还能做到其它的事情，但我们使用智能合约并不仅仅因为这一点。&lt;/p&gt;&#xA;&lt;p&gt;来看看利用脚本语言完成访问控制的过程，假设设备A向设备B请求一个资源的访问权，它需要首先获取一个访问令牌。这一操作通过如下过程完成：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;设备A向设备B的所有者发送请求，声明要访问的资源和在资源上执行的操作&lt;/li&gt;&#xA;&lt;li&gt;设备B将访问控制策略以锁定脚本的形式封装到&lt;strong&gt;授权交易&lt;/strong&gt;的输出中，以设备A的地址为接收者，发送授权交易。该交易的实质是比特币的转账，访问令牌的实质是签名后的UTXO，也就是比特币。&lt;/li&gt;&#xA;&lt;li&gt;授权交易被整个区块链确认后，设备A就获得了资源的访问权。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;以上是策略定义的整个过程，当需要实际发起访问时，设备A发起&lt;strong&gt;访问交易&lt;/strong&gt;，过程如下&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;访问交易的输入是设备A未花费的输出（UTXO的基本原理），之前授权交易将访问令牌发送给了设备A，因此，此时访问令牌在这一笔交易的输入中。&lt;/li&gt;&#xA;&lt;li&gt;设备B利用解锁脚本确认设备A拥有访问权限&lt;/li&gt;&#xA;&lt;li&gt;访问交易经整个区块链确认，访问控制完成。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;FairAccess中利用比特币完成的访问控制基本流程如上所示，Zyskind G在[1]中使用区块链账户公私钥利用密码学知识构建的复合身份体系，完成访问控制的过程与FairAccess是相似的，其它几篇类似。这种方案存在很明显的问题：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;每一次访问都要先获取访问令牌（即定义策略），其后的访问控制会消耗掉该访问令牌。这是一种极为原始的体系，甚至连ACL（访问控制列表）都不如，设备（资源所有者）每次都要对特定请求者进行判断然后定义策略，物联网难以承受这种非自动化的访问控制方式&lt;/li&gt;&#xA;&lt;li&gt;定义策略与访问控制交易成对出现意味着交易的数量翻倍，最终会导致区块链体积的快速增长&lt;/li&gt;&#xA;&lt;li&gt;一次访问控制需要两次交易确认过程，确认时间的翻倍为提升访问控制的速度、尽可能实现实时性带来了更大的困难。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;除此之外，还有一些其它的设计，比如Dorri A在[7]中的方案，访问控制的策略定义在区块中，该论文在普通区块结构中区块头的基础上，新添了策略头结构，用来存储访问控制策略，并在Cluster Header（分层管理结构中的管理者）中维护可访问者的公私钥列表作为辅助，实现访问控制。但这种方式的本质依然是ACL（访问控制列表），严重依赖于人的参与，只能应对设备数量不多的情况。&lt;/p&gt;</description>
    </item>
    <item>
      <title>区块链方向有参考价值的文章收集</title>
      <link>http://localhost:1313/2019/articles-about-blockchain/</link>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/articles-about-blockchain/</guid>
      <description>&lt;p&gt;很多区块链领域极有启发性的文章或者介绍极为详细的文章都很值得保存，以前直接将文章完整的转载过来，但最近发现这种方法占用空间而且毫无意义，因此专门开一篇博客用来收集和介绍这些文章，只记录它们的链接并作简单介绍。逆序排列，最新收集的文章在最前，同样，越往前序号越大。&lt;/p&gt;&#xA;&lt;h2 id=&#34;共识协议&#34;&gt;共识协议&lt;/h2&gt;&#xA;&lt;p&gt;时间：2020.01.06&lt;/p&gt;&#xA;&lt;p&gt;文章链接：&lt;a href=&#34;https://blockchain.intellectsoft.net/blog/consensus-protocols-that-meet-different-business-demands/&#34;&gt;Consensus Protocols That Meet Different Business Demands&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;一共两篇，详细介绍了常见的各种共识协议。&lt;/p&gt;&#xA;&lt;h2 id=&#34;区块链交易打包过程&#34;&gt;区块链交易打包过程&lt;/h2&gt;&#xA;&lt;p&gt;时间：2019.04.03&lt;/p&gt;&#xA;&lt;p&gt;文章链接(唐霜的个人博客)：&lt;a href=&#34;https://www.tangshuang.net/4097.html&#34;&gt;区块链中，交易被如何打包进区块&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过这篇文章要弄清楚的问题是：矿工优先打包交易费高的交易，会不会遗漏某些区块？&lt;/p&gt;&#xA;&lt;p&gt;大部分材料都详细分析了挖矿过程，介绍了区块是如何产生的。然而，区块的产生并不是区块链的最终目的，保存交易信息才是区块链的最终目的。所以，更重要的一点是要理解，交易信息是如何被打包进区块链的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;hyperledger搭建&#34;&gt;Hyperledger搭建&lt;/h2&gt;&#xA;&lt;p&gt;时间：2018.12.25&lt;/p&gt;&#xA;&lt;p&gt;文章转自IBM，地址为：&lt;a href=&#34;https://www.ibm.com/developerworks/cloud/library/cl-model-test-your-blockchain-network-with-hyperledger-composer-playground/index.html&#34;&gt;英文版&lt;/a&gt; ,&lt;a href=&#34;https://www.ibm.com/developerworks/cn/cloud/library/cl-model-test-your-blockchain-network-with-hyperledger-composer-playground/index.html?ca=drs-&#34;&gt;中文版&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Introduction:&lt;/p&gt;&#xA;&lt;p&gt;整个教程分三部分， 第1部分学习如何在 Hyperledger Composer Playground 的本地版本中建模并测试一个简单的业务网络，第 2 部分学习如何改进和部署区块链网络，第 3 部分学习如何在计算机上安装 Hyperledger Fabric，将业务网络部署到本地实例以及与示例网络区块链应用交互。&lt;/p&gt;&#xA;&lt;h2 id=&#34;比特币脚本&#34;&gt;比特币脚本&lt;/h2&gt;&#xA;&lt;p&gt;时间：2019.11.27&lt;/p&gt;&#xA;&lt;p&gt;文章链接(来自CSDN)：&lt;a href=&#34;https://blog.csdn.net/pony_maggie/article/details/73656597&#34;&gt;谈谈自己对比特币脚本的理解&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Introduction：&lt;/p&gt;&#xA;&lt;p&gt;比特币脚本存在的意义是自动化的验证交易的合法性，分为锁定脚本和解锁脚本两种。假设Alice要向 bob支付0.015比特币, Alice会用到一个UTXO(假设是单输入，单输出)，这个UTXO带有一个&lt;strong&gt;锁定脚本&lt;/strong&gt;，为交易设置“障碍”。 bob如果要接收这笔比特币(另一种说法是bob可以引用该笔输出)，就要给出一个&lt;strong&gt;解锁脚本&lt;/strong&gt;,然后解锁脚本和锁定脚本组合后执行的结果为真才能确认交易有效。  脚本是简单的堆栈语言，是非图灵完备的，这篇文章详细解释了锁定脚本与解锁脚本的运行机理。&lt;/p&gt;&#xA;&lt;h2 id=&#34;日蚀攻击&#34;&gt;日蚀攻击&lt;/h2&gt;&#xA;&lt;p&gt;时间：2019.04.08&lt;/p&gt;&#xA;&lt;p&gt;文章链接(来自知乎)：&lt;a href=&#34;https://zhuanlan.zhihu.com/p/42446193&#34;&gt;比特币点对点网络中的日蚀攻击&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Introduction：&lt;/p&gt;&#xA;&lt;p&gt;这篇文章是对同名论文&lt;a href=&#34;https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-heilman.pdf&#34;&gt;Eclipse Attacks on Bitcoin&amp;rsquo;s Peer-to-Peer Network&lt;/a&gt;原理和思想的解释，实际上针对的还不是原论文，是论文作者的讲解视频。&lt;/p&gt;&#xA;&lt;h2 id=&#34;iot数据&#34;&gt;IoT数据&lt;/h2&gt;&#xA;&lt;p&gt;时间：2019.04.10&lt;/p&gt;&#xA;&lt;p&gt;文章链接(来自IBM)：&lt;a href=&#34;https://www.ibm.com/developerworks/cn/iot/library/iot-lp301-iot-manage-data/index.html&#34;&gt;了解IoT数据&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Introduction：&lt;/p&gt;&#xA;&lt;p&gt;随着越来越多的事物连接到物联网，与 IoT 设备相关联的数据量及其生成的数据量（包括设备状态、元数据和传感器读数）呈指数级增长。如果 IoT 解决方案要实现价值，那么管理和了解这些数据至关重要。这篇文章介绍一些处理 IoT 数据的方法，包括存储数据、处理和分析数据以及应用规则。讲解的相当深入。&lt;/p&gt;&#xA;&lt;h2 id=&#34;区块链改善学术界&#34;&gt;区块链改善学术界&lt;/h2&gt;&#xA;&lt;p&gt;时间：2019.02.26&lt;/p&gt;&#xA;&lt;p&gt;英文原文(来自medium)：&lt;a href=&#34;https://medium.com/@barmstrong/ideas-on-how-to-improve-scientific-research-9e2e56474132&#34;&gt;Ideas on how to improve scientific research&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>An ABAC  Model in RFID Systems Based on DApp for Healthcare Environments</title>
      <link>http://localhost:1313/2019/an-abac-model-in-rfid-systems-based-on-dapp-for-healthcare-environments/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/an-abac-model-in-rfid-systems-based-on-dapp-for-healthcare-environments/</guid>
      <description>&lt;p&gt;Figueroa, Añorga, and Arrizabalaga, “An Attribute-Based Access Control  Model in RFID Systems Based on Blockchain Decentralized Applications for Healthcare Environments,” &lt;em&gt;Computers&lt;/em&gt;, vol. 8, no. 3, p. 57, Jul. 2019, doi: &lt;a href=&#34;https://doi.org/10.3390/computers8030057&#34;&gt;10.3390/computers8030057&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Keywords: blockchain, smart contract, RFID, ABAC, access control, IoT, healthcare&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-引言&#34;&gt;1. 引言&lt;/h2&gt;&#xA;&lt;p&gt;在医疗领域使用 RFID，可以追踪患者和医疗设备，更好的管理医疗资产，优化审计过程。如图1所示，一个 RFID 系统通常由四部分组成：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;RFID 标签：包含识别数据&lt;/li&gt;&#xA;&lt;li&gt;RFID 阅读器：与标签直接交互并进行信息交换&lt;/li&gt;&#xA;&lt;li&gt;RFID 中间件：管理设备，管理数据（过滤、收集、整合、构建）&lt;/li&gt;&#xA;&lt;li&gt;信息管理层（业务层）：包含一些应用，如后端数据库，企业资源规划系统（ERP，enterprise resource planning），客户关系管理（CRM，customer relationship management），仓库管理解决方案（WMS，warehouse management solutions），电子产品代码追踪应用（tracking and tracing and electronic product code applications）。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://picped-1301226557.cos.ap-beijing.myqcloud.com/YJS_20191111_RFID%E7%B3%BB%E7%BB%9F%E9%80%9A%E7%94%A8%E6%9E%B6%E6%9E%84.png&#34; alt=&#34;图1 RFID系统通用架构&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;GS1（一个全球标准组织）的标准分三类：[识别]^(identify)， [捕获]^(capture)和 [共享]^(share)。RFID 标签启用电子产品代码（EPC，electronic product code）后，标签和阅读器可以执行捕获过程；识别号被编码为 GTIN（Global Trade Item Number）或被解码为 RFID 标签的 EPC 时，中间件执行识别过程；共享过程则由信息管理层完成。&lt;/p&gt;</description>
    </item>
    <item>
      <title>以太坊开发8-Truffle框架安装使用</title>
      <link>http://localhost:1313/2019/use-truffle-develop-ethereum-project/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/use-truffle-develop-ethereum-project/</guid>
      <description>&lt;p&gt;Truffle和Ganache的安装使用&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-安装truffle&#34;&gt;1. 安装Truffle&lt;/h3&gt;&#xA;&lt;p&gt;在Ubuntu18.04 下安装运行，要求Node.js版本高于v8.9.4&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt-get install npm&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo npm install npm@latest -g&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo npm install n -g&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo n lts&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;安装Truffle&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo npm install -g truffle&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;2-创建项目&#34;&gt;2. 创建项目&lt;/h3&gt;&#xA;&lt;p&gt;以&lt;a href=&#34;https://www.trufflesuite.com/boxes&#34;&gt;Truffle Boxes&lt;/a&gt;中的&lt;a href=&#34;https://www.trufflesuite.com/boxes/metacoin&#34;&gt;MetaCoin&lt;/a&gt;项目为例&lt;/p&gt;&#xA;&lt;p&gt;首先为 Truffle 项目创建新目录&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir MetaCoin &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; MetaCoin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;下载MetaCoin box&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ truffle unbox metacoin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;✔ Preparing to download&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;✔ Downloading&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;✔ Cleaning up temporary files&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;✔ Setting up box&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Unbox successful. Sweet!&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Commands:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Compile contracts: truffle compile&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Migrate contracts: truffle migrate&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Test contracts:    truffle &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;下载完成后的项目目录如下&lt;/p&gt;</description>
    </item>
    <item>
      <title>研究记录8-原始论文问题总结及优化考虑</title>
      <link>http://localhost:1313/2019/summary-of-problems-and-optimization-considerations-about-prototype-system/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/summary-of-problems-and-optimization-considerations-about-prototype-system/</guid>
      <description>&lt;p&gt;本文介绍在论文复现过程中发现的一些问题和自己产生的一些想法。与原论文&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;设计架构的对比可以查看本文最后的对比表，&lt;a href=&#34;#%E6%80%BB%E7%BB%93&#34;&gt;点这里&lt;/a&gt; 直接跳转。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-应用场景思考&#34;&gt;1. 应用场景思考&lt;/h2&gt;&#xA;&lt;p&gt;考虑一个高层次的抽象结构，IBFT 共识最初是应对银行场景提出的，具有更高的可管理性和吞吐量，更低的延迟和最终一致性，但没有考虑验证者的可扩展性，而且 Quorum 是基于以太坊开发的并支持智能合约，这些特性是适合于工业场景的。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ethereum/EIPs/issues/650&#34;&gt;IBFT共识&lt;/a&gt; 维持的核心是验证者，能容忍1/3以下的验证者节点故障（或恶意节点），因此验证者的数量不可少于4个，没有设置上限，但一般不会太多。区块链支持普通节点加入，数量不做限制，但普通节点对区块链的维持不起作用，不影响新区块的生成和区块链的延长。&lt;/p&gt;&#xA;&lt;p&gt;基于以上的描述，考虑可能场景如下&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;同一企业旗下位于不同地理位置的工厂间（参考 &lt;a href=&#34;https://ieeexplore.ieee.org/document/7917634&#34;&gt;Ali Dorri&lt;/a&gt; 在多个智慧家庭间设置区块链）。每个独立的工厂拥有一个验证者节点维持共识，工厂内的网关作为普通节点存在，IoT 设备受网关管理。&lt;/li&gt;&#xA;&lt;li&gt;工厂、设备供应商（维修方）、材料供应商、其它合作商、监管机构等构成小型联盟（参考 &lt;a href=&#34;https://ieeexplore.ieee.org/document/8378971&#34;&gt;Dennis Miller&lt;/a&gt; 和 &lt;a href=&#34;https://arxiv.org/ftp/arxiv/papers/1809/1809.06551.pdf&#34;&gt;Barco You&lt;/a&gt;）。每一方拥有一个验证者节点维持共识，各自都可以添加网关作为普通节点。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;以上场景描述中以每一个参与方拥有一个验证者节点为例，但具体每一方分配多少验证者节点数量可以更好的保证安全性，可以做进一步分析。另外需要注意的是，超过2/3的节点串通就可以控制整个共识过程，少于2/3但大于1/3的节点串通可以导致共识永远无法达成。因此，多数人攻击可能是一个潜在的安全问题，&lt;a href=&#34;https://arxiv.org/pdf/1901.07160.pdf&#34;&gt;Roberto Saltini&lt;/a&gt; 最近（8月份）分析了IBFT的安全性并给出了改进建议。&lt;/p&gt;&#xA;&lt;p&gt;注1：IBFT共识中没有矿工，也没有激励机制。交易、部署和调用智能合约虽然都需要 Gas，但 Gasprice 是0，不会真的消耗掉。因此，在我们的架构中，网关作为普通节点加入时，需要被分配一定的代币用于之后的操作，这一机制可通过智能合约完成，向每个新注册的设备账户转移一定数量的代币（做不到，因为调用智能合约首先需要用于余额，但是就是因为没有余额才想要调用智能合约获取余额，这是一个死循环，只能通过其他方式获取余额）。&lt;/p&gt;&#xA;&lt;p&gt;注2：Quorum是联盟链，因此本身带有准入控制，不是所有人都可以加入。另外，Quorum还支持隐私交易。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-基本架构设计&#34;&gt;2. 基本架构设计&lt;/h2&gt;&#xA;&lt;p&gt;这里对改进的架构做一次完整描述。整个架构自上而下可分为三层：共识层，网关层，设备层。前两层的所有节点构成区块链。以下对每层做解释&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;共识层。联盟中的每个成员运行一个验证者节点，这些验证者节点共同维持区块链的存在，所使用的共识是IBFT。除此之外，访问控制三个合约中的注册合约和判决合约都由验证者节点部署。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;网关层。工厂或其它成员的网关设备，作为普通节点加入区块链，它们不参与共识过程，但拥有发起交易，部署和访问智能合约的能力（本质就是一个轻节点）。网关的核心作用是管理下一层的 IoT 设备，所有与网关连接的 IoT 设备都会由网关代理建立一个区块链账户，并调用注册合约进行注册，记录设备的基本信息、访问控制的优先级和归属权。IoT 设备的所有行为都与该区块链账户相关联，当设备发起访问控制请求，设备关联的区块链账户是发送者，当设备收到访问控制请求，接收者也是该账户。但这些操作都由网关代理完成。网关本身也需要进行注册，节点的第一个账户代表网关本身，其它账户分别与每个管理的 IoT 设备相关联。&lt;/p&gt;&#xA;&lt;p&gt;共识层的验证者节点和网关层的普通节点一同构成区块链。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;设备层。所有最下层的 IoT 设备，包括各种传感器/执行器甚至连到网关的智能手机等终端设备共同构成设备层。IoT 设备本身不作为区块链普通节点存在，所有行为由归属的网关代为管理。一个网关一般管理多个 IoT设备，但一个 IoT 设备只从属于一个网关，不能在区块链中重复注册。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;采用这种分层管理的原因主要是常规的传感器/执行器的能力不足以作为区块链节点存在，即使能力足够，有限的能力也往往要用在本身的工作上。另一方面，这种分层管理方式还可以保证 IoT 设备不会直接暴露在网络中，减小了攻击可能性。虽然这同时带来了另一个问题，即作为核心的网关设备被攻破，其管理的所有设备都将失联。但可以注意到的一点是，IoT 设备的注册信息在区块链中始终存在，因此当判断网关失联或变成恶意节点后，可以将它所管理的设备的归属权移交其它网关。&lt;/p&gt;&#xA;&lt;p&gt;智能合约中的归属权移交容易实现，但实际的移交却困难重重，这里分两种情况&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;传感器/执行器与网关有线连接，这种情况下，即使合约中的归属权移交，也没有任何意义；&lt;/li&gt;&#xA;&lt;li&gt;传感器/执行器通过 Lora, ZigBee, Wifi，NB-IoT 等无线通信技术连接到网关，这种情况下，一方面不一定存在新的可连接网关，一方面如何控制 IoT 设备断开原网关重连到指定新网关上较难实现；&lt;/li&gt;&#xA;&lt;li&gt;设备即使移交成功，管理需要的密钥也较难转移。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;普通情况下，基本的管理单位是设备，当设备退出网络可以删除其注册信息，当检测到设备恶意行为可以对其关联的账户进行处罚。但从另一方面讲，网关的沦陷可能意味着其所管理的设备全部沦陷，因此可以直接设置对网关账户的处罚，而对网关账户的处罚将级联作用于归属该网关的所有设备。因为网关沦陷后，如果设备不物理重连到其它网关，即使在区块链中移交了归属权，也无法继续进行操作，或者说控制设备完成访问控制。&lt;/p&gt;&#xA;&lt;p&gt;理论上边缘设备的使用是不冲突的，边缘服务器本身可以作为普通节点加入，与一般的网关同属网关层，边缘服务器对资源进行分配时一般是容器虚拟化的方式，普通 IoT 设备对边缘服务器资源的访问控制请求将由边缘服务器关联到分配了资源的容器上。所以从这个角度看，验证者、网关节点等直接运行区块链节点似乎不是最好的选择，可以以容器方式运行。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-访问控制方案&#34;&gt;3. 访问控制方案&lt;/h2&gt;&#xA;&lt;p&gt;当前架构中实现的访问控制的主体是智能合约，所有的操作通过智能合约完成。共有四种智能合约，注册合约、访问控制合约，判决合约和存储合约。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;注册合约。注册合约的作用是注册访问控制合约、判决合约、网关和网关管理的 IoT 设备，并提供对注册信息的管理（增删查改）。访问控制合约和判决合约在部署后应当立即调用注册合约进行注册，IoT 设备加入网络后应当由网关代理调用注册合约进行注册，声明设备基本信息、设备优先级，设备关联的区块链账户和所归属的网关。注册合约由验证者节点部署。&lt;/li&gt;&#xA;&lt;li&gt;访问控制合约。每个设备注册时都需要同时部署一个与之关联的访问控制合约，其中定义相关的访问控制策略，也定义恶意行为判定的策略，检测到的恶意行为会记录到判决合约并从中获取判决结果。访问控制合约中只能预定义少量的针对固定设备的访问控制策略，大量的访问控制请求处理通过设备优先级比较完成。执行操作的访问控制请求在链下进行，被请求的网关收到请求后，查询合约确认操作权限，确认拥有权限后被请求网关控制设备执行操作，获取执行结果并返回给请求者。读取数据的查询请求则由请求者直接发起，从调用访问控制合约验证读取权限后，从注册合约获取设备存储合约的地址，然后调用设备存储合约，获得数据哈希，根据数据哈希从存储平台中获得数据。写操作一般是向存储中写入设备数据，这一权限应当只属于设备本身和设备归属的网关。&lt;/li&gt;&#xA;&lt;li&gt;判决合约。判决合约的作用是记录恶意行为和做出判决，向访问控制合约返回判决结果。由于可能用到记录的这些恶意行为，由验证者节点部署一个判决合约最合适。但如果不需要，可以像访问控制合约一样一个设备关联一个判决合约，&lt;/li&gt;&#xA;&lt;li&gt;存储合约。以上流程中会涉及数据的写操作，传感器收集的数据源源不断地传输给网关，网关应当在本地进行处理并将数据存储到存储平台（Swarm 或 IPFS），获取返回的所存数据的数据哈希，在调用访问控制合约验证写操作权限后，将数据哈希存储到存储合约中。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;访问控制的流程值得仔细考虑，比如网关如何将执行结果返回给请求者，初步的想法是链下进行，或者在合约中设置一个状态量，执行成功后将状态量置为真，然后智能合约主动将结果告知请求者。&lt;/p&gt;</description>
    </item>
    <item>
      <title>区块链学习6-IBFT共识</title>
      <link>http://localhost:1313/2019/ibft-consensus/</link>
      <pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/ibft-consensus/</guid>
      <description>&lt;p&gt;AMIS公司提出的 Istanbul Byzantine Fault Tolerance Consensus（简称IBFT或Istanbul BFT），是一个基于PBFT的交易一致性的共识。因为要考虑可能发生的异常，对共识的原始文档作一次通读，仔细理解一下。原始文档位于github &lt;a href=&#34;https://github.com/ethereum/EIPs/issues/650&#34;&gt;ethereum/EIPs#650&lt;/a&gt;，以下一边翻译一边阅读。&lt;/p&gt;&#xA;&lt;p&gt;注：EIP，即Ethereum Improvement Proposal，以太坊改进建议&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;这一工作深受Clique POA的启发，并在协议层中尽可能设计相同的机制，比如验证者投票。我们遵循EIP风格，将背景和原理放在所提出的共识协议的后面供开发者阅读。这一工作也受到Hyperledger&amp;rsquo;s SBFT，Tendermint，HydraChain和NCCU BFT的启发。&lt;/p&gt;&#xA;&lt;h2 id=&#34;术语&#34;&gt;术语&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Validator：区块验证者&lt;/li&gt;&#xA;&lt;li&gt;Proposer：一轮共识中被选举出打包新区块的验证者。&lt;/li&gt;&#xA;&lt;li&gt;Round：共识轮数。一轮共识起始于Proposer打包一个新区块，结束于新区块提交或轮数改变（轮数改变可能由于验证不通过或区块更新）。&lt;/li&gt;&#xA;&lt;li&gt;Proposal：共识正在处理的新打包的区块。&lt;/li&gt;&#xA;&lt;li&gt;Sequence：新区块的序号（从创世区块起排列的一个顺序），这一数字应大于所有之前区块的序号。目前，每个区块的高度都是它的序号。&lt;/li&gt;&#xA;&lt;li&gt;Backlog：将来的共识信息记录在这里面。&lt;/li&gt;&#xA;&lt;li&gt;Round state：指定轮数和序号的共识信息，包括预准备信息、准备信息和提交信息。&lt;/li&gt;&#xA;&lt;li&gt;Consensus proof：提交的区块签名，每个验证者验证后都会对区块签名，可以证明区块经历了整个共识过程。&lt;/li&gt;&#xA;&lt;li&gt;Snapshot：验证者投票状态。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;共识&#34;&gt;共识&lt;/h2&gt;&#xA;&lt;p&gt;Istanbul BFT基于 &lt;a href=&#34;http://pmg.csail.mit.edu/papers/osdi99.pdf&#34;&gt;PBFT&lt;/a&gt; 算法，然而，原始的PBFT需要做一些调整来适应区块链。首先，没有具体的发送请求和等待结果的&lt;code&gt;client&lt;/code&gt;的概念，所有的 validator 都可以视作&lt;code&gt;clients&lt;/code&gt;。其次，为了保证区块链的运行，需要在每一轮共识中持续不断的选举出 proposer 来打包新的区块，同样，每轮共识的结果是一个可验证的区块而不是文件系统的一组读写操作。&lt;/p&gt;&#xA;&lt;p&gt;Istanbul BFT 继承了 PBFT 共识的三阶段：pre-prepare，prepare 和 commit，我们称之为预准备阶段、准备阶段和提交阶段。系统可以容忍 N 个 validator 节点的网络中F个节点错误，其中 N = 3F + 1。每一轮之前，validators会首先投票选出一个proposer，默认的选举方式是轮询。选出的proposer将会打包一个新的区块并附随 pre-prepare 消息广播出去，当接收到 pre-prepare 消息，validators 会进入 pre-prepared 状态，然后广播 prepare 消息。这一步是为了确认所有的 validators 在同一个 sequence 和同一个 round上工作。当接收到 2F + 1个 prepare 消息，validator 就会进入 prepared 状态并广播 commit 消息。这一步是为了通知其它节点它验证了新区块并且将会把新区块添加到了区块链中。最后，验证者们等待 2F + 1 个 commit 消息并进入 committed 状态，最后把区块添加到区块链末尾。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SEC-BlockEdge Security Threats in Blockchain-Edge based IIoT Network</title>
      <link>http://localhost:1313/2019/sec-blockedge-security-threats-in-blockchain-edge-based-iiot-network/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/sec-blockedge-security-threats-in-blockchain-edge-based-iiot-network/</guid>
      <description>&lt;p&gt;Kumar, Tanesh &amp;amp; Braeken, An &amp;amp; Ramani, Vidhya &amp;amp; Ahmad, Ijaz &amp;amp; Harjula, Erkki &amp;amp; Ylianttila, Mika. (2019). SEC-BlockEdge: Security Threats in Blockchain-Edge based Industrial IoT Networks.&lt;/p&gt;&#xA;&lt;p&gt;以一个木屋建造场景作为IIoT用例，简要介绍了一个区块链-边缘计算框架。然后以此为基础讨论了关键的安全需求，每个层次中可能出现的安全威胁和解决方案。&lt;/p&gt;&#xA;&lt;h2 id=&#34;木屋建造场景&#34;&gt;木屋建造场景&lt;/h2&gt;&#xA;&lt;p&gt;作者使用的木屋用例包含了一些关键的工业流程。以下是该用例的6个主要阶段。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ieeexplore.ieee.org/mediastore_new/IEEE/content/media/8944089/8949080/8949107/Paper06-fig-1-source-large.gif&#34; alt=&#34;木屋建造场景&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;区块链-边缘计算框架&#34;&gt;区块链-边缘计算框架&lt;/h2&gt;&#xA;&lt;p&gt;结合区块链和边缘计算为 IIoT 提供便利，提出了一个框架，由 Local, Edge, Global, Ledger 四层组成&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ieeexplore.ieee.org/mediastore_new/IEEE/content/media/8944089/8949080/8949107/Paper06-fig-2-source-large.gif&#34; alt=&#34;框架总览&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;本地层&lt;/strong&gt;负责收集原始数据，上传到边缘和云。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;边缘层&lt;/strong&gt;提供部分计算资源和能力，处理原始数据并追踪原材料的收集和交付过程。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;全局层&lt;/strong&gt;提供更多的资源和能力，访问频繁的资源会放在边缘，但访问频率较低的资源会放在云。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;区块链层&lt;/strong&gt;为其它三层提供一些具体的服务，本地层主要是认证和监控是否符合条件，边缘层主要是促进来自不同地方的数据的处理、存储和共享，全局层则是总体的监督。&lt;/p&gt;&#xA;&lt;h2 id=&#34;安全需求&#34;&gt;安全需求&lt;/h2&gt;&#xA;&lt;p&gt;以下是一些系统必须遵守的安全需求&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;需求&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Authentication&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;场景涉及不同的角色，包括传感器/执行器，边缘设备/服务器，服务/网络提供者和第三方。这种情况下，保证只有合法实体才能访问和提供资源非常重要。智能合约可以实现。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Integrity&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;木屋场景中的数据处理和共享涉及多个利益相关者，某些如边缘设备可能通过边缘服务器/数据中心共享和复制数据，导致数据完整性受威胁。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Privacy&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;当身份公开，如果交易存储在公链上，任何人都可以跟踪并访问，可能泄露公司与竞争对手相关的重要商业信息。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Trustworthy Computation&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;一些计算/处理工作可能放到不信任的节点上运行，需使用可信计算保证可信度&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Availability&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;确保需要的数据在每一个层次上持续可用&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Network Security&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;木屋场景中的边缘层是攻击者的主要攻击目标，区块链的一些关键特性可以增强安全性&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;安全威胁和解决方案&#34;&gt;安全威胁和解决方案&lt;/h2&gt;&#xA;&lt;p&gt;以下对作者列出的安全威胁和解决方案做总结和分析。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Layer&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Security Threats&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;challenges&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;solutions&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Local&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Docker/Container&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;容器可以提供各种本地进程执行所需的轻量级虚拟化微服务。容器虚拟化主要依赖于内核所提供的特性，因此需要特别关注幽灵和熔断这种攻击。此外，随着最近容器的频繁使用，出现了一些与镜像相关的威胁、基于主机和操作系统的漏洞以及基于硬件的攻击。&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;通过定期扫描镜像和应用来对抗镜像漏洞。通过加密签名验证已注册镜像， 确保使用可信镜像。对于与内核和操作系统相关的威胁，部署能够验证操作系统和内核安全的管理工具。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Local&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Local Nodes/Devices&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;本地层中的低功耗节点由于节点资源有限，容易受到节点篡改、恶意代码注入、旁道攻击、虚假节点和物理破坏等攻击，可能会被篡改或窃取相关信息，影响网络乃至整个物联网系统的性能和安全。因此，需要轻量级安全机制，特别是密钥管理机制，通过身份认证，来防止所有可能的威胁，并保证消息完整性和机密性。&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;预安装密钥是初始化安全机制最简单的方式，目前为止提出的基于对称密钥或公钥的机制已满足了大部分的安全需求(如防篡改、匿名性等)，然而预安装的密钥依赖于可信第三方(TTP)的存在，掌握密钥分发的TTP是整个体系的弱点。一种隐式证书(implicit based)方案允许在没有TTP的情况下生成私钥对，是可能的解决方案。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Local&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Local Communication&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;本地层的短距离通信协议/技术包括：低功耗蓝牙，ZigBee，NFC，Wi-Fi。每一种通信技术都面临多种威胁，被攻击者捕获的设备可能用来假冒正常节点。&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;主要的解决方案是使用安全密钥协商协议生成共享密钥用于之后的安全通信。如果需要添加新的安全需求，还需要使用专用协议。而对于防止设备被捕获，可使用如物理不可克隆之类的原语。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Edge&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Virtualization&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;不理解&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Edge&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Edge Devices&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;边缘网络包括网关、IoT设备和边缘数据服务器等多种不同设备，这些设备可能被攻击者物理访问和损坏。边缘数据中心是攻击者的主要攻击目标。例如rogue攻击可能造成管理者完全失去控制权，一旦攻击者夺取了控制权，他就可以控制资源以及所连接的其它设备。边缘服务器同时受到内外两方面攻击的威胁。&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;对设备进行身份验证防止篡改，以及使用入侵检测系统（ids）检测和监视边缘服务器和边缘数据中心上的各种威胁。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Global&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Virtualization&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;不理解&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Global&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Cloud&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;DoS/DDoS攻击在云端更为频繁，被认为是数据和服务不可用的主要原因。消费者还担心他们在云端存储的数据，因为不清楚在服务器上如何保护数据。因此，用户缺乏对自己数据的控制使其容易受到各种安全威胁。云也容易受到Web和API的安全攻击。在这种环境下，访问控制和身份管理将变得非常复杂，需要高度重视。由于云服务是由多个利益相关者提供和使用的，因此在用户和其他实体之间就服务的各个方面达成法律协议至关重要。&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;不同的加密技术（如同态加密和基于属性的加密）被用于保证云端用户数据的安全、机密和完整以及访问控制。Web和API在开发和运行的生命周期应保证安全。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Blockchain&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Smart Contract&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Multiple function attack; self destruct function; timestamp dependency&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Blockchain&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Node&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;eclipse attack; Sybil attack&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Blockchain&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Platform&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;DAO; re-entrance attack&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Blockchain&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;General Blockchain&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;51% problem; private key security threats&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;理解和想法&#34;&gt;理解和想法&lt;/h2&gt;&#xA;&lt;p&gt;文中提出的区块链-边缘计算框架是在 Local-Edge-Cloud 这一套体系的基础上加入区块链，解决各参与方之间的信任问题，提供一些服务和功能。这些服务包括目前广泛研究的身份认证、访问控制、数据共享、全局状态审计等功能。区块链运行在所有参与方中有足够能力的设备中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Acceleration of Anomaly Detection in Blockchain Using In-GPU Cache</title>
      <link>http://localhost:1313/2019/acceleration-of-anomaly-detection-in-blockchain-using-in-gpu-cache/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/acceleration-of-anomaly-detection-in-blockchain-using-in-gpu-cache/</guid>
      <description>&lt;p&gt;Morishima S, Matsutani H. Acceleration of anomaly detection in blockchain using in-GPU Cache[C]. international conference on big data and cloud computing, 2019: 244-251.&lt;/p&gt;&#xA;&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;区块链的不可篡改特性带来安全性的同时，由操作失误或密钥被盗造成的欺诈交易同样无法取消，因此产生的非法交易可能造成危害。可能的对策是即时的发现非法交易，从而在确认前纠正。&lt;/p&gt;&#xA;&lt;p&gt;Pham等人提出一种基于K-means聚类，马氏距离和局部离群因子的区块链异常检测方法，利用该方法对比特币网络历史交易中的异常交易做了检测，但可通过特定特征量和算法检测到的异常交易是有限的，实际实施需要通过改变特征量和算法来重复异常检测，计算量大，计算时间长，该文使用了GPU加速异常检测，减少检测时间。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;T. Pham, S. Lee, &amp;ldquo;Anomaly Detection in Bitcoin Network Using Unsupervised Learning Methods&amp;rdquo;, &lt;em&gt;Compution Research Repository&lt;/em&gt;, vol. abs/1611.03941, pp. 1-5, Nov. 2016.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;我们不关注如何使用GPU加速异常检测，关心的是使用了什么方法进行异常检测，因此该文大部分都会略过&lt;/p&gt;&#xA;&lt;h2 id=&#34;特征量提取&#34;&gt;特征量提取&lt;/h2&gt;&#xA;&lt;p&gt;Pham等人提出的方法使用图来代表以用户为中心的交易流，如下图所示，用户是顶点，交易是边，当B向A发起交易时，会创建一条B到A的边，随着交易增加，边也随之变多，图结构变复杂。&lt;/p&gt;&#xA;&lt;p&gt;该图用于提取每个区块链用户的特征量，例如，顶点入边的数目是收入交易的数目，出边的数目是支出交易的数目，Pham使用收入交易数目、支出交易数目、平均收入金额、平均支出金额等六个特征量进行异常检测，此外还使用了K-means聚类、马氏距离和局部离群因子三种异常检测算法。采用基于用户图的方法，对比特币网络中两期盗窃案件做了分析。但，即使检测到了异常交易，也很难判断是否真的是欺诈交易，因为大部分盗窃的具体信息并不公布。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ieeexplore.ieee.org/mediastore_new/IEEE/content/media/8661738/8672218/8672252/114100a244-fig-3-source-large.gif&#34; alt=&#34;Overview of user graph&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;k-means异常检测&#34;&gt;K-means异常检测&lt;/h2&gt;&#xA;&lt;p&gt;该文使用了相同的方法提取特征量，但异常检测方法使用了K-means聚类。K-means本身是用来将大量数据分类成簇的，当使用K-means进行异常检测时，如果用户特征量距离聚类中心较远，则被视为异常，当簇的数量为K时，使用K-means聚类进行异常检测的步骤如下：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;初始聚类被随机地分配给每个顶点的特征量向量&lt;/li&gt;&#xA;&lt;li&gt;计算聚类中心&lt;/li&gt;&#xA;&lt;li&gt;计算每个顶点特征量与聚类中心的距离，然后划归最近的聚类中心的簇&lt;/li&gt;&#xA;&lt;li&gt;重复2，3步直到收敛，完成聚类&lt;/li&gt;&#xA;&lt;li&gt;计算顶点特征量与聚类中心的距离，超过阈值则为异常&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>EdgeChain An Edge-IoT Framework and Prototype</title>
      <link>http://localhost:1313/2019/edgechain-an-edge-iot-framework-and-prototype/</link>
      <pubDate>Tue, 15 Oct 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/edgechain-an-edge-iot-framework-and-prototype/</guid>
      <description>&lt;h2 id=&#34;edgechain设计&#34;&gt;EdgeChain设计&lt;/h2&gt;&#xA;&lt;p&gt;EdgeChain的核心思想是集成一个许可区块链和内部货币系统，将边缘云资源池与每个物联网设备的账户和资源使用行为关联起来。基于信用的资源管理系统主要根据设备优先级、应用类型和历史行为调整设备信用，控制设备可以从边缘服务器获取多少资源，同时面向资源使用智能合约强制执行预定义规则和策略，规范物联网设备的行为。整个思路的问题空间和解决方案空间概览如下&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ieeexplore.ieee.org/mediastore_new/IEEE/content/media/6488907/8738925/8510796/pan2-2878154-small.gif&#34; alt=&#34;EdgeChain vision: the problem space and solution space&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-设备&#34;&gt;1. 设备&lt;/h3&gt;&#xA;&lt;p&gt;EdgeChain使用许可区块链（私链）换取更高的交易吞吐量和一个受控制和监管的环境，挖矿工作由边缘服务器完成，并将IoT设备分为两类：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;legacy devices(EdgeChain-unaware)：不需要获取资源，不需要安装区块链客户端，由IoT代理创建区块链账户代表这些设备和区块链交互&lt;/li&gt;&#xA;&lt;li&gt;non-legacy devices(EdgeChain-aware)：安装区块链客户端，和边缘服务器交互获取资源&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;2-基于信用的资源管理&#34;&gt;2. 基于信用的资源管理&lt;/h3&gt;&#xA;&lt;p&gt;EdgeChain使用内部货币把边缘云资源池与IoT设备账户和资源使用行为相关联。每个设备有一个区块链账户，给予一定的初始货币作为信用积分，积分余额决定了设备获取资源的能力。边缘服务器会记录信用积分使用情况，根据一组预定义的规则分配资源，这组规则综合考虑了预定义的优先级、应用类型和历史行为。&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-面向资源基于智能合约规范化物联网行为&#34;&gt;3. 面向资源，基于智能合约规范化物联网行为&lt;/h3&gt;&#xA;&lt;p&gt;EdgeChain根据IoT设备的资源使用与活动来监控和调节其行为，根据预定义的优先级、应用类型和历史行为，智能合约可以自动执行相关资源分配策略。有助于抵御内部攻击，快速识别、控制恶意节点，并且可以采用进一步的行为如黑名单阻止设备的进一步操作。&lt;/p&gt;&#xA;&lt;h3 id=&#34;4-部署&#34;&gt;4. 部署&lt;/h3&gt;&#xA;&lt;p&gt;EdgeChain可以两种模式部署，独立模式如smart home，以及分布式模式如smart campus和smart city。以下是smart home的一个例子，这样独立部署的一个模块可以称作一个box，多个独立部署的box合作就可以构成一个分布式部署的场景。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ieeexplore.ieee.org/mediastore_new/IEEE/content/media/6488907/8738925/8510796/pan3-2878154-small.gif&#34; alt=&#34;standalone EdgeChain box deployment in smart home&#34;&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;基于边缘服务器和货币系统的资源管理方案暂且不考虑，目前有借鉴作用的是对物联网行为规范化的处理，基于智能合约预定义策略，同时考虑利用货币系统定义的信用积分，用来做恶意行为检测，提升区块链安全性。&lt;/p&gt;&#xA;&lt;p&gt;设备分类在架构设计时是应考虑的，考虑作为安装客户端的轻节点还是由网关代理与区块链交互，但在具体的场景中，比如对摄像头或传感器进行管理，是固定的，一般不需要分类。看最后定什么样的场景再决定吧。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;框架和基本模块&#34;&gt;框架和基本模块&lt;/h2&gt;&#xA;&lt;p&gt;总体架构如下图所示，分为IoT代理、智能合约接口、智能合约、区块链服务器和应用接口五个功能模块&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ieeexplore.ieee.org/mediastore_new/IEEE/content/media/6488907/8738925/8510796/pan4-2878154-small.gif&#34; alt=&#34;EdgeChain framwork and functional modules&#34;&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;IoT代理&lt;/strong&gt;：主要功能是监听和嗅探legacy device的活动，为设备创建区块链账户，协助它们与区块链和智能合约交互。注册方式与non-legacy device相同，因此行为规范化的策略也适用它们，除了不能自己直接和区块链交互，和non-legacy device没什么不同。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;智能合约接口&lt;/strong&gt;：当物联网活动发生时会触发智能合约并执行相关的管理策略，主要由web3协议完成。物联网活动包括注册、设备通信、资源请求、数据发送等。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;智能合约&lt;/strong&gt;：包括两部分，一是数字货币系统，用来定义设备信任基本并决定资源分配；二是策略管理模块，分析设备行为并进行判决，以及根据货币系统的信用定义分配调度资源。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;区块链服务器&lt;/strong&gt;：运行共识维持区块链以及运行智能合约完成预定义策略&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;应用接口&lt;/strong&gt;：连接区块链服务器和边缘云服务器，设备与区块链的交互有两种结果，1）账户余额有限或存在恶意行为，请求被拒绝；2）请求通过，移交边缘服务器分配相应资源。一旦确认有足够的资源，边缘服务器即和资源分配的合约交互，进行资源分配，分配完成后，物联网设备直接和边缘服务器上的应用交互。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;这里提到的资源包括计算能力、内存、存储、网络等，由于不同程序的要求不同，这些资源以虚拟机为单位提供。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;特别的结构是IoT代理和应用接口，当设备类型确定时，代理的工作由网络直接完成，可以取消这一部分，应用接口主要与资源分配有关，也可以略过。最重要的其实还是定义设备信用的货币系统和策略管理两部分合约的算法，对我们是有用的。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;关键过程和工作流&#34;&gt;关键过程和工作流&lt;/h2&gt;&#xA;&lt;p&gt;区块链部署和合约部署流程略过，这里只介绍设备注册过程和设备行为管理。&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-设备注册&#34;&gt;1. 设备注册&lt;/h3&gt;&#xA;&lt;p&gt;注册起始于判断设备类型，对legacy设备，IoT代理会为每个设备创建账户并在注册合约中注册，non-legacy设备可以通过安装的客户端直接与区块链交互。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ieeexplore.ieee.org/mediastore_new/IEEE/content/media/6488907/8738925/8510796/pan7-2878154-large.gif&#34; alt=&#34;Devices registration workflow&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;注册信息的内容主要根据制造商使用说明定义，主要包括输入/输出数据类型、边缘资源请求、mac地址、ip地址、网络端口、通信协议和指示标志。此外，每个设备都有一个唯一的区块链账户地址。注册后，边缘服务器验证上述信息，并添加更多的参数如优先级，账户余额，信用和请求时间戳等用于设备管理。具体定义在数据库的字段如下图所示&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ieeexplore.ieee.org/mediastore_new/IEEE/content/media/6488907/8738925/8510796/pan.t2-2878154-small.gif&#34; alt=&#34;Registered Device Attributes&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-设备行为管理&#34;&gt;2. 设备行为管理&lt;/h3&gt;&#xA;&lt;p&gt;这一部分是EdgeChain的核心功能，分为三部分解释：细节工作流，边缘资源分配算法和行为管理方案&lt;/p&gt;</description>
    </item>
    <item>
      <title>研究记录7-原始论文复现</title>
      <link>http://localhost:1313/2019/access-control-prototype-system-implementation/</link>
      <pubDate>Tue, 15 Oct 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/access-control-prototype-system-implementation/</guid>
      <description>&lt;p&gt;本文是在前面搭建好的区块链实验平台基础上，对 Smart contract-based access control for the internet of things&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 这篇论文提出的访问控制方案进行复现，记录整个复现和测试的过程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Securing Majority-Attack in Blockchain Using Machine Learning</title>
      <link>http://localhost:1313/2019/securing-majority-attack-in-blockchain-using-machine-learning/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/securing-majority-attack-in-blockchain-using-machine-learning/</guid>
      <description>&lt;p&gt;Dey S. A Proof of Work: Securing Majority-Attack in Blockchain Using Machine Learning and Algorithmic Game Theory[J]. International Journal of Wireless and Microwave Technologies, 2018, 8(5): 1-9.&lt;/p&gt;&#xA;&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;&#xA;&lt;p&gt;多数人攻击(majority-attack)对公链网络可能不是一个威胁，但对联盟链来说则不是这样，因为联盟链部分成员可能串通作恶。本文提出了一种使用监督机器学习和博弈论理论的方法，利用智能软件代理(Intelligent Software Agent)来监控区块链网络中利益相关者的活动，从而检测诸如串通等异常。&lt;/p&gt;&#xA;&lt;h2 id=&#34;methodology&#34;&gt;Methodology&lt;/h2&gt;&#xA;&lt;p&gt;根据&lt;a href=&#34;https://arxiv.org/pdf/1402.2009.pdf&#34;&gt;Rosenfeld&lt;/a&gt;的研究，确保攻击者攻击成功（双花攻击）的概率在10%，1%和0.1%以下需要确认的区块数分别为2，4和6次，而一旦攻击者的hashrate超过全网hashrate的一半，不论确认多少区块，都将无法阻止攻击。与此同时，考虑实际执行攻击的可能性，假设商品价值为v，攻击者挖了o个区块，每个区块的价值为B，如果攻击成功，攻击者将获得价值v，如果攻击失败，攻击者将失去价值v+oB。综合考虑这两个方面，攻击者的回报&lt;code&gt;payoff(s)&lt;/code&gt;符合如下公式：&#xA;$$&#xA;s = \begin{cases}&#xA;{ v , } &amp;amp; { \text { if } q \ge 0.5 } \&#xA;{ - ( v + o B ) , } &amp;amp; { \text { if } q &amp;lt; 0.5 }&#xA;\end{cases} \tag{1}&#xA;$$&lt;/p&gt;</description>
    </item>
    <item>
      <title>When Intrusion Detection Meets Blockchain Technology A Review</title>
      <link>http://localhost:1313/2019/when-intrusion-detection-meets-blockchain-technology-a-review/</link>
      <pubDate>Thu, 03 Oct 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/when-intrusion-detection-meets-blockchain-technology-a-review/</guid>
      <description>&lt;p&gt;Meng W, Tischhauser E, Wang Q, et al. When Intrusion Detection Meets Blockchain Technology: A Review[J]. IEEE Access, 2018: 10179-10188.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;：以识别网络威胁和可能的事故为目的，入侵检测系统（IDS）已被广泛用于各种计算机网络。为了增强单个IDS的检测能力，协作入侵检测系统被提出（collaborative IDS， CIDS），它允许IDS节点间彼此交换数据。然而，当前检测架构中数据和信任管理仍然是两个主要的问题，能够降低检测系统的有效性。区块链可以保护数据存储的完整性和确保过程透明，因此有潜力被用于入侵检测领域。受此启发，本文就IDS和区块链的交叉做了一个综述，讨论区块链在入侵检测中的适用性，并明确该方向可能的挑战。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;论文内容主要分为如下几部分：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;介绍入侵检测和协作入侵检测(CID)的概念，声明CID当前面临的挑战：数据共享和信任管理。&lt;/li&gt;&#xA;&lt;li&gt;介绍了区块链的概念，原理和主要应用。&lt;/li&gt;&#xA;&lt;li&gt;叙述了在CID中，区块链如何用于解决数据共享和信任管理问题。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;引言部分也是对IDS和CIDS的说明，因此和后文进行合并，区块链部分的介绍已较为熟悉，浏览后未发现值得记录的知识，因此跳过。以下分为[入侵检测](##Intrusion Detection)，[协作入侵检测](##Collaborative Intrusion Detection)，[协作入侵检测的问题](##Challenges in Collaborative Intrusion Detection)，[基于区块链的解决方案](##Blockchain-Based Solutions)，[未来的研究方向](##Challenges and Future Trends)四部分对论文总结说明。并记录阅读时产生的想法。&lt;/p&gt;&#xA;&lt;h2 id=&#34;intrusion-detection&#34;&gt;Intrusion Detection&lt;/h2&gt;&#xA;&lt;p&gt;入侵检测描述了为了发现可能发生的事故的迹象监控网络或系统事件的过程。IDS是实现入侵检测过程的一种应用，主要提供两个功能：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;信息记录：一个IDS可以监控目标对象并在本地记录信息，收集的数据可以发送到其它设施（如中心化的事件管理服务器）进行分析。&lt;/li&gt;&#xA;&lt;li&gt;警报生成：一个IDS的重要任务是生成警报将识别的重要异常通知安全管理员。误报率是衡量一个IDS是否有效的重要指标。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;基于IDS节点部署的位置，可以分为 host-based IDS (HIDS) and network-based IDS (NIDS)两种类型。前者主要监控本地系统的特征和主机中的系统事件，以防恶意活动。后者监测网络流量，并分析网络协议和可疑事件的流量负载。这种分类还可以更具体，比如wireless-based IDS，通过监控无线网络的packages和协议识别恶意活动。实际应用中，经常结合HIDS和NIDS使用，因为它们可以相互补充，从而提供更好的保护。如下图&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ieeexplore.ieee.org/mediastore_new/IEEE/content/media/6287639/8274985/8274922/meng1-2799854-small.gif&#34; alt=&#34;The deployment of HIDS and NIDS in a network environment&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;基于检测方法也可将IDS分为两类：signature-based IDS(也称作 misuse-based IDS) 和 anomaly-based IDS。基于签名的IDS通过比较存储的签名和观察到的系统或网络事件，防止可能发生的事故，签名（或规则）是一种描述已知攻击的模式。基于签名的检测对已知威胁是有效的，但对于未知威胁和已知威胁的变种是无效的，例如，定义一个搜索&lt;code&gt;malware.exe&lt;/code&gt;文件的签名，攻击者将攻击程序重命名为&lt;code&gt;malware1.exe&lt;/code&gt;就可以轻松绕过检测。&lt;/p&gt;</description>
    </item>
    <item>
      <title>研究记录6-Quorum区块链实验平台搭建</title>
      <link>http://localhost:1313/2019/build-quorum-private-blockchain-network/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/build-quorum-private-blockchain-network/</guid>
      <description>&lt;p&gt;上篇文章已经确定了使用 Quorum 区块链，本文记录搭建 Quorum 私有区块链网络的过程。值得一提的是，相比于之前区块链平台搭建的尝试，本篇所述内容已经是一个完整无冗余的方案，后续对区块链平台搭建过程的优化，更多的是根据具体情况进行取舍，以及使用新出的一些更好用的工具。&lt;/p&gt;</description>
    </item>
    <item>
      <title>研究记录5-区块链与异常检测方向探索</title>
      <link>http://localhost:1313/2019/blockchain-and-anomaly-detection/</link>
      <pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/blockchain-and-anomaly-detection/</guid>
      <description>&lt;p&gt;对区块链进行异常检测（Anomaly detection）也是一个重要的方向，不过有的论文中也称作侵入检测（Intrusion detection），尤其是协作入侵检测（Collaborative Intrusion Detection, CID）的概念比较流行。我们虽然在搜索论文时对两种都进行了统计，但在下文说明中统一称呼为「异常检测」。&lt;/p&gt;&#xA;&lt;p&gt;通过阅读论文，可以大致将该领域的研究分为两个方向，一个是对区块链系统进行异常检测，另一个是利用区块链系统解决异常检测领域的问题，多数为利用区块链存储异常检测的数据。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-论文查找&#34;&gt;1. 论文查找&lt;/h2&gt;&#xA;&lt;p&gt;以下的论文是从SCI，EI，知网和arvix四个数据库检索得到的，检索的关键词有两种组合：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;blockchain&lt;/code&gt;和&lt;code&gt;anomaly&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;blockchain&lt;/code&gt;和&lt;code&gt;intrusion&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;所有的论文根据数据库进行分类，但排序不分先后。关于CID，很多论文在后面添加&lt;code&gt;系统&lt;/code&gt;或&lt;code&gt;网络&lt;/code&gt;一词，因此全称为&lt;code&gt;CIDS/CIDN&lt;/code&gt;。几篇协同入侵检测但与区块链无关的论文单列在&lt;code&gt;其它&lt;/code&gt;分类中。&lt;/p&gt;&#xA;&lt;p&gt;在每个数据库的搜索结果中，我们又将论文分为三类&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;综述&lt;/li&gt;&#xA;&lt;li&gt;对区块链系统进行异常检测&lt;/li&gt;&#xA;&lt;li&gt;利用区块链系统解决异常检测领域的问题&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;下面是一些额外的说明&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;标号规则举例：SCI-1代表SCI检索结果列表的第一篇文章，同样，EI-2代表EI检索结果第二篇文章。&lt;/li&gt;&#xA;&lt;li&gt;关联性说明：括号中是和研究目标的关联性级别，关联性越强，阅读优先级越高&lt;/li&gt;&#xA;&lt;li&gt;分类是通过阅读各论文摘要完成的，可能出现错误，在具体阅读论文完毕后，若发现分类错误，将进行修改，添加删除线的为已确认分类的论文&lt;/li&gt;&#xA;&lt;li&gt;EI-11和EI-16两篇，SCI-8和SCI-9两篇都极为相似，可不必重复阅读&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;类别&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;论文列表&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;综述&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;-  SCI-4：比特币系统存在的安全威胁及解决方案（弱）&lt;br&gt;-  &lt;del&gt;SCI-11：区块链和入侵检测交叉综述（强）&lt;/del&gt;&lt;br&gt;-  EI-13：从四个维度分析区块链，其中有一个是入侵检测（中）&lt;br&gt;-  EI-17：详细介绍了区块链和入侵检测的情况（强）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;对区块链进行异常检测&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;- &lt;del&gt;SCI-3(强)&lt;/del&gt;；&lt;del&gt;SCI-12(强)&lt;/del&gt;；SCI-10(强)&lt;br&gt;- EI-1(强)；EI-2；EI-3(强)；EI-5(中)；EI-9(强)；EI-12(中)；EI-18(强)&lt;br&gt;- &lt;del&gt;arvix-1(强)&lt;/del&gt;；arvix-2；arvix-3&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;利用区块链解决异常检测领域的问题&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;- SCI-5(中)；SCI-7&lt;br&gt;- EI-9；EI-10；EI-11；EI-12；EI-14；EI-15；EI-16&lt;br&gt;- 区块链存储异常检测的数据：  SCI-1(中)；SCI-6(弱)；SCI-8(中)；SCI-9；  EI-4(中)；EI-6(弱)；EI-7(弱)&lt;br&gt;- 智能合约定义异常检测算法：&lt;del&gt;SCI-2(强)&lt;/del&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;11-论文搜索结果&#34;&gt;1.1 论文搜索结果&lt;/h3&gt;&#xA;&lt;h4 id=&#34;sci&#34;&gt;SCI&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Chained Anomaly Detection Models for Federated Learning: An Intrusion Detection Case Study&lt;/p&gt;&#xA;&lt;p&gt;攻击者越来越擅长将恶意行为数据隐藏到正常行为数据中，异常检测的时间逐渐增加，为了解决这一问题，采用联邦学习来监测数据。这种方法主要的难题在于联邦学习的过程中攻击者容易添加恶意训练样本影响本地的机器学习模型，从而规避检测，因此，作者使用区块链来存储联邦学习模型的增量数据，从而可审计模型数据的正确性。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;del&gt;Collaborative Anomaly Detection on Blockchain from Noisy Sensor Data&lt;/del&gt;&lt;/p&gt;&#xA;&lt;p&gt;提出了一种框架用于区块链的协作异常检测，以condition-based的工业资产管理为例，从传感器数据中检测工业资产的异常。将区块链看作一个协作学习的平台而不仅仅是一个可追踪、不可变和分布式的数据管理系统，主要是把机器学习的异常检测算法定义在智能合约中，通过区块链的共识运行完成完整的异常检测过程。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;del&gt;Securing Majority-Attack in Blockchain Using Machine Learning and Algorithmic Game Theory: A Proof of Work&lt;/del&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>研究记录4-利用虚拟机搭建实验平台(失败)</title>
      <link>http://localhost:1313/2019/using-virtual-machine-to-build-experimental-platform/</link>
      <pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/using-virtual-machine-to-build-experimental-platform/</guid>
      <description>&lt;p&gt;先声明结论：最后由于网络原因没有成功，这种在多台电脑中安装虚拟机来联网的方式是存在一定问题的，其次，本篇所述的搭建方法过于繁琐，稍有不慎需要全部从头再来，在后面的实验中我们使用了简化的搭建流程。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一-前言&#34;&gt;一. 前言&lt;/h2&gt;&#xA;&lt;p&gt;为了设计一个对物联网的访问控制方案，首先利用两台树莓派和两台计算机搭建完成了一个 Quorum 区块链实验平台，并采用了 Istanbul-BFT 共识算法，但未启用隐私管理器。之后将在该实验平台上部署编写的访问控制合约。实验平台的网络拓扑如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://picped-1301226557.cos.ap-beijing.myqcloud.com/YJS_20190913_%E5%88%A9%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E5%BB%BA%E7%AB%8B%E5%B1%80%E5%9F%9F%E7%BD%91.png&#34; alt=&#34;利用路由器建立局域网&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;IBFT 共识允许的最小节点数量为 4，所以设置了 4 个节点，其中，两台电脑作为管理者或者用户的角色，能比较容易的和区块链交互，因为传感器和执行器本身没有足够的能力运行区块链节点，两台树莓派作为 IoT 设备的网关，我们所验证的是其中一台树莓派管理的设备向另一台树莓派管理的设备发起的访问。这里要注意两点：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;系统中不止设备对设备的访问，一定还包括用户通过 PC 或移动设备对 IoT 设备的访问；&lt;/li&gt;&#xA;&lt;li&gt;使用树莓派的原因是尽量模拟实际的环境，但事实上，树莓派依然与实际环境相差巨大，更多的是验证当前方案在资源受限的网关设备上运行的可能性及对设备造成的运行压力。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;下面介绍平台的搭建过程，主要分为以下几步&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;计算机环境配置&lt;/li&gt;&#xA;&lt;li&gt;树莓派启动和环境配置&lt;/li&gt;&#xA;&lt;li&gt;Quorum 私链网络搭建和测试运行&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;二-计算机环境配置&#34;&gt;二. 计算机环境配置&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-设备和操作系统选择&#34;&gt;1. 设备和操作系统选择&lt;/h3&gt;&#xA;&lt;p&gt;实验平台共使用了两台计算机和两台树莓派。设备和操作系统的详细信息如下：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;设备&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;CPU&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;操作系统&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;内存&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;硬盘&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;清华同方&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Intel Core i5-4460, 3.2GHz&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Ubuntu 18.04 LTS(虚拟机)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2GB&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;50GB&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;华硕A550&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Intel Core i5-4200, 2.8GHz&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Ubuntu 18.04 LTS(虚拟机)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2GB&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;50GB&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Raspberry Pi 3 Model B Plus&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;quad-core ARM Cortex A53, 1.4GHz&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Raspbian  Buster&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;1GB&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;32GB(microSD card)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Raspberry Pi 3 Model B&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;quad-core ARM Cortex A53, 1.2GHz&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Raspbian Buster&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;1GB&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;16GB(microSD card)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;2-静态ip分配&#34;&gt;2. 静态ip分配&lt;/h3&gt;&#xA;&lt;p&gt;两台计算机的操作环境是在虚拟机上完成的，涉及到网络相关操作，这里事先对各设备进行静态ip的分配&lt;/p&gt;</description>
    </item>
    <item>
      <title>研究记录3-开题确定题目</title>
      <link>http://localhost:1313/2019/research-proposal-title-select/</link>
      <pubDate>Sun, 14 Jul 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/research-proposal-title-select/</guid>
      <description>&lt;h3 id=&#34;待选题目&#34;&gt;待选题目&lt;/h3&gt;&#xA;&lt;p&gt;基于区块链的智能工厂支撑平台研究与设计&lt;/p&gt;&#xA;&lt;p&gt;基于区块链的智能工厂存储与安全问题研究&lt;/p&gt;&#xA;&lt;p&gt;基于智能合约的物联网访问控制方案设计与实现&lt;/p&gt;&#xA;&lt;p&gt;基于区块链的物联网平台搭建及访问控制系统实现&lt;/p&gt;&#xA;&lt;p&gt;区块链和工业物联网的集成系统及访问控制方案实现&lt;/p&gt;&#xA;&lt;p&gt;用于IIoT的区块链平台分析及访问控制方案实现&lt;/p&gt;&#xA;&lt;p&gt;区块链和工业物联网集成分析及访问控制方案实现&lt;/p&gt;&#xA;&lt;p&gt;用于工业物联网的区块链分析及访问控制方案实现&lt;/p&gt;&#xA;&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CMFD&amp;amp;dbname=CMFD201802&amp;amp;filename=1018117063.nh&amp;amp;uid=WEEvREcwSlJHSldRa1FhdkJkVG1BK3kxOGVKWjA3czdrcXRUeldnZkJaTT0=$9A4hF_YAuvQ5obgVAqNKPCYcEjKensW4IQMovwHtwkF4VYPoHbKxJw!!&amp;amp;v=MjU0MzlQVkYyNkZySzVHZEhLckpFYlBJUjhlWDFMdXhZUzdEaDFUM3FUcldNMUZyQ1VSTE9mWWVkbkZ5RGdWTDM=&#34;&gt;面向物联网应用的区块链支撑平台的研究与设计&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://kreader.cnki.net/Kreader/CatalogViewPage.aspx?dbCode=cdmd&amp;amp;filename=1018138959.nh&amp;amp;tablename=CMFD201901&amp;amp;compose=&amp;amp;first=1&amp;amp;uid=WEEvREcwSlJHSldRa1FhdkJkVG1BK3kwWFBZMHE3YmhCbjFIOXdKWWtibz0=$9A4hF_YAuvQ5obgVAqNKPCYcEjKensW4IQMovwHtwkF4VYPoHbKxJw!!&#34;&gt;区块链中的身份识别和访问控制技术研究&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://kreader.cnki.net/Kreader/CatalogViewPage.aspx?dbCode=cdmd&amp;amp;filename=1018707992.nh&amp;amp;tablename=CMFD201802&amp;amp;compose=&amp;amp;first=1&amp;amp;uid=WEEvREcwSlJHSldRa1FhdkJkVG1BK3kwWFBZMHE3YmhCbjFIOXdKWWtibz0=$9A4hF_YAuvQ5obgVAqNKPCYcEjKensW4IQMovwHtwkF4VYPoHbKxJw!!&#34;&gt;基于区块链的数据访问控制方法及应用研究&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;这三篇文章来自最近几年区块链方向的硕士毕业论文，查到的论文列表如下&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;作者&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;论文名&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;论文工作内容&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;专业&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;时间&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;大学&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;陈永丰&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;基于区块链的数据访问控制方法及应用研究&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;访问控制技术及区块链技术介绍 &lt;br&gt;基于区块链的MAC访问控制模型实现 &lt;br&gt;基于区块链的RBAC访问控制模型实现&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;计算机应用技术&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2018&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;电子科技大学&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;梅晨&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;基于区块链的物联网安全平台的设计与实现&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;搭建分布式物联网安全平台 &lt;br&gt;在平台实现物体接入控制 &lt;br&gt;在平台实现信息访问控制 &lt;br&gt;在平台实现简单的容忍入侵措施&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;计算机技术&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2018&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;北京邮电大学&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;贺毅&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;面向物联网应用的区块链支撑平台的研究与设计&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;适用于物联网的共识算法比较 &lt;br&gt;区块链平台设计及部署实现&lt;br&gt; 一个去物联网数据购买的中心化应用实现&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;计算机科学与技术&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2018&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;北京邮电大学&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;张青禾&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;区块链中的身份识别和访问控制技术研究&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Fabric中二级证书机制研究与改进 &lt;br&gt;联盟链中访问控制机制研究与改进&lt;br&gt; 两套机制的系统实现&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;计算机技术&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2018&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;北京交通大学&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;赵鹏&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;面向联盟链的一致性算法与事务问题研究&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Raft共识算法优化 &lt;br&gt;优化的Raft共识系统测试与验证&lt;br&gt;基于上述算法的分布式事务机制&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;计算机技术&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2018&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;东北大学&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;张宗立&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;联盟链中交叉容错共识算法的研究&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Raft共识算法优化&lt;br&gt;优化的Raft共识与联盟链的集成&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;计算机应用技术&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2018&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;东北大学&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;任欢&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;基于区块链的文件存储模型及密文搜索算法研究&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;提出基于区块链技术的存储模型&lt;br&gt;基于该存储模型的密文多关键字搜索排序算法&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;计算机系统结构&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2018&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;东北大学&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;焦通&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;区块链数据库内支持关键字查询的关键技术研究&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;区块链数据库系统框架&lt;br&gt;支持关键字查询的数据模型&lt;br&gt;支持关键字查询的查询优化方法&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;计算机软件与理论&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2018&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;东北大学&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;白砚领&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;基于区块链的分布式存储系统的设计与实现&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;设计基于区块链的分布式存储模型DMB&lt;br&gt;设计并实现基于区块链的分布式存储系统&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;计算机技术&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2018&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;东北大学&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;包子健&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;基于区块链技术的隐私保护策略及应用的研究与实现&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;基于公平盲签名的隐私保护协议Bscoin&lt;br&gt;基于多重签名的隐私保护协议Lockcoin&lt;br&gt;隐私保护的比特币投票应用&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;计算机应用技术&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2018&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;东北大学&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;马衍崧&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;基于区块链技术的WBAN数据的云存储完整性研究&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;基于区块链技术的访问控制&lt;br&gt;基于区块链技术的完整性验证&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;计算机应用技术&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2018&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;东北大学&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>A Novel Attribute-Based Access Control Scheme Using Blockchain for IoT</title>
      <link>http://localhost:1313/2019/a-novel-attribute-based-access-control-scheme-using-blockchain-for-iot/</link>
      <pubDate>Mon, 03 Jun 2019 15:51:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/a-novel-attribute-based-access-control-scheme-using-blockchain-for-iot/</guid>
      <description>&lt;p&gt;Ding, Sheng, et al. &amp;ldquo;A Novel Attribute-Based Access Control Scheme Using Blockchain for IoT.&amp;rdquo; &lt;em&gt;IEEE Access&lt;/em&gt; 7 (2019): 38431-38441.&lt;/p&gt;&#xA;&lt;p&gt;DOI: &lt;a href=&#34;https://doi-org-s.webvpn.neu.edu.cn/10.1109/ACCESS.2019.2905846&#34;&gt;10.1109/ACCESS.2019.2905846&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;KeyWord: Access control, attribute-based access control, blockchain, consortium blockchain, IoT&lt;/p&gt;&#xA;&lt;p&gt;注：插图经过重新绘制，照片来自原论文截图。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-摘要&#34;&gt;1. 摘要&lt;/h2&gt;&#xA;&lt;p&gt;随着智能设备数量的急剧增加，物联网近年来得到越来越多的关注和快速发展。它通过现有的网络基础设施有效地将物理世界与Internet集成在一起，以便在智能设备之间共享数据。然而，其复杂的大规模网络结构给物联网系统带来了新的安全风险和挑战。为了保证数据的安全性，传统的访问控制技术由于其复杂的访问管理和集中性导致可靠性不足，不适合直接用于物联网系统的访问控制。本文提出了一种新的基于属性的用于物联网系统的访问控制方案，大大简化了访问管理。我们使用区块链技术来记录属性的分发，以避免单点故障和数据篡改。访问控制过程也进行了优化，以满足对物联网设备进行高效和轻量化计算的需要。安全性和性能分析表明，该方案能够有效抵御多种攻击，并能在物联网系统中得到有效的实现。&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Blockchain-Based Solution for Enhancing Security and Privacy in Smart Factory</title>
      <link>http://localhost:1313/2019/a-blockchain-based-solution-for-enhancing-security-and-privacy-in-smart-factory/</link>
      <pubDate>Fri, 24 May 2019 21:18:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/a-blockchain-based-solution-for-enhancing-security-and-privacy-in-smart-factory/</guid>
      <description>&lt;p&gt;Wan J, Li J, Imran M, et al. A Blockchain-Based Solution for Enhancing Security and Privacy in Smart Factory[J]. IEEE Transactions on Industrial Informatics, 2019.&lt;/p&gt;&#xA;&lt;p&gt;被引：2次&lt;/p&gt;&#xA;&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;&#xA;&lt;p&gt;通过IIoT，智能工厂进入了蓬勃发展的时期。但是，随着节点数量和网络规模的扩大，传统的IIoT架构无法再为这样庞大的系统提供有效支持。因此，我们引入了区块链。它是一种用于构建分布式网络的新兴方案，用于重塑传统的IIoT架构。首先，分析了传统IIoT架构的主要问题，总结了现有的改进。其次，我们引入了一个安全和隐私模型来帮助设计基于区块链的架构。在此基础上，我们分解并重新组织原始的IIoT架构，以形成一个新的，多中心，部分分散的架构。然后，我们引入一些相关的安全技术，以改进和优化新架构。之后，我们设计了数据交互过程和架构的算法。最后，我们使用自动生产平台来讨论具体的实现。实验结果表明，与传统架构相比，该架构提供了更好的安全性和隐私保护。因此，所提出的架构代表了原始架构的重大改进，这为IIoT开发提供了新的方向&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;原因：节点数量和网络规模扩大，传统的IIoT架构无法再为这样庞大的系统提供有效支持。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;传统IIoT问题和现有改进（Section I）&lt;/li&gt;&#xA;&lt;li&gt;设计基于区块链的架构(Section II)&lt;/li&gt;&#xA;&lt;li&gt;安全与隐私模型(Section III)&lt;/li&gt;&#xA;&lt;li&gt;设计数据交互过程和算法(Section IV)&lt;/li&gt;&#xA;&lt;li&gt;使用自动生产平台具体实施(Section V)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>A Review on the Application of Blockchain to the Next Generation</title>
      <link>http://localhost:1313/2019/a-review-on-the-application-of-blockchain-to-the-next-generation/</link>
      <pubDate>Thu, 23 May 2019 17:11:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/a-review-on-the-application-of-blockchain-to-the-next-generation/</guid>
      <description>&lt;p&gt;Fernández-Caramés T M, Fraga-Lamas P. A Review on the Application of Blockchain for the Next Generation of Cybersecure Industry 4.0 Smart Factories[J]. arXiv preprint arXiv:1902.09604, 2019.&lt;/p&gt;&#xA;&lt;p&gt;DOI: &lt;a href=&#34;https://doi.org/10.1109/ACCESS.2019.2908780&#34;&gt;10.1109/ACCESS.2019.2908780&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;&#xA;&lt;p&gt;工业4.0是一个旨在通过使用一些最新技术改进现代工厂运作方式的概念，例如用于创建工业物联网（IIoT），机器人或大数据应用的技术。其中一种技术是区块链，它能够为不同的工业领域增加信任，安全性和去中心化特性。本文重点分析使用区块链和智能合约开发工业4.0应用时产生的好处和挑战。此外，本文还对工业4.0技术中最相关的基于区块链的应用进行了全面的回顾。因此，其目的是为未来的工业4.0开发人员提供详细指南，以确定区块链如何增强下一代网络工业应用的网络安全。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Smart Contract-Based Access Control for the Internet of Things</title>
      <link>http://localhost:1313/2019/smart-contract-based-access-control-for-the-internet-of-things/</link>
      <pubDate>Tue, 14 May 2019 19:10:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/smart-contract-based-access-control-for-the-internet-of-things/</guid>
      <description>&lt;p&gt;Zhang Y, Kasahara S, Shen Y, et al. Smart contract-based access control for the internet of things[J]. IEEE Internet of Things Journal, 2018.&lt;/p&gt;&#xA;&lt;p&gt;被引：35次&lt;/p&gt;&#xA;&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;&#xA;&lt;p&gt;该论文调查了物联网中的访问控制问题。提出了一个基于智能合约的访问控制框架，该框架包括多个访问控制合约（access control contracts, ACCs），一个判决合约(Judge contract, JC)，一个注册合约（register contract, RC），来实现物联网中分布式和可信任的访问控制。每个ACC为一个subject-object提供一个访问控制方法，并通过检测subject行为实现基于预定义策略的静态访问权验证和动态的访问权验证。JC则通过接收来自ACC的恶意行为汇款，进行行为判决并返回相应的处罚策略，从而实现ACCs的动态验证。RC记录ACC和恶意行为判决方法信息，并提供管理这些方法的相关功能，如注册、更新和删除。最后使用一台台式机，一台笔记本，两台树莓派，基于以太坊智能合约实现了该架构。&lt;/p&gt;&#xA;&lt;p&gt;Section2介绍该论文考虑的物联网系统&lt;/p&gt;&#xA;&lt;p&gt;Section4介绍基于智能合约的访问控制框架&lt;/p&gt;&#xA;&lt;p&gt;Section5介绍该框架实验&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;IoT系统可能遭受入侵，导致相关资源（数据、服务、存储单元、计算单元等）的合法权限被获取，访问控制是阻止未授权实体对资源非法访问的主要方式。传统的IoT访问控制方案主要建立在一些著名的访问控制模型上，如RBAC、ABAC和CapBAC。RBAC方案中，访问控制基于组织中主体的角色，通过为角色关联一组访问权限，并将角色分配给主体，可以建立一个主体和访问权限间的多对多关系。ABAC的访问控制基于策略，该策略结合不同类型的属性，如主体属性、客体（实体或实体持有的资源）属性和环境属性等来表示在什么样的情况下可以授予主体权限。CapBAC中基于权能的概念授予主体访问权限，权能是可转让而不可变的权限令牌，为每个主体描述了一组访问权限。&lt;/p&gt;&#xA;&lt;p&gt;以上的方案中，验证主体的访问权限一般有中央权威进行，存在单点故障问题。分布式 CapBAC被提出解决这一问题，其中访问权限验证由被请求的IoT对象自己来指向而不是中央权威。然而，IoT对象通常能力不足而会被入侵者轻易控制，所以它们无法作为访问权限验证实体被完全信任，因此，分布式CapBAC模型可能无法解决不可信IoT环境下的访问控制。作者提出使用区块链和智能合约来实现用于IoT的分布式和可信的访问控制，本文的访问控制框架由一个注册合约（RC）、一个判决合约（JC）和多个访问控制合约（ACC）组成，其中每个ACC提供一个subject-object对的访问控制方法，并同时实施基于预定义访问策略的静态权限验证和基于检测subject行为的动态权限验证。ACC还提供添加、更新、删除访问控制策略的功能。一旦ACC被调用，它将被区块链系统的所有参与者验证，确保访问控制的可信。为了实施动态验证，JC提供了错误行为判决方法，它接收来自ACC的关于subject的恶意行为报告，进行判决并返回相应的判决结果。为了管理访问控制和恶意行为判决方法，RC可以注册方法的相关信息，提供注册新方法、更新和删除已有方法的功能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;system-and-security-model&#34;&gt;System and Security Model&lt;/h2&gt;&#xA;&lt;h3 id=&#34;a-物联网系统结构&#34;&gt;A. 物联网系统结构&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ieeexplore.ieee.org/mediastore_new/IEEE/content/media/6488907/8709863/8386853/zhang1-2847705-small.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;服务器。与IoT设备/存储设备链接，为用户提供服务。交互方式包括&#xA;&lt;ol&gt;&#xA;&lt;li&gt;从传感器收集环境数据，&lt;/li&gt;&#xA;&lt;li&gt;向执行器发送命令执行某些操作，&lt;/li&gt;&#xA;&lt;li&gt;从存储设备查询数据或将数据存到存储设备&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;存储设备。存储对其它各方有用的数据，包括服务器运行数据，传感器收集的环境数据，用户配置文件等。&lt;/li&gt;&#xA;&lt;li&gt;用户设备。例如PC，Laptop，smart phone，享受服务器提供的服务，如查询当前温度，并可从存储设备读写数据。&lt;/li&gt;&#xA;&lt;li&gt;IoT网关。连接大量IoT设备，作为它们的代理&lt;/li&gt;&#xA;&lt;li&gt;IoT设备。感知环境数据发给server/storage device，执行来自用户的命令&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;b-安全模型&#34;&gt;B. 安全模型&lt;/h3&gt;&#xA;&lt;p&gt;典型的物联网应用中，每个节点都拥有一些其它节点需要的资源（服务、数据、存储空间等）。因此，资源所有者需要实施访问控制阻止未经授权的访问，例如，服务器需要能阻止未注册用户的访问请求，或已注册用户对未订阅服务的请求。未来阻止对存储空间和数据的非法使用，存储设备必须能限制来自未授权节点查询数据或存储数据的请求。IoT设备也必须能拒绝未授权而对其数据的检索或对执行器的控制。&lt;/p&gt;&#xA;&lt;p&gt;该论文使用下面论文中的访问控制矩阵抽象了访问控制问题。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;R. S. Sandhu and P. Samarati, “Access control: Principle and practice,” sIEEE Commun. Mag., vol. 32, no. 9, pp. 40–48, Sep. 1994.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Authentication and Authorization for the Internet of Things</title>
      <link>http://localhost:1313/2019/authentication-and-authorization-for-the-internet-of-things/</link>
      <pubDate>Tue, 14 May 2019 15:14:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/authentication-and-authorization-for-the-internet-of-things/</guid>
      <description>&lt;p&gt;Kim H, Lee E A. Authentication and Authorization for the Internet of Things[J]. IT Professional, 2017, 19(5): 27-33.&lt;/p&gt;&#xA;&lt;p&gt;核心：locally centralized, globally distributed的认证与授权&lt;/p&gt;&#xA;&lt;p&gt;引入：由2016年DNS服务商Dyn受到的DDoS攻击说明物联网带来的安全挑战。由2015年乌克兰电网受到的攻击说明物联网遭受攻击的后果更具破坏性。这两者反映的是，物联网设备缺乏相应的访问控制机制，导致面对攻击不够健壮。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blockchain Paradigm and Internet of Things</title>
      <link>http://localhost:1313/2019/blockchain-paradigm-and-internet-of-things/</link>
      <pubDate>Mon, 13 May 2019 15:42:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/blockchain-paradigm-and-internet-of-things/</guid>
      <description>&lt;p&gt;Valentin Rakovic， Jovan Karamachoski，Vladimir Atanasovski，Liljana Gavrilovska&lt;/p&gt;&#xA;&lt;p&gt;Published online: 21 March 2019&lt;/p&gt;&#xA;&lt;p&gt;Wireless Personal Communications (2019) 106:219–235&#xA;&lt;a href=&#34;https://doi.org/10.1007/s11277-019-06270-9&#34;&gt;https://doi.org/10.1007/s11277-019-06270-9&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;&#xA;&lt;p&gt;区块链是在分布式网络中提供隐私和安全的分布式分类账技术，这使得它适用于具有分布式特性的物联网。然而，区块链需要高计算能力，有高带宽开销和延迟，不适合物联网场景，为了将区块链和物联网结合，许多研究旨在开发针对于特定物联网场景需求的区块链方法。本文详细介绍了物联网区块链集成的相关问题，对当前文献和相关部署测试做了全面调查，指出了当前主要的研究和面临的挑战，并讨论了未来可能的研究领域。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Industry 4.0 Development and Application of Intelligent Manufacturing</title>
      <link>http://localhost:1313/2019/industry-4.0-development-and-application-of-intelligent-manufacturing/</link>
      <pubDate>Mon, 15 Apr 2019 14:22:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/industry-4.0-development-and-application-of-intelligent-manufacturing/</guid>
      <description>&lt;p&gt;Author：Guo-Jian Cheng, Li-Ting Liu, Xin-Jian Qiang, Ye Liu&lt;/p&gt;&#xA;&lt;p&gt;Published in：2016 International Conference on Information System and Artificial Intelligence (ISAI)&lt;/p&gt;&#xA;&lt;p&gt;Conference Location：Hong Kong, China&lt;/p&gt;&#xA;&lt;p&gt;Cited times：30&lt;/p&gt;&#xA;&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;&#xA;&lt;p&gt;过去几年，工业和信息技术领域经历了深刻的变革，进入了工业4.0时代，将从嵌入式系统演变到网络物理系统（CPS）。制造业将通过互联网，整合内部和外部网络，朝着智能化方向发展。本文介绍工业4.0的发展，并以120的智慧信息技术（WIT120）为例介绍网络物理系统，然后通过数字工厂到智能工厂的例子介绍工业4.0在智能制造中的应用。最后分析工业4.0在未来的发展方向，为其在智能制造中的应用提供参考。&lt;/p&gt;</description>
    </item>
    <item>
      <title>提取以太坊的区块产生时间</title>
      <link>http://localhost:1313/2019/extract-the-block-generation-time-of-ethereum/</link>
      <pubDate>Fri, 05 Apr 2019 21:35:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/extract-the-block-generation-time-of-ethereum/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;目的是提取以太坊的区块产生时间形成数据集，初步的思路有两种：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;爬取以太坊区块浏览器中的时间数据，然后格式化形成数据集输出&lt;/li&gt;&#xA;&lt;li&gt;同步以太坊的所有区块（头），利用以太坊本身提供的接口提取每个区块的时间戳信息，然后将时间戳转换为真实的日期格式形成数据集输出，&lt;a href=&#34;https://tool.lu/timestamp/&#34;&gt;时间戳转换在线工具&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;查询资料过程中，了解到谷歌已提供以太坊的区块信息数据集&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。虽然数据集本身没有时间信息，但可以导出时间戳进行转换，了解到谷歌使用的工具是&lt;a href=&#34;https://github.com/blockchain-etl/ethereum-etl#blockscsv&#34;&gt;ethereum-etl&lt;/a&gt;，故最终的解决方案是：使用ethereum-etl导出时间戳，编写Python程序转换时间戳并导出数据集。&lt;/p&gt;</description>
    </item>
    <item>
      <title>研究记录2-区块链平台选择的思考</title>
      <link>http://localhost:1313/2019/blockchain-platform-compare-and-select/</link>
      <pubDate>Mon, 01 Apr 2019 13:11:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/blockchain-platform-compare-and-select/</guid>
      <description>&lt;p&gt;首先我们就 Ethereum 等九个平台做分析比较，从而确定要用来作为实验平台的区块链。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-ethereum&#34;&gt;1. Ethereum&lt;/h2&gt;&#xA;&lt;h3 id=&#34;关于存储&#34;&gt;关于存储&lt;/h3&gt;&#xA;&lt;p&gt;以太坊生态中的一些工具和技术是用来解决大数据量存储问题的，比如Swarm和IPFS。Swarm 是一个去中心化的内容存储和分发服务。 您可以将它视为 CDN，但它并不是在一家公司的服务器上托管的所有 CDN，而是通过互联网在计算机上分发。 就像运行一个以太坊节点一样，来运行一个 Swarm 节点连接到 Swarm 网络。&lt;/p&gt;&#xA;&lt;p&gt;IPFS在2016年就正式在以太坊分叉（ETH）上推出了它的分布式文件存储网络，在概念上与Swarm完全相似。虽然与以太坊没有直接关联，但可与以太坊集成。&lt;/p&gt;&#xA;&lt;p&gt;Swarm和ETH的区别见：&lt;a href=&#34;https://github.com/ethersphere/go-ethereum/wiki/IPFS-&amp;amp;-SWARM&#34;&gt;IPFS&amp;amp;Swarm&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;在以太坊生态中，智能合约smart contract实现了分布式逻辑，Swarm实现了分布式存储，Whisper实现了分布式消息，整体结构如下所示&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://picped-1301226557.cos.ap-beijing.myqcloud.com/YJS_20190401_%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%94%9F%E6%80%81.jpg&#34; alt=&#34;YJS_20190401_以太坊生态&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;参考链接：&lt;a href=&#34;https://swarm-guide.readthedocs.io/en/latest/introduction.html&#34;&gt;Swarm文档说明&lt;/a&gt;，&lt;a href=&#34;http://swarm-gateways.net/&#34;&gt;Swarm内容搜索&lt;/a&gt;，&lt;a href=&#34;https://mitchellcash.com/2016/12/29/getting-started-with-ethereum-s-swarm-on-the-testnet.html&#34;&gt;Swarm简单入门&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;关于测试&#34;&gt;关于测试&lt;/h3&gt;&#xA;&lt;p&gt;以太坊官方目前提供两种网络，同时为了测试，也可以自己搭建私有网络&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;主网络&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;是产生真正有价值的以太币的网络，目前区块高度超过700万，每个以太币的价值在118美刀左右。优缺点如下表&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;优点&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;缺点&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;全球化的，部署在Internet环境上&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;任何智能合约执行都会消耗真实的以太币，也就是真实的现金。不适合开发、调试和测试&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;智能合约的代码，执行，区块的调用，都可以清晰的查看到&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;所有节点是全球化的，速度较慢&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;部署在主网络的智能合约，全世界任何应用都可以调用&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;对于部分商业应用来说，只需要一部分节点，例如分布式部署的10-20台服务器即可，不需要遍布全球的网络&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;&lt;strong&gt;测试网络&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;以太坊为了方便智能合约的开发、学习和测试，开启了几条全新的区块链，与主网络特性相同，但测试网络中的以太币价值更低，也更容易得到。这样不至于在主网络上开发出现 BUG 造成以太币的损失。主要的以太坊测试网络有：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://ropsten.etherscan.io/&#34;&gt;Ropsten Test Network&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://kovan.etherscan.io/&#34;&gt;Kovan Test Network&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://rinkeby.etherscan.io/&#34;&gt;Rinkeby Test Network&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;测试网络的优缺点如下表&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;优点&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;缺点&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;合约执行不消化真实货币&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;所有节点是全球化的，速度较慢&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;全球化，部署在Internet环境上&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;测试网络不能作为商业应用的实际落地环境&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;智能合约的代码，执行，区块的调用，都可以清晰的查看到&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;测试网络由官方提供，使用较为直接，对以太坊技术的底层实现，Geth的各种参数接口等理解会差很多&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;部署在测试环境上的智能合约，全世界任何应用都可以调用&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;&lt;strong&gt;私有网络&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;除了官方提供的两种网络，用户还可以使用Geth工具创建自己的私有网络，用来开发、学习和测试。基本的说明见官方的github wiki: &lt;a href=&#34;https://github.com/ethereum/go-ethereum/wiki/Private-network&#34;&gt;Private network&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;私有网络的优点有：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;方便开发者深入理解以太坊的技术底层&lt;/li&gt;&#xA;&lt;li&gt;因为节点相对较少，速度较快&lt;/li&gt;&#xA;&lt;li&gt;用户可以随时创建，随时销毁，随时重建一个以太坊网络&lt;/li&gt;&#xA;&lt;li&gt;随意的增加节点数目，或者删除节点，&lt;/li&gt;&#xA;&lt;li&gt;既可以在服务器上建立，也可以在自己的windows或者Mac机器上建立，&lt;/li&gt;&#xA;&lt;li&gt;甚至一台机器可以建立多个节点，在一台机器上实现多节点的私有网络&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;缺点主要是只有在私有网络内的节点才能查看智能合约的执行、调用。目前网上关于如何构建以太坊私有网络的教程很多。但没有实践的情况下，同时也没有在教程中看到如何产生指定的交易类型的方式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Distributed Blockchain-Based Data Protection Framework for Modern Power Systems</title>
      <link>http://localhost:1313/2019/distributed-blockchain-based-data-protection-framework-for-modern-power-systems/</link>
      <pubDate>Mon, 01 Apr 2019 11:16:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/distributed-blockchain-based-data-protection-framework-for-modern-power-systems/</guid>
      <description>&lt;p&gt;Author：Gaoqi Liang , Steven R. Weller, Fengji Luo , Junhua Zhao, Zhao Yang Dong&lt;/p&gt;&#xA;&lt;p&gt;Published in：IEEE Transactions on Smart Grid 2018(Early Access)&lt;/p&gt;&#xA;&lt;p&gt;期刊级别：SCI I区&lt;/p&gt;&#xA;&lt;p&gt;被引量：19次&lt;/p&gt;&#xA;&lt;p&gt;keywords：Blockchain, Modern power systems, Cyber-attacks, Distributed network, False data injection attacks&lt;/p&gt;&#xA;&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;&#xA;&lt;p&gt;现代电力系统的网络安全同时吸引了学术和工业界的关注，许多针对网络攻击的检测和防御手段因此而被提出。本文提出了一种新的基于区块链的分布式保护框架，用于增强现代电力系统应对网络攻击的自抵御能力。我们对区块链技术如何用于增强电网鲁棒性和安全性做了全面的讨论，使用电表作为分布式网络的节点，将电表的测量数据打包为区块。所提出方案的有效性通过基于IEEE-118节点系统的仿真实验来说明。&lt;/p&gt;</description>
    </item>
    <item>
      <title>以太坊开发7-swarm存储网络使用</title>
      <link>http://localhost:1313/2019/swarm-storage-network-using/</link>
      <pubDate>Thu, 28 Mar 2019 19:59:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/swarm-storage-network-using/</guid>
      <description>&lt;p&gt;说实话，swarm的资料比较难找，倒是IPFS的比较多一点。最后只在&lt;a href=&#34;http://medium.com/&#34;&gt;Medium&lt;/a&gt;找到了一些，本篇文章就是在实践其中的一些项目，并通过这样来学习swarm。&lt;/p&gt;&#xA;&lt;p&gt;参考链接：&lt;a href=&#34;https://swarm-gateways.net/bzz:/theswarm.eth/&#34;&gt;swarm官网&lt;/a&gt;，&lt;a href=&#34;https://swarm-guide.readthedocs.io/en/latest/introduction.html&#34;&gt;swarm文档&lt;/a&gt;，&lt;a href=&#34;https://github.com/ethersphere&#34;&gt;github项目&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;还有一些帮助理解的资料：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://ethereum.stackexchange.com/questions/55027/swarm-in-a-private-network&#34;&gt;关于swarm的三个理解上的问题&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ethersphere/go-ethereum/wiki/IPFS-&amp;amp;-SWARM&#34;&gt;swarm和ipfs的比较&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>A Case Study for Blockchain in Manufacturing “FabRec”</title>
      <link>http://localhost:1313/2019/a-case-study-for-blockchain-in-manufacturing-fabrec/</link>
      <pubDate>Mon, 25 Mar 2019 10:13:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/a-case-study-for-blockchain-in-manufacturing-fabrec/</guid>
      <description>&lt;p&gt;Author：Atin Angrisha, Benjamin Cravera, Mahmud Hasana, Binil Starly&lt;/p&gt;&#xA;&lt;p&gt;Published in：46th SME North American Manufacturing Research Conference, NAMRC 46, Texas, USA&lt;/p&gt;&#xA;&lt;p&gt;被引量：7次&lt;/p&gt;&#xA;&lt;p&gt;keywords：blockchain; cyber-physical systems; smart contracts; ethereum; decentralized networks; shareable databases&lt;/p&gt;&#xA;&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;&#xA;&lt;p&gt;随着产品定制成为新的商机，制造商必须找到在无信任网络中进行协作和实现信息共享的方法。在本文中，我们提出“FabRec”：一种用于处理由各制造商使用区块链技术产生的制造信息的方法。其中，制造机器和计算节点构成去中心化网络来实现制造过程的自动化与透明化，基于对历史记录的审计实现对制造过程的第三方验证，使用智能合约实现参与者之间无纸化合同。同时，系统将与制造相关的信息分类，并使其在P2P网络上可用，以通过可验证的审计跟踪确保透明度和数据来源。我们通过组合制造机器，片上系统（SoC, System on chip）和计算节点来建立测试平台，以展示组成联盟的不同制造商可以通过分布式网络进行通信的机制。我们的测试平台原型展示了驻留在分布式网络上的计算机代码的价值：用于验证区块链的信息以及在物理世界中自动启动操作的方式。本文旨在通过测试平台揭示系统组成，为更大规模的测试做准备，并讨论区块链在制造业的未来潜力。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LightChain:A Lightweight Blockchain System for Industrial Internet of Things</title>
      <link>http://localhost:1313/2019/lightchaina-lightweight-blockchain-system-for-industrial-internet-of-things/</link>
      <pubDate>Tue, 19 Mar 2019 11:00:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/lightchaina-lightweight-blockchain-system-for-industrial-internet-of-things/</guid>
      <description>&lt;p&gt;Author： Yinqiu Liu, Kun Wang, Yun Lin, and Wenyao Xu&lt;/p&gt;&#xA;&lt;p&gt;Published in：IEEE Transactions on Industrial Informatics&lt;/p&gt;&#xA;&lt;p&gt;State：Early Access&lt;/p&gt;&#xA;&lt;p&gt;Index Terms：Blockchain, Industrial Internet of Things, Distributed System, Consensus Mechanism, Data Filter.&lt;/p&gt;&#xA;&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;&#xA;&lt;p&gt;虽然区块链和IIoT之间的结合得到了广泛的关注，但区块链的高资源需求和IIoT设备的有限性能之间的矛盾还无法较好的解决。一方面，由于公钥结构、默克尔树和PoW等数学概念的引入，部署区块链需要巨大的算力；另一方面，全节点应该能同步大量的区块数据和处理P2P网络中的大量交易。IIoT设备难以承受其对存储容量和带宽的占用。本文中，我们提出了名为&lt;strong&gt;LightChain&lt;/strong&gt;的轻量级区块链使其适用于IIoT场景，提出了一个名为**Synergistic Multiple Proof（SMP）&lt;strong&gt;的共识机制来促进IIoT设备间的合作，提出了一种称为&lt;/strong&gt;LightBlock（LB）**的轻量级数据结构，用于简化广播内容。此外，还设计了一种 **Unrelated Block Offloading Filter (UBOF)**以避免分类帐的无限增长，同时不影响区块链的可追溯性。实验表明，LightChain可以将计算成本降低39.32％，将块生成速度提高74.06％。在存储和网络使用方面，降幅分别为43.35％和90.55％。&lt;/p&gt;</description>
    </item>
    <item>
      <title>研究记录1-区块链的数据存储问题</title>
      <link>http://localhost:1313/2019/data-storage-in-blockchain/</link>
      <pubDate>Sat, 16 Mar 2019 09:11:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/data-storage-in-blockchain/</guid>
      <description>&lt;p&gt;区块链的本质是一个只增数据库，这就意味着其中存储的数据会随着时间的推移不断增加，而区块链分布式的特性要求节点需要存储区块链的整个副本，因此，区块链对节点存储能力的要求是越来越高的。&lt;/p&gt;&#xA;&lt;p&gt;因此，我们首先来分析普通的电脑是否能应付区块链不断增长的体积，考虑最流行的比特币和以太坊两个平台。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-区块链的数据承载能力&#34;&gt;1. 区块链的数据承载能力&lt;/h2&gt;&#xA;&lt;p&gt;以比特币和以太坊为例，但不考虑硬分叉产生的 Bitcoin Cash 和 Ethereum Classic，只考虑比特币和以太坊的主干，到 2019.01.11  15:06 为止，一些数据总结如下表，数据来源为 &lt;a href=&#34;https://bitinfocharts.com/&#34;&gt;BitInfoCharts&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Bitcoin&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Ethereum&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Transactions last 24h&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;319853&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;583335&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Transactions avg. per hour&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;13327&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;24306&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Block Time(出块时间)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;9m  28s&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;15.4s&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Blocks Count&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;558038&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;7046728&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Blocks last 24h&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;151&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;5586&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Blocks avg. per hour&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;6&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;233&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;First Block&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2009-01-09&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2015-07-30&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Blockchain Size&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;232.51GB&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;667.10GB&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;首先，从总体上看。比特币发展十年链上数据共232.51GB，以太坊667.10GB，现有的存储介质，一台普通的电脑即可承受，但是，物联网设备是难以承受的。&lt;/p&gt;&#xA;&lt;p&gt;从单位时间产生的数据量看区块链的承受能力，数据来源为 &lt;a href=&#34;https://www.blockchain.com/zh/explorer&#34;&gt;区块链浏览器&lt;/a&gt;。下面两个图分别展示了到 2019.01.11  15:36 为止 Bitcoin 和 Ethereum 最近的五个区块的情况，图中“大小（KB）”一栏右起第一个逗号实际上是小数点。比如第一个图(Bitcoin)中第一行数值中的1,162,094，实际上是1162.094KB；第二个图中第一行数值中的31,052，实际上是31.052KB&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://picped-1301226557.cos.ap-beijing.myqcloud.com/YJS_20190316_%E6%9C%80%E8%BF%91%E7%9A%84%E4%BA%94%E4%B8%AA%E6%AF%94%E7%89%B9%E5%B8%81%E5%8C%BA%E5%9D%97.png&#34; alt=&#34;图1  2019.01.11  15:36 最近的五个Bitcoin区块&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://picped-1301226557.cos.ap-beijing.myqcloud.com/YJS_20190316_%E6%9C%80%E8%BF%91%E7%9A%84%E4%BA%94%E4%B8%AA%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%8C%BA%E5%9D%97.png&#34; alt=&#34;图1-2   2019.01.11  15:36 最近的五个Ethereum区块&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>以太坊开发6-Docker搭建以太坊私链</title>
      <link>http://localhost:1313/2019/use-docker-to-build-ethereum-private-chain/</link>
      <pubDate>Tue, 12 Mar 2019 11:24:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/use-docker-to-build-ethereum-private-chain/</guid>
      <description>&lt;p&gt;在以太坊github的&lt;a href=&#34;https://github.com/ethereum/go-ethereum&#34;&gt;官方项目地址&lt;/a&gt;发现其支持Docker启动，同时因为Docker相对于虚拟机的易用性，决定尝试使用Docker搭建以太坊联盟链&lt;/p&gt;&#xA;&lt;p&gt;Docker安装部分查看自官方说明，搭建过程主要参考&lt;a href=&#34;https://www.jianshu.com/p/7994db7a2b89?from=singlemessage&#34;&gt;简书-使用Docker搭建以太坊私有链并部署合约&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;一docker安装&#34;&gt;一、Docker安装&lt;/h2&gt;&#xA;&lt;p&gt;OS环境：Ubuntu 18.04 LTS(bionic)&lt;/p&gt;&#xA;&lt;p&gt;内核版本：4.18.0-16-generic&lt;/p&gt;&#xA;&lt;p&gt;处理器架构：amd64&lt;/p&gt;&#xA;&lt;p&gt;官方的安装说明位于：&lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/ubuntu/&#34;&gt;Get Docker CE for Ubuntu&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>以太坊开发5-以太坊节点连接到网络的几种方式</title>
      <link>http://localhost:1313/2019/the-way-to-connect-to-the-network-about-ethereum-node/</link>
      <pubDate>Tue, 12 Mar 2019 08:33:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/the-way-to-connect-to-the-network-about-ethereum-node/</guid>
      <description>&lt;p&gt;文章翻译自：&lt;a href=&#34;https://github.com/ethereum/go-ethereum/wiki/Connecting-to-the-network&#34;&gt;Connecting to the network&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;如何寻找对等节点&#34;&gt;如何寻找对等节点&lt;/h2&gt;&#xA;&lt;p&gt;在初始化时，geth会使用一组记录在源码中的bootstrap节点来连接。要指定这些节点，只需使用&lt;code&gt;--bootnodes&lt;/code&gt;选项，并使用逗号分隔参数，举例如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;geth --bootnodes enode://pubkey1@ip1:port1,enode://pubkey2@ip2:port2,enode://pubkey3@ip3:port3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;使用情况为：第一个节点已启动，并使用&lt;code&gt;admin.nodeInfo.enode&lt;/code&gt;获得其地址，在启动第二个节点时，直接加入&lt;code&gt;--bootnodes&lt;/code&gt;选项和第一个节点的地址作为参数，可以直接连接两个节点&lt;/p&gt;&#xA;&lt;h2 id=&#34;常见问题&#34;&gt;常见问题&lt;/h2&gt;&#xA;&lt;p&gt;无法连接的时候，常见的一些原因如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;本地时钟错误。以太坊连接需要一个准确的时钟，因此，需要检查操作系统的时间并和网络进行同步，不然，即使相差12秒也会造成连接失败。一个时间同步的命令例如：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ntpdate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gov&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;防火墙配置错误导致阻止了UDP连接。此时可以使用静态节点进行连接或使用&lt;code&gt;admin.addPeer()&lt;/code&gt;手动配置连接&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;若想使网络不被发现，可以在geth启动时使用&lt;code&gt;--nodiscover&lt;/code&gt;选项&lt;/p&gt;&#xA;&lt;h2 id=&#34;检查连接&#34;&gt;检查连接&lt;/h2&gt;&#xA;&lt;p&gt;为了检查有多少个节点已连接，&lt;code&gt;net&lt;/code&gt;模块提供了两个命令来查询已连接节点数量和是否处于监听状态&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;net&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;listening&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;net&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;peerCount&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;若想获取更多关于已连接节点的信息，诸如IP地址和端口号、支持的协议等，可以使用&lt;code&gt;admin.peers&lt;/code&gt;命令，会返回最近连接的节点列表。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;admin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;peers&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;a4de274d3a159e10c2c9a68c326511236381b84c9ec52e72ad732eb0b2b1a2277938f78593cdbe734e6002bf23114d434a085d260514ab336d4acdc312db671b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Geth/v0.9.14/linux/go1.4.2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;Caps&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;eth/60&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;RemoteAddress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;5.9.150.40:30301&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;LocalAddress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;192.168.0.28:39219&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Geth/v0.9.15/linux/go1.4.2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;Caps&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;eth/60&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;RemoteAddress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;52.16.188.185:30303&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;LocalAddress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;192.168.0.28:50995&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;f6ba1f1d9241d48138136ccf5baa6c2c8b008435a1c2bd009ca52fb8edbbc991eba36376beaee9d45f16d5dcbf2ed0bc23006c505d57ffcf70921bd94aa7a172&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pyethapp_dd52/v0.9.13/linux2/py2.7.9&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;Caps&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;eth/60, p2p/3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;RemoteAddress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;144.76.62.101:30303&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;LocalAddress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;192.168.0.28:40454&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;f4642fa65af50cfdea8fa7414a5def7bb7991478b768e296f5e4a54e8b995de102e0ceae2e826f293c481b5325f89be6d207b003382e18a8ecba66fbaf6416c0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;++eth/Zeppelin/Rascal/v0.9.14/Release/Darwin/clang/int&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;Caps&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;eth/60, shh/2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;RemoteAddress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;129.16.191.64:30303&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;LocalAddress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;192.168.0.28:39705&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;要检查geth使用的端口和允许节点的enode URL，如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>以太坊开发4-geth console命令</title>
      <link>http://localhost:1313/2019/geth-console-command/</link>
      <pubDate>Fri, 08 Mar 2019 10:27:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/geth-console-command/</guid>
      <description>&lt;p&gt;Geth Console是一个交互式的JavaScript执行环境，其中&lt;code&gt;&amp;gt;&lt;/code&gt;是命令提示符。在这个环境里也内置了一些用来操作以太坊的JavaScript对象，可以直接使用这些对象。这些对象主要包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;eth：包含一些跟操作区块链相关的方法；&lt;/li&gt;&#xA;&lt;li&gt;net：包含一些查看p2p网络状态的方法；&lt;/li&gt;&#xA;&lt;li&gt;admin：包含一些与管理节点相关的方法；&lt;/li&gt;&#xA;&lt;li&gt;miner：包含启动&amp;amp;停止挖矿的一些方法；&lt;/li&gt;&#xA;&lt;li&gt;personal：主要包含一些管理账户的方法；&lt;/li&gt;&#xA;&lt;li&gt;txpool：包含一些查看交易内存池的方法；&lt;/li&gt;&#xA;&lt;li&gt;web3：包含了以上对象，还包含一些单位换算的方法。&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>以太坊开发3-geth客户端命令</title>
      <link>http://localhost:1313/2019/geth-client-use/</link>
      <pubDate>Fri, 08 Mar 2019 09:26:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/geth-client-use/</guid>
      <description>&lt;p&gt;Geth是以太坊智能合约开发工具，是一个命令行工具，所以熟悉其命令参数有助于提高开发效率。本文是geth help的翻译，基于geth 1.8.11-stable版本。&lt;/p&gt;&#xA;&lt;p&gt;github的项目wiki也有一份命令说明：&lt;a href=&#34;https://github.com/ethereum/go-ethereum/wiki/Command-Line-Options&#34;&gt;Command Line Options&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;参数详解&#34;&gt;参数详解&lt;/h2&gt;&#xA;&lt;h3 id=&#34;命令用法&#34;&gt;命令用法&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;geth &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;选项&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; 命令 &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;命令选项&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;参数…&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;版本&#34;&gt;版本&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1.8.11-stable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;命令&#34;&gt;命令&lt;/h3&gt;&#xA;&lt;p&gt;即“命令用法”部分&lt;code&gt;命令&lt;/code&gt;字段的内容，是geth的主体功能&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;account    管理账户&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;attach     启动交互式JavaScript环境（连接到节点）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bug        上报bug Issues&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;console    启动交互式JavaScript环境&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;copydb     从文件夹创建本地链&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;dump       Dump（分析）一个特定的块存储&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;dumpconfig 显示配置值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt;     导出区块链到文件&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import     导入一个区块链文件&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;init       启动并初始化一个新的创世纪块&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;js         执行指定的JavaScript文件&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;多个&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;license    显示许可信息&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;makecache  生成ethash验证缓存&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;用于测试&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;makedag    生成ethash 挖矿DAG&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;用于测试&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;monitor    监控和可视化节点指标&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;removedb   删除区块链和状态数据库&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;version    打印版本号&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wallet     管理Ethereum预售钱包&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;help,h     显示一个命令或帮助一个命令列表&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;ethereum选项&#34;&gt;ETHEREUM选项&lt;/h3&gt;&#xA;&lt;p&gt;即”命令用法“部分&lt;code&gt;[选项]&lt;/code&gt;字段的内容&lt;/p&gt;</description>
    </item>
    <item>
      <title>以太坊开发2-创世区块文件genesis.json</title>
      <link>http://localhost:1313/2019/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%912-%E5%88%9B%E4%B8%96%E5%8C%BA%E5%9D%97%E6%96%87%E4%BB%B6genesis.json/</link>
      <pubDate>Thu, 07 Mar 2019 19:48:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%912-%E5%88%9B%E4%B8%96%E5%8C%BA%E5%9D%97%E6%96%87%E4%BB%B6genesis.json/</guid>
      <description>&lt;h2 id=&#34;文件说明&#34;&gt;文件说明&lt;/h2&gt;&#xA;&lt;p&gt;关于&lt;code&gt;genesis.json&lt;/code&gt;的官方说明位于两处&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ethereum/go-ethereum/wiki/Private-network&#34;&gt;Private network&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ethereum/go-ethereum/wiki/Connecting-to-the-network&#34;&gt;Connecting to the network&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;每条区块链都以创世区块开头，而&lt;code&gt;genesis.json&lt;/code&gt;正是创世区块的配置文件，它是区块链最重要的识别标志之一。实际上，每条区块链的创世区块文件都是唯一的，如果两条机器启动Geth时所选用的创世区块文件不同，就无法被识别为同一条区块链的成员。因此，同一条联盟链/私链中的所有节点必须使用同一份创世区块文件进行初始化配置。&lt;/p&gt;&#xA;&lt;h2 id=&#34;标准示例&#34;&gt;标准示例&lt;/h2&gt;&#xA;&lt;p&gt;一个创世区块文件&lt;code&gt;genesis.json&lt;/code&gt;的标准示例如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;chainId&amp;#34;&lt;/span&gt;: 15,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;homesteadBlock&amp;#34;&lt;/span&gt;: 0,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;eip155Block&amp;#34;&lt;/span&gt;: 0,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;eip158Block&amp;#34;&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;nonce&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;0x000000000000002a&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;difficulty&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;0x020000&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;mixhash&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;0x0000000000000000000000000000000000000000000000000000000000000000&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;coinbase&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;0x0000000000000000000000000000000000000000&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;0x00&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;parentHash&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;0x0000000000000000000000000000000000000000000000000000000000000000&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;extraData&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;0x&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;gasLimit&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;0x2fefd8&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;alloc&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;7df9a875a174b3bc565e6424a0050ebc1b2d1d82&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;balance&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;300000&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;f41c74c9ae680c1aa78f42e5647a62f353b7bdde&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;balance&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;400000&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h2 id=&#34;参数说明&#34;&gt;　参数说明&lt;/h2&gt;&#xA;&lt;p&gt;关于示例文件中各参数说明如下。首先config中的内容是区块链相关的基本配置参数。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;ChainId&lt;/code&gt; - identifies the current chain and is used for replay protection. You should set it to a unique value for your private chain.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;homesteadBlock&lt;/code&gt; - your chain won&amp;rsquo;t be undergoing the switch to Homestead, so leave this as &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;eip155Block&lt;/code&gt; - your chain won&amp;rsquo;t be hard-forking for these changes, so leave as &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;eip158Block&lt;/code&gt; - your chain won&amp;rsquo;t be hard-forking for these changes, so leave as &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;最重要的是链编号&lt;code&gt;ChainId&lt;/code&gt;，用于标识区块链，关于它更详细的说明见&lt;a href=&#34;https://github.com/ethereum/EIPs/blob/master/EIPS/eip-155.md&#34;&gt;EIP-155&lt;/a&gt;，Ethereum Improvement Proposals (&lt;a href=&#34;https://github.com/ethereum/EIPs&#34;&gt;EIPs&lt;/a&gt;)是以太坊改进建议，描述了以太坊平台的标准，包括核心协议规范，客户端API和智能合约标准。&lt;/p&gt;</description>
    </item>
    <item>
      <title>以太坊开发1-虚拟机搭建以太坊私链</title>
      <link>http://localhost:1313/2019/use-virtual-machine-builds-ethereum-private-chain/</link>
      <pubDate>Thu, 07 Mar 2019 14:53:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/use-virtual-machine-builds-ethereum-private-chain/</guid>
      <description>&lt;h2 id=&#34;一单虚拟机&#34;&gt;一、单虚拟机&lt;/h2&gt;&#xA;&lt;p&gt;最简单的方式是使用一个虚拟机，这也是在条件有限的情况下的最好选择。方法是在一台虚拟机上启用多个终端，每个终端使用不同的端口通信。步骤如下&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-创建节点文件&#34;&gt;1. 创建节点文件&lt;/h3&gt;&#xA;&lt;p&gt;在&lt;code&gt;~Desktop&lt;/code&gt;路径下创建NodeA、NodeB和NodeC三个文件夹，代表三个节点。在三个文件夹中分别创建&lt;code&gt;genesis.json&lt;/code&gt;文件&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-初始化创世区块&#34;&gt;2. 初始化创世区块&lt;/h3&gt;&#xA;&lt;p&gt;分别执行&lt;code&gt;geth init&lt;/code&gt;命令初始化创世区块&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;geth --datadir ~/Desktop/NodeA/dataA init genesis.json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;geth --datadir ~/Desktop/NodeB/dataB init genesis.json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;geth --datadir ~/Desktip/NodeC/dataC init genesis.json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;3-分别启动三个节点&#34;&gt;3. 分别启动三个节点&lt;/h3&gt;&#xA;&lt;p&gt;启动NodeA&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;geth --datadir ~/Desktop/NodeA/dataA --networkid &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt; --nodiscover console&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;默认的端口是30303，因为三个节点在同一个操作系统中，所以接下来启动其它两个节点时我们要指定使用其它的接口&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;geth --datadir ~/Desktop/NodeA/dataB --port &lt;span class=&#34;m&#34;&gt;30304&lt;/span&gt; --networkid &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt; --nodiscover console&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;geth --datadir ~/Desktop/NodeA/dataC --port &lt;span class=&#34;m&#34;&gt;30305&lt;/span&gt; --networkid &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt; --nodiscover console&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h3 id=&#34;4-连接各节点&#34;&gt;4. 连接各节点&lt;/h3&gt;&#xA;&lt;p&gt;这里就使用&lt;code&gt;admin.addPeers&lt;/code&gt;连接各节点就可以了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;二多虚拟机快速搭建&#34;&gt;二、多虚拟机快速搭建&lt;/h2&gt;&#xA;&lt;p&gt;最理想的方式是使用多台电脑，但是一般情况下实验条件不足，不过在电脑性能足够的情况下，可以开启多台虚拟机模拟这样的环境，这里的示例使用三台Ubuntu18.04 LTS系统的虚拟机。&lt;/p&gt;&#xA;&lt;p&gt;在走了一遍完整搭建流程后，精简不需要的步骤，将快速搭建的过程总结如下，如果想要查看详细的步骤和描述信息，请看第三部分。省略的步骤包括&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;更新软件源&lt;/li&gt;&#xA;&lt;li&gt;配置主机名&lt;/li&gt;&#xA;&lt;li&gt;配置地址解析&lt;/li&gt;&#xA;&lt;li&gt;同步时间&lt;/li&gt;&#xA;&lt;li&gt;配置Golang环境&lt;/li&gt;&#xA;&lt;li&gt;下载编译以太坊源码&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;正式搭建过程&#34;&gt;正式搭建过程&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安装网络工具&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blockchain-Based Platform Architecture for Industrial IoT</title>
      <link>http://localhost:1313/2019/blockchain-based-platform-architecture-for-industrial-iot/</link>
      <pubDate>Thu, 28 Feb 2019 10:50:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/blockchain-based-platform-architecture-for-industrial-iot/</guid>
      <description>&lt;p&gt;Author：Nikolay Teslya; Igor Ryabchikov&lt;/p&gt;&#xA;&lt;p&gt;Published in：2017 21st Conference of Open Innovations Association(FRUCT)&lt;/p&gt;&#xA;&lt;p&gt;Date of Conference: 6-10 Nov. &lt;strong&gt;2017&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;会议举办地：Helsinki, Finland&lt;/p&gt;&#xA;&lt;p&gt;被引量：11次&lt;/p&gt;&#xA;&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;&#xA;&lt;p&gt;机器人技术，物联网概念，大数据处理技术，自动化和分布式数字分类账技术的发展引发了第四次工业革命。新工业的主要问题之一是基于物联网的智能工厂内部组件以及工厂之间的互操作。这种互操作应该提供物联网参与者之间的信任;控制资源的分配（如维护时间，能源等）和成品。本文描述了集成物联网和区块链技术以解决这些问题的可能方法之一。为此，开发了一种结合了Smart-M3信息共享平台和区块链平台的架构。所提出的体系结构的一个主要特征是使用智能合约来处理和存储与智能空间组件之间的交互相关的信息。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blockchain Platforms Overview for Industrial IoT Purpose</title>
      <link>http://localhost:1313/2019/blockchain-platforms-overview-for-industrial-iot-purpose/</link>
      <pubDate>Wed, 27 Feb 2019 11:11:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/blockchain-platforms-overview-for-industrial-iot-purpose/</guid>
      <description>&lt;p&gt;Author：Nikolay Teslya; Igor Ryabchikov&lt;/p&gt;&#xA;&lt;p&gt;Published in：2018 22nd Conference of Open Innovations Association(FRUCT)&lt;/p&gt;&#xA;&lt;p&gt;Date of Conference: 15-18 May &lt;strong&gt;2018&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;会议举办地：Jyvaskyla, Finland&lt;/p&gt;&#xA;&lt;p&gt;被引量：1次&lt;/p&gt;&#xA;&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;&#xA;&lt;p&gt;如今已有很多可用区块链平台存在。但要集成到工业物联网的智能空间中，区块链平台不仅应支持代币交易，还应支持智能合约、容错共识机制，以及参与者创建和实施新区块和智能合约的地位的平等。本文分析了最常用的共识机制，公共（无权限）和私有（有权限）区块链的具体特征。还描述了满足IIoT平台开发要求的区块链平台。通过分析所得结果，可选择平台和特定模块来实现用于IIoT平台的区块链。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Decentralizing Privacy：Using Blockchain to Protect Personal Data</title>
      <link>http://localhost:1313/2019/decentralizing-privacyusing-blockchain-to-protect-personal-data/</link>
      <pubDate>Thu, 14 Feb 2019 09:50:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/decentralizing-privacyusing-blockchain-to-protect-personal-data/</guid>
      <description>&lt;p&gt;Zyskind G, Nathan O, Pentland A, et al. Decentralizing Privacy: Using Blockchain to Protect Personal Data[C]. ieee symposium on security and privacy, 2015: 180-184.&lt;/p&gt;&#xA;&lt;p&gt;DOI: &lt;a href=&#34;https://doi.org/10.1109/SPW.2015.27&#34;&gt;10.1109/SPW.2015.27&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;KeyWord: Protocols, Privacy, Data privacy, Online banking, Encryption, Compounds.&lt;/p&gt;&#xA;&lt;p&gt;注：部分插图经过重新绘制，部分来自原论文截图。&lt;/p&gt;&#xA;&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;&#xA;&lt;p&gt;当前的商业模式下，第三方收集和控制了大量的个人隐私，损害了用户权益，越来愈多的安全事件使得这一模式开始受到质疑。比特币证明了通过一个分布式的公有分类账在金融领域进行可信和可审计的计算是可行的。因此，本文提出了一种基于区块链的分布式个人数据管理系统，用于保证用户对个人数据的所有权和控制权。与比特币不同的是，本文提出的系统中，区块链交易不是金融交易，而是用于携带指令，如存储、查询和共享数据等，在文章的最后也会讨论区块链未来可能的发展。&lt;/p&gt;</description>
    </item>
    <item>
      <title>文献综述-区块链用于 IoT/IIoT：智能工厂案例</title>
      <link>http://localhost:1313/2019/blockchain-for-iot/iiota-smart-factory-case-study/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/blockchain-for-iot/iiota-smart-factory-case-study/</guid>
      <description>&lt;p&gt;随着物联网的高速发展，越来越多的智能设备接入到了人们的日常生活和工业生产当中。尤其在智能工厂领域，物联网设备的使用大幅提高了工厂自动化程度，并提供了更高的容错能力。然而，现有的集中式云存储与管理方式面临很大的安全隐患和性能瓶颈。学术与工业界目前致力于将区块链技术应用于车联网、能量网络和供应链方向，而忽视了智能工厂与区块链的结合。本文从区块链和物联网的可结合性出发，具体分析了智能工厂场景区块链技术的适用性。对现有的共识算法进行分类，总结分析在智能工厂场景中可做的改进。研究工厂实时数据的存储解决方案。列举了可能面临的安全问题和攻击方式，并提出使用智能合约来完善安全机制。从而为之后的实验研究奠定了基础。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-引言&#34;&gt;1. 引言&lt;/h2&gt;&#xA;&lt;p&gt;物联网是互联网概念的扩展，通过将具有独立功能的实体互联互通，可以为我们的生产生活带来巨大便利。自从物联网的概念提出以来，迅速应用到了智能家居、农业、医疗和工业等诸多领域，物联网在工业中的应用称为工业物联网。工业物联网是工业4.0的重要一部分，然而，随着终端设备数量的迅速增长，传统的基于云的中心化架构面临的部署和维护成本，向第三方支付的服务费用，以及性能、安全和隐私问题都迫切需要解决。同时，由于设备和生产过程的深度融合，恶意攻击所带来的危害也远远超出普通的互联网，甚至可能对人们的生命财产造成威胁。&lt;/p&gt;&#xA;&lt;p&gt;区块链是解决中心化带来的单点瓶颈和安全问题的有效手段。这项技术起源于2008年中本聪提出的比特币&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，它分布式的结构能有效避免单点问题，共识和链式结构带来的不可篡改性和通过智能合约实现的访问控制又能为物联网带来良好的安全与隐私保护。另外，智能合约还能便于设备进行一定的自动化交互。目前，许多人正在研究将其应用于物联网&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。然而，要实现这一目的还需解决一些问题：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;效率和安全：区块链的核心是共识算法，工作量证明(Proof of Work, PoW)则是使用最广泛的一种，它需要节点具有较高的算力，而物联网设备的相关性能往往是极为有限的。虽然消除对算力的需求可使区块链适用于物联网，但同时也失去了它带来的安全性。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;隐私：区块链虽然具有匿名特性，但采用如链接攻击等方式可以将行为与用户地址关联起来，从而破解用户真实身份，由于存储在区块链中的数据是公开可见的，一旦身份被获知，数据将完全泄露；物联网涉及大量的隐私数据，需要更加良好的隐私保护方案。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;吞吐量和数据存储：区块链共识采用洪泛的通信方式，因此具有一定的延迟，从而导致吞吐量较低。另外，网络中每个节点都要保存整个区块链的副本，由于区块链不断增长的链式结构，并不适合大量数据的存储。然而，物联网通常会产生大量实时数据，具有较高的存储和吞吐量需求。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;目前很多研究者都致力于解决以上问题，但在工业领域，大量研究集中在车联网&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;、能量网络&lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&#34;fnref:8&#34;&gt;&lt;a href=&#34;#fn:8&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;和供应链&lt;sup id=&#34;fnref:9&#34;&gt;&lt;a href=&#34;#fn:9&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;9&lt;/a&gt;&lt;/sup&gt;[^tian2016agrifood]方面，而较少分析和关注区块链在制造工厂内的适用性和解决方案。事实上，智能工厂作为工业4.0重要的一部分，区块链不仅在原材料和产品分销，个性化产品定制等方面可提供一定帮助，在提高工厂生产效率和数据安全方面，也是一种良好的解决方案。首先，区块链配合分布式存储系统消除对中心化的云服务商的依赖，在性能、安全和隐私方面得到改进；其次，借助智能合约，可以完成对工厂大量物联网终端设备的访问控制；并且实现对生产的动态调整，完成一定的自动化与智能化。&lt;/p&gt;&#xA;&lt;p&gt;区块链和制造工厂结合的相关研究&lt;sup id=&#34;fnref:10&#34;&gt;&lt;a href=&#34;#fn:10&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;10&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&#34;fnref:11&#34;&gt;&lt;a href=&#34;#fn:11&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;11&lt;/a&gt;&lt;/sup&gt;，和智能家居场景&lt;sup id=&#34;fnref:12&#34;&gt;&lt;a href=&#34;#fn:12&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;12&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&#34;fnref:13&#34;&gt;&lt;a href=&#34;#fn:13&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;13&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&#34;fnref:14&#34;&gt;&lt;a href=&#34;#fn:14&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;14&lt;/a&gt;&lt;/sup&gt;具有一定的相似性。这两个场景的研究通常集中于细粒度的访问控制和安全框架，然而，大部分并不深入，只是区块链和分布式存储技术的简单结合。另外，工业物联网同普通的物联网在诸多方面有着区别，如设备的自动化，低时延高可靠性的要求。但是，两者都更适合使用私有区块链而非公有区块链。&lt;/p&gt;&#xA;&lt;p&gt;本文旨在总结物联网和区块链结合的众多已有方案，分析它们的优势与不足，并在制造工厂场景下，分析各方面可做的改进，存储方案的选择和访问控制方案的设计。从而提高工厂的生产效率，降低其成本，为下一步的概念验证和实际的大规模实施做理论准备。&lt;/p&gt;&#xA;&lt;p&gt;本文其余部分安排如下。第二部分介绍相关共识方案并分析工厂场景下共识可做的优化。第三部分介绍待选的存储方案，并比较它们在工厂场景的适用性。第四部分详述可能可能面临的攻击和访问控制的方案，同时包括对隐私问题的讨论。第五部分讨论其它的补充机制。总结在最后的第六部分。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-共识&#34;&gt;2. 共识&lt;/h2&gt;&#xA;&lt;p&gt;区块链技术的核心是共识，广义上讲，它是一组参与各方能达成一致所需遵守的规则。在区块链中，共识确保了节点和交易的可信，并解决了双花问题。迄今为止，已提出了种类繁多的共识协议，它们达成一致的速度有快有慢，有的同时适用于公有和私有区块链，有的则只适用于私有区块链 ,有些是通用类型的共识，有些只针对特定的需求和场景。以下我们先介绍各种不同类型的共识，然后再根据工厂场景进行挑选，并提出可做的改进。&lt;/p&gt;&#xA;&lt;h3 id=&#34;21-共识分类&#34;&gt;2.1 共识分类&lt;/h3&gt;&#xA;&lt;p&gt;自区块链第一次出现[1]以来，使用最广泛的共识机制一直是工作量证明，代表性的应用有比特币、以太坊和莱特币等。PoW中，为了添加新块，节点必须证明自己做了一定的工作，这一工作一般是大量的哈希运算，无论是计算依赖（Bitcoin PoW）还是存储依赖（Ethash），都需要消耗电力资源，带来资源浪费和高成本，但却可以在无信任网络中实施。PoW共识中的交易速度较慢，另外，还需要激励机制来鼓励矿工参与维护网络。&lt;/p&gt;&#xA;&lt;p&gt;与PoW不同，权益证明（Proof-of-Stake, PoS）的核心是在网络中拥有更多权益的人具有更小的攻击可能性，这个权益指节点持有的代币数量及持有代币的时间。PoS消除了对算力的需求，但可能出现最富者支配记账权的情况，同时，还存在“无厉害关系(nothing at stake)”问题，即在出现分叉的情况下，权益持有者有动机在分叉形成的两条链上都下赌注，更有可能出现双花问题。PoS的代表性应用主要是Cardano、NXT、Tezos和未来的以太坊。&lt;/p&gt;&#xA;&lt;p&gt;委托权益证明(Delegate Proof of Stake, DPoS)会选举一定数量的节点进行交易验证和区块添加，投票的权重取决于节点的权益大小，并且，投票选举的验证者出现“作恶”情况也可以通过重新投票随时进行替换。DPoS能以更高的速度形成区块，并且在单位时间处理大量的交易，共识运行的效率更高。Daniel Larimer在2014年设计了它，并在BitShares中首次使用，后来又在Steemit和EOS项目中使用该共识，其它如TRON也使用DPoS方案。以上三种共识是公有区块链中最常使用的共识，但它们也适用于私有区块链。&lt;/p&gt;&#xA;&lt;p&gt;在私有区块链中，由于部分节点可以相互信任，参与验证的节点数减少，从而交易和区块生成的速度可以加快。拜占庭容错(Byzantine Fault Tolerance, BFT)正是针对这种场景提出的共识。BFT可以容忍小于1/3个恶意或无效节点的存在。事实上，BFT是一个大的分类，许多共识都可以划归到BFT的范围内，主要包括授权拜占庭容错(Delegated Byzantine Fault Tolerance, DBFT)，实用拜占庭容错(Practical Byzantine Fault Tolerance, PBFT)，联邦拜占庭协议(Federated Byzantine Agreement, FBA)和其它的一些共识协议。我们将它们适用的区块链类型和主要应用案例总结如表3.1所示。&lt;/p&gt;&#xA;&lt;p&gt;表2.1 BFT类共识&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;公有/私有区块链&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;私有区块链&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;DBFT：NEO, TON&lt;br&gt;FBA：Stellar, Ripple&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;PBFT：Hyperledger, Chain  &lt;br&gt;SIEVE：Hyperledger beta  &lt;br&gt;Round Robin：Multichain, Tendermint  &lt;br&gt;Loopchain Fault  Tolerance(LFT)：ICON  Cross-Fault  &lt;br&gt;Tolerance(XFT)：Hyperledger  beta&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;除以上几种主流的共识外，还有众多用于特定任务或特定场景的共识如Proof-of-Activiy(PoA)，Proof-of-Elapsed-Time(PoET)，Proof-of-Authority(PoA)和Proof-of-Burn等。以上共识建立的区块链都是链式结构，实际上，为了改善吞吐量等问题，人们还提出了图状结构的“区块链”，如IOTA的DAG区块链和HashGraph。而无论是链式还是图状的区块链共识，都消除或部分消除了PoW对算力的依赖问题，并且在吞吐量、扩展性等方面进行了相关的改进，使其适用于特定的或更广泛的领域。同时，由于技术的飞速发展，提出时间较晚的共识往往具有更多更好的特性。&lt;/p&gt;&#xA;&lt;h3 id=&#34;22-共识需求及改进&#34;&gt;2.2 共识需求及改进&lt;/h3&gt;&#xA;&lt;p&gt;目前已存在不少专门针对物联网开发的区块链平台，市场占有率较高的几位分别是：使用DAG结构的IOTA；使用PoS协议的量子链QTUM；使用DPoS的EOS；使用PoW和PoS混合的沃尔顿链Waltonchain以及使用权威证明(Proof of Authority, PoA)的VeChain。这些平台的市场占有情况说明了它们所使用的共识都是一定程度上适用于物联网的，基于这些协议的特性，以及制造工厂的相关背景，我们总结单个制造工厂中的共识需要的改进：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Internet of Smart Things-IoST</title>
      <link>http://localhost:1313/2019/internet-of-smart-things-iost/</link>
      <pubDate>Thu, 17 Jan 2019 10:06:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/internet-of-smart-things-iost/</guid>
      <description>&lt;p&gt;Author：Mayra Samaniego, Ralph Deters&lt;/p&gt;&#xA;&lt;p&gt;Published in：2017 IEEE International Conference on Cognitive Computing (ICCC)&lt;/p&gt;&#xA;&lt;p&gt;Date of Conference: 25-30 June 2017&lt;/p&gt;&#xA;&lt;p&gt;会议级别：不知道&lt;/p&gt;&#xA;&lt;p&gt;被引量：11次&lt;/p&gt;&#xA;&lt;p&gt;keywords：IoT; Management; Blockchain; Multichain;Smart Things; Autonomy;Self-inferencing; Self-monitoring;Fog; Edge.&lt;/p&gt;&#xA;&lt;br/&gt;&#xA;&lt;h3 id=&#34;摘要&#34;&gt;摘要&lt;/h3&gt;&#xA;&lt;p&gt;构成物联网的大量异构设备需要有效的资源管理。随着雾计算的出现，一些管理任务可以下移到物联网的边缘，更靠近物理设备。建立在雾网络上的区块链可以处理一些物联网的管理任务，如通信、存储和身份验证。这种情况下，以及超越了原来对物联网中Things的定义，可以称之为“Smart Things&amp;quot;。Smart Things提供基于CLIPS编程语言的人工智能（AI）功能，以实现自我推理和自我监控。这项工作使用私链构建工具Multichain通过读写块中信息来达成Smart Things之间的通信。本文评估了Edison Arduino板上部署的Smart Things以及雾网络上部署的的Multichain网络。&lt;/p&gt;</description>
    </item>
    <item>
      <title>区块链学习5-ETC和ETH</title>
      <link>http://localhost:1313/2019/ethereum-and-ethereum-classic/</link>
      <pubDate>Wed, 16 Jan 2019 10:48:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/ethereum-and-ethereum-classic/</guid>
      <description>&lt;p&gt;最近ETC遭受疑似51%攻击的影响很大，虽然最后的结果还没出来，仍不确定是真的遭受了51%攻击，还是之前官方所称的ASIC矿机测试带来的问题。但我们现在默认以前一种情况分析。&lt;/p&gt;&#xA;&lt;p&gt;有&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU2MTE1NDk2Mg==&amp;amp;mid=2247491744&amp;amp;idx=1&amp;amp;sn=a425dae6bb7e083110b3150b758a3131&amp;amp;chksm=fc7fbe5dcb08374b4459ad93a783beeeff705939b312ca20f3f9d3e70af97effa596e38d7854&amp;amp;mpshare=1&amp;amp;scene=23&amp;amp;srcid=0115yOkGBCrn5L7SENkeTO5r#rd&#34;&gt;文章&lt;/a&gt;分析称造成该攻击的直接原因是“ETC市值下降，网络算力萎缩，使攻击者能较容易地通过租赁算力的方式发起攻击”。同时究其本质是PoW共识算法面临的风险。给出的建议包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;立刻抛弃PoW，改为PoS&lt;/li&gt;&#xA;&lt;li&gt;构建于其它网络之上（ERC20）&lt;/li&gt;&#xA;&lt;li&gt;使用Interchain linking&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;所以我们还就算力问题来看这件事。首先需要明白ETC并不是以太坊，而是“以太坊经典”，ETH才是以太坊，两者的区别在于&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ETH是Ethereum，正式的以太坊，市值第二大币种&lt;/li&gt;&#xA;&lt;li&gt;ETC是Ethereum Classic，以太坊经典，The DAO事件后以太坊硬分叉的产物&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;the-dao事件&#34;&gt;The DAO事件&lt;/h3&gt;&#xA;&lt;p&gt;DAO全称是Decentralized Autonomous Organization，即“去中心化的自治组织”, 本质就是众筹。而 The DAO则是其中最大的一个，被誉为“DAO之母”，The DAO筹集到了1170万以太币（价值约2.45亿美元），并创造了众筹历史之最。&lt;/p&gt;&#xA;&lt;p&gt;2016年4月30日，The DAO上线开始为期28天的全球众筹；&lt;/p&gt;&#xA;&lt;p&gt;2016年5月10日，10天时间融得以太币的价值已达到3400万美元；&lt;/p&gt;&#xA;&lt;p&gt;2016年5月15日，众筹金额超过1亿美元；&lt;/p&gt;&#xA;&lt;p&gt;2016年5月28日，众筹结束，融得超过1150万个以太币，相当于超过1.5亿美元价值，成为全球历史上最大金额众筹项目。同日，The DAO开始在各大数字货币交易所进行开放交易；&lt;/p&gt;&#xA;&lt;p&gt;2016年6月9日，以太坊开发人员Peter Vessenes指出The DAO存在递归调用漏洞；&lt;/p&gt;&#xA;&lt;p&gt;2016年6月14日，修复方案被提交，等到The DAO成员的审核；&lt;/p&gt;&#xA;&lt;p&gt;2016年6月16日，递归调用问题再次被提及；&lt;/p&gt;&#xA;&lt;p&gt;2016年6月17日，黑客发起针对The DAO智能合约多个漏洞的攻击，其中也包含了递归调用漏洞，并向一个匿名地址转移了3600万个以太币，几乎占据了The DAO众筹总量1150个的三分之一。受制于The DAO的28天锁定期原则，黑客需要等到7月14日才能对这部分资金进行转移。当天以太坊停止了对所有交易的验证，此行为被社区诟病为“中心化”干涉，违背区块链本意；同时以太币币价大跌，一举从145元人民币跌落至68元人民币。&lt;/p&gt;&#xA;&lt;p&gt;2016年6月18日，开放交易验证后，社区号召大家通过发送大量垃圾交易阻塞交易验证的形式减缓黑客的继续偷盗；同时白帽通过使用与黑客同样的方法将剩余2/3未被盗取资金转移到安全账户；&lt;/p&gt;&#xA;&lt;p&gt;2016年6月24日，以太坊社区提交了软分叉提案，希望通过阻止所有人从The DAO中提取资金，为找回被盗资金争取时间；&lt;/p&gt;&#xA;&lt;p&gt;2016年6月28日，Felix Lange指出软分叉提案存在DoS攻击风险，能够让黑客伪造gas，并通过广播大量无效却标有高价gas的智能合约，吸引矿工验证它们，从而驱使整个区块不能处理真实有效的交易；以太币币价从逐渐回升到的96元人民币再次下跌至76元，并进入下跌通道。&lt;/p&gt;&#xA;&lt;p&gt;2016年6月30日，以太坊创始人Vitalik Buterin提出硬分叉设想；&lt;/p&gt;&#xA;&lt;p&gt;2016年7月15日，具体硬分叉方案公布，建立退币合约，但7月21日之后黑客将可以进一步通过分离创造子The DAO，造成所盗取资金不被退币合约影响。因此7月21日将成为硬分叉执行的最终期限。&lt;/p&gt;&#xA;&lt;p&gt;2016年7月21日，超过&lt;code&gt;85%&lt;/code&gt;的算力支持硬分叉，以太坊硬分叉成功。&lt;/p&gt;&#xA;&lt;h3 id=&#34;etc的诞生&#34;&gt;ETC的诞生&lt;/h3&gt;&#xA;&lt;p&gt;关于The DAO事件，有人认为&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;被盗是因为这个项目存在漏洞的原因，根本就不是以太币的事，甚至跟以太币压根就没什么关系。可是这个项目（THE DAO）是以太坊基金会和 V 神这些核心人员参与的，他们自己的币被盗了当然不能就这样算了，所以搞了一个硬分叉，把被盗的币找了回来并且宣布硬分叉之后的 ETH 才是真正的以太币，分叉之前的那些币都不算数了，那么挖矿的矿工们也需要使用升级后的挖矿程序在崭新的一条链上挖矿。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;不管这种想法如何，最终的结果都是ETC成了被抛弃者，但它为什么没有消失呢？&lt;/p&gt;&#xA;&lt;p&gt;从经济效益上看，矿工在旧链上挖出的 “旧版” 以太币几乎没有任何价值，不仅在交易所里无法交易，而且因为旧链生死未卜，没有人愿意担风险买入旧版币。矿工没有了经济来源，旧链消失也只是时间问题了。&lt;/p&gt;&#xA;&lt;p&gt;之前在其他的区块链上也出现过硬分叉的情况，当时绝大多数矿工都切换到新链上，旧链也就自动消亡了。可这次以太坊硬分叉却不同，由于存在分歧，有一部分矿工还继续维持着旧链（在旧链、旧的挖矿程序上维持算力），因此旧链并未即刻消失，还在顽强地活着。&lt;/p&gt;&#xA;&lt;p&gt;这些人拥有坚定信仰、他们认为不能为了一己私利就随意的篡改代码（指硬分叉事件），代码既是法律、一旦生效任何人（包括创始人和以太坊基金会）也没有权利去更改它。 这些人自称是坚定的去中心化实践者，宁可影响收益、也不愿意违背自己的信仰。&lt;/p&gt;&#xA;&lt;p&gt;就在旧链风雨飘摇之际，全球最大的以太坊交易平台 Poloniex(P 网)率先地宣布开始交易旧版以太币。为和新版以太币 ETH 区别，旧币代号为 ETC(EthereumClassic，经典以太坊)。ETC 由此具有了流通价值，因为价格极低，有愿意冒险的投资 (机) 人买入，矿工们的生计得以为继。后来，相继有更多的交易所开始支持ETC的交易。&lt;/p&gt;</description>
    </item>
    <item>
      <title>BlockChain：A Distributed Solution to Automotive Security and Privacy</title>
      <link>http://localhost:1313/2019/blockchaina-distributed-solution-to-automotive-security-and-privacy/</link>
      <pubDate>Tue, 15 Jan 2019 19:40:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/blockchaina-distributed-solution-to-automotive-security-and-privacy/</guid>
      <description>&lt;h3 id=&#34;abstract&#34;&gt;Abstract&lt;/h3&gt;&#xA;&lt;p&gt;智能车辆互联提供了一系列先进的服务，这有益于车主、运输当局、车辆制造商和其它服务提供者。但这也可能把智能汽车暴露在一系列安全和隐私威胁之下，如位置追踪或远程劫持车辆。论文谈论了区块链技术，这是解决上述问题的可能方案。论文提出了一个基于区块链的架构来保护用户隐私和增加车辆自治系统的安全性。无线远程软件更新和其他新兴服务（例如动态车辆保险费）用于说明所提出的安全架构的功效。最后还定性地论证了该架构对常见安全攻击的弹性。&lt;/p&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;智能汽车越来越多的联网或连到其它系统从而使它面临许多安全问题，不仅仅是对智能车辆本身还对路上行人有威胁。人们能通过无线接口远程控制智能车辆核心功能，关于隐私数据的存储和交换也使其面临新的隐私问题。&lt;/p&gt;&#xA;&lt;p&gt;同时，旧的安全手段因为下面的问题不能用于该系统。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;中心化&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;当前架构依赖于中心服务器，面临性能瓶颈和单点失效问题。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;隐私缺失&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;当前通信架构基本不考虑用户隐私，不经用户运行获取所有车辆数据并提供广告这些不想要的东西。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;安全威胁&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;自动车辆的自动化功能越来越多，由安全漏洞导致的故障就可能威胁驾驶者和行人&lt;/p&gt;&#xA;&lt;p&gt;区块链因为它拥有它的安全性，数据不可变性和隐私性等特性成为解决智能车辆问题的一个可行方案。提到了以太坊平台和使用比特币作为底层支付手段保证隐私的电动车辆充电平台BlockCharge。也能通过以太坊区块链设计一个用于车辆属主和服务提供者之间安全和隐私的智能合约。作者之前还写了一篇文章介绍了一个用于物联网的优化的区块链实例叫轻量级可扩展区块链（LSB）&lt;/p&gt;&#xA;&lt;p&gt;本文提出了一个基于区块链的安全和隐私架构，用于智能车辆自治系统。智能车辆、原始设备制造商和服务提供者一起形成一个彼此之间可以相互通信的覆盖网络。这一架构建立在LSB之上，覆盖网络中的节点是成簇的，只有簇首（CH）可以管理区块链和执行核心功能，被命名为overlay block managers(OBMs)。交易的广播和验证都由它完成，从而取代了中心服务器的作用。为了保护隐私，每个智能车辆还配备了车内存储用于存隐私敏感的数据，车辆属主可以定义哪些数据提供给第三方换取更方便的服务，哪些只能存在本地。&lt;/p&gt;&#xA;&lt;p&gt;覆盖网络中的智能车辆是移动的，与OBM的距离增加会增加延迟，所以提出使用软切换的方式保证智能车辆始终连到离他最近的OBM。&lt;/p&gt;&#xA;&lt;p&gt;覆盖网络中的通信使用非对称加密，从而保证安全性。&lt;/p&gt;&#xA;&lt;h3 id=&#34;lsb概述&#34;&gt;LSB概述&lt;/h3&gt;&#xA;&lt;p&gt;传统区块链网络面临a)全网广播的高负载和高开销，b)因为要全网广播，节点增加，数据包也增加，不能无限扩展，c)吞吐量的限制三个问题，于是提出了LSB&lt;/p&gt;&#xA;&lt;p&gt;LSB主要是用一个序列的块生成过程取代了计算密集的工作量难题，每个节点在特定时间间隔只被允许存一个块，并且对网络节点进行簇划分，只由簇首对区块链管理，从而解决扩展性问题，然后用distributed throughput management（DTM）动态调整吞吐量。使用一个分布式可信算法减少块验证时间。&lt;/p&gt;&#xA;&lt;p&gt;列举了两类型交易，只有发送者的单签名和同时有发送者接收者的多签名。交易广播到覆盖网络里，被OBM验证有效后被打包的block里，多签名的会被OBM和它维护的整个簇的公钥列表做匹配，匹配到的话直接交付，没匹配给其它OBM。&lt;/p&gt;&#xA;&lt;h3 id=&#34;基于区块链的架构&#34;&gt;基于区块链的架构&lt;/h3&gt;&#xA;&lt;p&gt;这部分描述这个用于智能车辆安全隐私的架构的细节。架构主体是覆盖网络，其中公链被节点管理，节点包括智能车辆、原始车辆制造商、汽车装配线、软件提供者、云存储提供者和用户的移动设备。整个架构如图4。&lt;/p&gt;&#xA;&lt;p&gt;每个车辆有无线接口和车内存储，无线接口用来连到覆盖网络，车内存储用来存隐私数据。车辆以预定义的时间间隔生成单签名交易，其中包含车内存储的哈希值。这个交易发送到车辆关联的OBM并被存到链里。车内存储的哈希值用于以后验证存储未被改变，同时由于车内存储的容量限制，可以考虑把备份存在属主智能家庭里。备份数据周期性的发送智能家庭的存储里，备份数据的哈希指也被存到链里。&lt;/p&gt;&#xA;&lt;p&gt;交易被OBM验证和广播，不仅验证当前块的有效，还验证前一个块是否还在链里。每次交易都改变公钥提供了高隐私性，但有些时候却需要确认公钥的属主是不是某个实体，比如设备制造商提供服务时需要确认提供者是制造商。然后这里又引入了第三方证书机构。。。&lt;/p&gt;&#xA;&lt;p&gt;智能车辆在覆盖网络中的行为通过OBM完成，当它移动时造成的延迟通过软切换完成（好巧，刚在新一代网络这门课里学了软切换）。车辆到新位置时通过测量和相邻的所有OBM的延迟，选一个延迟最小的OBM，然后更新新OBM的公钥列表以便别的节点能找到它，之后断开和旧OBM的连接，并清除在旧OBM公钥列表里的它自己。如果车辆找不到新OBM，因为可能各簇间太分散了，这时维持旧OBM。&lt;/p&gt;&#xA;&lt;h3 id=&#34;application&#34;&gt;Application&lt;/h3&gt;&#xA;&lt;p&gt;讨论这个架构的一些应用&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;远程软件更新&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;车辆控制系统的软件更新或bug修复通过一种叫wireless remote software update (WRSU)的机制完成。这一机制在车辆开发、组装、车辆服务中心、自己家都有执行，这一机制的安全性是个大问题，因为它需要对车辆的完全控制。当前的安全架构是中心化的，就比如特斯拉用一个VPN完成远程软件更新，但车辆数多时，这一个架构的扩展性是个问题，并且前面提到的隐私问题这一架构也没办法解决。&lt;/p&gt;&#xA;&lt;p&gt;但本文的架构能解决这个问题。OEM（原始设备制造商）把软件更新放在云里，然后为每个车辆在云里建一个账户，分配公私钥对，用于车辆进行软件更新的授权和验证。&lt;/p&gt;&#xA;&lt;p&gt;服务提供者把新版本存在云里，然后建一个多签名交易，自己的公钥和新版本软件的哈希值都存在交易里，车辆可以通过验证哈希值确认软件未被篡改，把OEM公钥放进去然后发给OBM。OBM广播并按流程交付OEM，OEM收到后验证，验证无误广播给所有OBM，所有OBM通知各自管理的簇成员有新更新了。智能车辆通过验证相应OEM的公钥字段做验证，然后通过公私钥对从云下载更新，最后通过哈希值判断新版本软件的完整性。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;保险&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;现在的车险很灵活，他们会收集数据评估驾驶行为。本文架构可以用在这个。保险公司在云端建一个存储库，给用户开个账户然后分配公私钥对，用户将相关数据存在保险公司的云里，保险公司凭这个评估用户驾驶行为。用户凭借自己对车内存储的隐私数据的控制决定哪些给保险公司看，同时，保险公司也可以通过公链中车内存储的哈希值判断用户没擅自改数据。&lt;/p&gt;&#xA;&lt;p&gt;用户可能不再用保险公司的服务或卖车了，这时保险公司把用户账户和数据从云移除。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;电动汽车和智能充电服务&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;和保险类似，电动汽车多了，充电桩跟不上，通过收集用户数据可以调整充电时间使之最适合用户。本文架构用于只开放需要的隐私数据给服务提供者换取想要的服务。这些服务提供者可以作为节点加入覆盖网络。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;共享汽车&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;这一领域中车辆位置、车解锁使用、支付这些过程通过新架构给一个安全保证。&lt;/p&gt;&#xA;&lt;h3 id=&#34;安全和隐私分析&#34;&gt;安全和隐私分析&lt;/h3&gt;&#xA;&lt;p&gt;是新架构可能遇到的一些安全和隐私问题&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;隐私&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过把地址和用户行为相关联可能推断出用户身份。可以通过每次交易变化密钥避免这一问题。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;安全&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;数据哈希值的使用保证了数据完整性。&lt;/p&gt;&#xA;&lt;p&gt;加密手段的使用保证了保密性。&lt;/p&gt;&#xA;&lt;p&gt;OBM管理簇成员避免了流量攻击。&lt;/p&gt;&#xA;&lt;p&gt;数字签名确认了数据来源可靠。&lt;/p&gt;&#xA;&lt;h3 id=&#34;未来研究方向&#34;&gt;未来研究方向&lt;/h3&gt;&#xA;&lt;p&gt;密钥管理：因为架构里涉及很多密钥对&lt;/p&gt;&#xA;&lt;p&gt;数据缓存：车辆从云下载数据造成开销与延迟，OBM缓存可以解决这一问题，和Decentralized Caching for Content Delivery Based on Blockchain这篇结合食用更佳&lt;/p&gt;&#xA;&lt;p&gt;应用：这一架构适合更多的应用&lt;/p&gt;&#xA;&lt;p&gt;移动：软切换其实并不是最好方式，可以想想其它办法。&lt;/p&gt;&#xA;&lt;h3 id=&#34;结论&#34;&gt;结论&lt;/h3&gt;&#xA;&lt;p&gt;提出一个基于区块链的架构，用于智能车辆安全与隐私。并分析了其在一些场景中的应用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>背景调查4-区块链与智能工厂</title>
      <link>http://localhost:1313/2019/blockchain-for-smart-factory/</link>
      <pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/blockchain-for-smart-factory/</guid>
      <description>&lt;h2 id=&#34;1-背景&#34;&gt;1. 背景&lt;/h2&gt;&#xA;&lt;p&gt;传统工厂向智能工厂转变是为了提高生产和管理效率，并高度灵活地适应不断变化的生产要求&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。这一目的的达成部分依赖于大量来自于制造设备，工业生产流程，工厂运行等过程的数据收集。为了完成这样的收集过程，工厂中部署的终端设备节点数量和网络规模不断扩大，各种新兴技术如 3D打印，AR/VR，CPS，IoT 和边缘计算等不断集成。传统的中心化架构无法再为这样庞大的系统提供有效支持，工厂的通信体系结构因此需要转变为涉及工业流程所有实体的分布式体系结构。区块链技术是可选的解决方案之一，其优点包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;分布式应用。具有较大计算负载的工业应用依赖于昂贵的集中式服务器，采用区块链技术，可以利用去中心化应用(dapp)分担计算负载，有效减少运维成本，提升用户体验。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;软/固件更新。由于安全问题更新工厂中的 IIoT 设备十分常见，通常情况下，更新过程需要在遍布工厂的众多设备中手动执行。使用区块链可以简化这一繁琐而低效的更新流程，将软件更新同时分发给尽可能多的智能设备，并同时保证完整性和安全性。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;信任关系。工厂运行过程中，与合作伙伴、设备制造商、原材料提供商、服务提供商甚至政府之间的交互都是必不可少的，这些交互往往基于对所收集数据真实性的信任。区块链的不可篡改特性，可以提供一种验证问责机制，从而增加信任。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;信息平台。智能工厂还往往涉及附加制造、大数据、云或边缘计算、IIoT、CPS、集成系统、机器人、网络安全等诸多技术的集成使用，这些技术可以从作为一个统一的信息交换平台的区块链的部署中受益。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;垂直与水平集成。智能工厂内部各系统如 ERP 和 MES，或工厂各部门和上下级之间的垂直整合，以及供应商、工厂、用户等供应链上下游的水平整合，是工业4.0的核心之一。区块链能为这两种整合提供良好的解决方案。首先，在垂直整合中，工厂中部署的多个系统自动收集信息并将其发送到价值链的任何相关部分（例如设计团队或操作工人）。区块链可以通过提供一个公共可信的数据及货币平台帮助垂直整合。水平整合即供应链，区块链可辅助达成制造商、供应商、客户等供应链涉及实体间的信任，确保产品安全可靠。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;访问控制。随着终端设备数量的增加，访问控制同样是一个必须解决的问题。传统的访问控制方式往往存在各种各样的不足。区块链是一种良好的解决方案。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;问题1：智能工厂涉及的设备数量其实并没有大到无法承受，传统中心化的云为什么不使用？&lt;/p&gt;&#xA;&lt;p&gt;区块链固有的解决信任问题的优势，厂商对云服务提供商的不信任等。&lt;/p&gt;&#xA;&lt;p&gt;问题2：为什么不用替代性的分布式架构，如分布式数据库技术？&lt;/p&gt;&#xA;&lt;p&gt;区块链就是一种分布式数据库。&lt;/p&gt;&#xA;&lt;p&gt;问题3：区块链出现之前，这一方向对基于云的中心化架构的替代方案是什么？&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-需解决的问题&#34;&gt;2. 需解决的问题&lt;/h2&gt;&#xA;&lt;p&gt;这些问题主要包括三个方面：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;性能上：能源效率，算力，延迟，吞吐量&lt;/li&gt;&#xA;&lt;li&gt;数据管理：存储&lt;/li&gt;&#xA;&lt;li&gt;安全上：数据隐私，身份认证，数据完整性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;具体每部分总结如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;数据隐私： 包括1）节点身份的隐私；2）区块链中交易数据的隐私。节点身份可以通过诸如链接攻击获取，而区块链中的数据本身就是透明的。但是，在工业场景中，为了避免向竞争对手泄露关键数据，匿名的需求确实存在。对节点身份的链接攻击现在主要依靠密码学上的混淆技术抵御。另外，BSeIn中通过基于属性的数字签名（ABS）也实现了匿名。交易数据的隐私可以简单的通过发起交易前先加密保证，或者通过访问控制机制保证实体对区块链数据的访问和写入权限。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;身份认证：认证是访问控制的前提，实际上，认证和访问控制是解决 IIoT 中安全和隐私问题的主要手段。传统方式中，认证通过证书颁发机构完成，访问控制也通过指定节点负责授权允许访问相关设备和资源实现。但是这些中心化的机构具有较大的安全隐患，信任度与区块链方案相比有较大差距。区块链中访问控制方案通常利用智能合约完成，有些也会使用区块结果或共识过程等。&lt;/p&gt;&#xA;&lt;p&gt;总而言之，隐私和安全问题的解决，很大程度依赖于认证和访问控制的方案。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;数据完整性：对于 IIoT 系统来讲，保证从 IIoT 设备收集的信息没有被修改是至关重要的，因为不正确或恶意的数据可能会影响工业系统的运行。区块链的不可篡改性实际上可以保证数据完整性，另外，由于区块链存储的高花费，采用其它中心化或分布式的存储方案时，保存数据的哈希是一种常用的保证数据完整性的方式。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;存储：随着 IIoT 设备执行交易，区块链不断增长，传统的资源约束 IIoT 设备甚至无法管理区块链的一小部分。需研究区块链压缩技术或其它技术。另外，IIoT 设备收集的大量数据也不应存储在区块链中，使用什么样的存储方案值得研究。关于存储的问题有过详细的研究和总结。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;能源效率：由于某些 IIoT 设备依靠电池来运行，因此必须最小化功耗。然而，区块链通常是耗电的，主要是由于采矿和 P2P 通信。边缘设备也必须连续通电并执行计算密集的复杂加密操作。此外，必须注意的是，尽管进行了可能的能耗优化，当前的资源约束 IIoT 节点通常还是无法处理挖矿任务，因此它们通常依赖于充当区块链代理的中间网关。在采矿方面，已经提出了&lt;strong&gt;不同的共识机制&lt;/strong&gt;来开发比传统 PoW 方案更环保的替代方案，但还需要进一步的研究。另外，一些作者已经提出了像&lt;strong&gt;迷你区块链&lt;/strong&gt;这样的替代方案，这有助于降低节点的计算要求。值得一提的是，&lt;strong&gt;高效哈希算法&lt;/strong&gt;可以帮助延长IIoT设备的电池寿命：尽管由于比特币，SHA-256 可能是最流行的哈希算法，但最近的替代品如 Scrypt 或 X11更快，因此他们可能可以减少采矿能耗。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;算力：一些 IIoT 设备由于其有限的计算能力或其功率限制而无法实现复杂的安全机制。基于 RSA 的加密可能不是最适合资源约束的 IIoT 设备，因此应该研究其他非对称加密机制。此外，由于量子计算在打破传统的非对称加密算法方面的进步，应该考虑量子方法。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;交易延迟：区块链需要一定的时间来处理交易。例如，比特币交易潜伏期遵循泊松分布，平均值为10分钟，但实际上，建议等待大约一个小时来确认交易。相反，大多数数据库最多需要几秒钟来确认交易。智能工厂中许多情况下需要实时地对收集的数据和相应地事件做出反应。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;吞吐量：IIoT 系统通常每秒处理大量交易，这可能是某些区块链的缺陷。例如，比特币每秒最多处理7次交易，尽管它可以进行优化以处理更多交易（例如，增加块大小）。因此，在为 IIoT 部署选择正确的区块链时，吞吐量是必须考虑的基本参数。实际上，大多数的平台都在致力于吞吐量的提高，比较著名的例子是以太坊的分片方案，比特币的扩容方案，以及闪电网络、雷电网络等链下解决方案。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blockchain in Internet of Things:Challenges and Solutions</title>
      <link>http://localhost:1313/2019/blockchain-in-internet-of-thingschallenges-and-solutions/</link>
      <pubDate>Wed, 09 Jan 2019 09:50:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/blockchain-in-internet-of-thingschallenges-and-solutions/</guid>
      <description>&lt;p&gt;Author：Ali Dorri, Salil S. Kanhere, and Raja Jurdak&lt;/p&gt;&#xA;&lt;p&gt;arXiv预印（非正式发表）&lt;/p&gt;&#xA;&lt;p&gt;2016.08&lt;/p&gt;&#xA;&lt;h3 id=&#34;abstract&#34;&gt;Abstract&lt;/h3&gt;&#xA;&lt;p&gt;物联网产业在快速发展，但安全和隐私的问题始终没有解决。由于物联网分布式的拓扑结构和资源有限的设备，传统的安全和隐私方法不适用于物联网。区块链能用于保证和物联网具有相同拓扑的P2P网络的安全与隐私，因此应也能用于物联网，然后，BC是计算密集型的，需要较高带宽且延迟较高，并不适合物联网。本文提出一种基于BC技术的安全、私有和轻量级的架构，去除了BC的缺点，同时保留了其安全和隐私特性，使其适用于物联网。利用智能家居场景为例做了描述，整个架构分为智能家居层、覆盖网络层、云存储层三层。在各层使用了不同类型的BC，并对常见的安全威胁做了定性分析，证明了其保证物联网安全与隐私的有效性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blockchain for IoT Security and Privacy:The Case Study of a Smart Home</title>
      <link>http://localhost:1313/2019/blockchain-for-iot-security-and-privacythe-case-study-of-a-smart-home/</link>
      <pubDate>Mon, 07 Jan 2019 14:55:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/blockchain-for-iot-security-and-privacythe-case-study-of-a-smart-home/</guid>
      <description>&lt;p&gt;Dorri, Ali &amp;amp; Kanhere, Salil &amp;amp; Jurdak, Raja &amp;amp; Gauravaram, Praveen. (2017). Blockchain for IoT Security and Privacy: The Case Study of a Smart Home. 10.1109/PERCOMW.2017.7917634.&lt;/p&gt;&#xA;&lt;h3 id=&#34;abstract&#34;&gt;Abstract&lt;/h3&gt;&#xA;&lt;p&gt;由于物联网网络大规模和分布式的特性，物联网（IoT）安全和隐私仍然是一个主要的挑战。基于区块链的方法可以提供分布式的安全性和隐私性，但会带来显著的能量、延迟和计算开销，不适合大多数资源受限的IoT设备。在我们之前的工作中，我们通过去除PoW（Proof of Work, 工作量证明）和货币（coins）的概念，提出了一个适用于物联网的BC（Blockchain, 区块链）的轻量级实例。我们的方法在智能家居环境中进行了验证，主要包括三层：云存储，overlay和智能家居。在本文中，我们深入研究并概述了智能家居层的各种核心组件和功能。每个智能家居都配备了一个永远在线的高资源设备，称为“miner”，负责处理家庭内外的所有通信。该miner还维护一个私有BC，用于控制和审计通信。我们通过彻底分析其在机密性，完整性和可用性的基本安全目标，表明我们提出的基于BC的智能家居框架是安全的。最后，我们利用仿真结果证明我们的方法引入的开销（在流量，处理时间和能耗方面）相对于其安全性和隐私性增益而言是微不足道的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bubbles of Trust：a decentralized Blockchain-based authentication system for IoT</title>
      <link>http://localhost:1313/2019/bubbles-of-trusta-decentralized-blockchain-based-authentication-system-for-iot/</link>
      <pubDate>Thu, 03 Jan 2019 19:26:00 +0800</pubDate>
      <guid>http://localhost:1313/2019/bubbles-of-trusta-decentralized-blockchain-based-authentication-system-for-iot/</guid>
      <description>&lt;p&gt;Author：Mohamed Tahar Hammi, Badis Hammi, Patrick Bellot, Ahmed Serhrouchni&lt;/p&gt;&#xA;&lt;p&gt;Published in: Computers &amp;amp; Security(2018.6)&lt;/p&gt;&#xA;&lt;p&gt;SCI期刊分区：3区&lt;/p&gt;&#xA;&lt;h3 id=&#34;abstract&#34;&gt;Abstract&lt;/h3&gt;&#xA;&lt;p&gt;我们使用的许多东西都配备了电子设备和协议，以使它们互连和连接到互联网。在物联网中，事物处理和交换数据而无需人为干预。因此，由于这种完全自治，这些实体需要相互识别和认证，并确保其交换数据的完整性。否则，它们将成为恶意用户和恶意使用的目标。由于物联网的规模和其他特性，几乎不可能创建有效的集中式身份验证系统。为了弥补这一限制，在本文中，我们提出了一种称为bubbles of trust的分布式系统确保设备的可靠识别和认证。此外，它还可以保护数据的完整性和可用性。为了实现这一目标，我们的方法依赖于区块链提供的安全优势，并用于创建安全的虚拟区域（bubbles），在这些区域内，事物可以相互识别和信任。我们还使用C ++语言和以太坊区块链提供了我们机制的真实实现。所得结果证明了其满足物联网安全要求，效率和低成本的能力。&lt;/p&gt;&#xA;&lt;h3 id=&#34;introduction-and-problem-statement&#34;&gt;Introduction and problem statement&lt;/h3&gt;&#xA;&lt;p&gt;前三段讲如今物联网和我们的生活息息相关，并且用在很多领域。&lt;/p&gt;&#xA;&lt;p&gt;物联网及其不同应用背后的理念是各种各样的事物无处不在，它们能够相互交流和合作，以提供广泛的服务。因此，将包括大量设备。因此每个物理或虚拟设备都应是可达的，并产生可以由用户检索的内容，而不管其位置如何。但是，只有经过身份验证和授权的用户才能使用该系统，这一点非常重要。否则，它将容易出现许多安全风险，例如信息窃取，数据更改和身份篡改。实际上，安全问题仍然是物联网大规模采用和部署的主要障碍，因为它极易受到攻击，原因有很多：（1）大多数通信都是无线的，这使得系统更容易受到攻击如身份欺骗，消息窃听，消息篡改和其他安全问题，以及（2）多种类型的设备在能量，内存和处理能力方面的资源有限，这阻碍了它们实施高级安全解决方案。&lt;/p&gt;&#xA;&lt;p&gt;许多研究人员将IoT定义为system-of-systems，其中多个用例场景要求只有受信任的用户才能使用提供的服务。因此，诸如认证，机密性和数据完整性之类的传统安全要求对于这些生态系统的每个部分都是至关重要的，包括事物，网络和软件应用程序。但是，由于设备资源的局限性和异构性，现有的安全解决方案并未完全适应这种生态系统。此外，通常需要多种安全技术和解决方案的组合，这导致了高花费。更多的，有效的安全解决方案通常是中心化的，如Public Key Infrastructure（PKI），它可能在由数千个节点组成的环境中引起巨大的可伸缩性问题。最后，每个用例都应用不同的安全方法，体系结构和部署，这会在新服务和方案的集成中造成多个困难。因此，有必要为整个系统系统提出新的安全解决方案。后者必须：（1）允许轻松集成新设备和新服务;（2）完全适应物联网的要求和需求;（3）不依赖于设备的类型，也不依赖于用例架构和设计&lt;/p&gt;&#xA;&lt;p&gt;我们相信，区块链代表了一种非常有前途的技术，可以满足物联网环境中的安全要求。在这项工作中，我们提出了一种称为bubbles of trust的高效分布式认证机制。该机制在以太坊上实施，旨在创建安全的虚拟区域，设备可以安全地进行通信。其评估显示了其满足物联网安全要求的能力。此外，我们还对可构成物联网生态系统的不同类型设备的计算和能源影响以及财务成本进行了广泛的研究。最后，将这些成本与一些现有的物联网认证方案进行比较。&lt;/p&gt;&#xA;&lt;p&gt;第二节介绍了区块链&lt;/p&gt;&#xA;&lt;p&gt;第三节分析安全要求并介绍我们的威胁模型。&lt;/p&gt;&#xA;&lt;p&gt;第四节描述了将区块链和物联网结合的现有工作。&lt;/p&gt;&#xA;&lt;p&gt;第五节描述了我们基于区块链的方法。&lt;/p&gt;&#xA;&lt;p&gt;第六节讨论和分析我们的评估活动。&lt;/p&gt;&#xA;&lt;p&gt;第七节描述了方法的公开问题。&lt;/p&gt;&#xA;&lt;p&gt;第八节总结了论文并介绍了我们未来的工作。&lt;/p&gt;&#xA;&lt;h3 id=&#34;background&#34;&gt;Background&lt;/h3&gt;&#xA;&lt;p&gt;介绍区块链及其中的一些重要概念，略过。&lt;/p&gt;&#xA;&lt;h3 id=&#34;security-requirements-and-threat-model&#34;&gt;Security Requirements and threat model&lt;/h3&gt;&#xA;&lt;h4 id=&#34;a-安全需求&#34;&gt;A. 安全需求&lt;/h4&gt;&#xA;&lt;p&gt;物联网计划必须满足众多安全要求，以确保生态系统的可持续性和弹性。因此，在本节中，我们将描述主要的安全目标，并介绍评估认证方案是否适合保护物联网用例所需的标准。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;完整性&lt;/strong&gt;：完整性是每个方案都必须保证的一个关键需求，本文将完整性分为两方面&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;消息（交易/通信）完整性：在网络传输过程中，不得更改或修改交换的消息。&lt;/li&gt;&#xA;&lt;li&gt;数据完整性：涉及在数据的整个生命周期内保持其一致性和可信赖性。因此，只有授权用户才能修改存储的数据。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;可用性&lt;/strong&gt;：可用性意味着合法用户必须可以按需访问资源。因此，系统必须能够抵御拒绝服务攻击，特别是那些以身份验证服务为目标的攻击&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;可扩展性&lt;/strong&gt;：可扩展性代表着系统规模对其性能没有影响。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;不可否认性&lt;/strong&gt;：它指的是确保实体不能拒绝执行特定操作的能力，例如：设备不能拒绝发送消息。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;识别&lt;/strong&gt;：识别代表了大多数物联网用例的主要要求。它代表了确保任何实体都可以在确保对所有系统实体匿名的情况下使用系统的匿名性的反面。例如，在智能停车场景中，当停车位的传感器发送通知时，管理系统必须确切地知道哪个传感器正在通信，以便准确地更新停车位的状态。另一个例子是环境监测，其中传感器监测湖泊的水位。当该传感器向监控平台发送信息时，后者必须确切知道哪个传感器正在通信，以便决定要提供的操作。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;相互认证&lt;/strong&gt;：认证是证明身份的机制。相互认证表示两个通信方相互认证的要求。这个要求是使系统免受欺骗的必要条件。&lt;/p&gt;&#xA;&lt;h4 id=&#34;b-威胁模型&#34;&gt;B. 威胁模型&lt;/h4&gt;&#xA;&lt;p&gt;&lt;strong&gt;网络模型&lt;/strong&gt;：身份验证方案的总体目的是允许多个节点通过非可信网络以可信赖的方式进行通信。在这项工作中，我们考虑一个在集中式或分布式架构中提供和使用不同物联网服务的网络。每个IoT设备都和大量其它设备通信。交换的消息通过不可靠且可能有损失的通信网络，例如Internet。我们还假设所有参与者都不可信任。实际上，网络中的大量智能物品会增加风险。此外，现有设备是异构类型的，并且不属于相同的用例。网络功能仅包括转发数据包，不提供任何安全保证，如完整性或身份验证。因此，恶意用户可以读取，修改，丢弃或注入网络消息。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;攻击者模型&lt;/strong&gt;：我们假设攻击者或恶意用户可以完全控制使用过的网络，即他可以选择性地嗅探，丢弃，重放，重新排序，注入，延迟和修改消息，延迟可以忽略不计。但是，设备可以接收未经更改的消息。尽管如此，没有对改变的消息的速率做出假设。此外，攻击者可以从比实现的设备更大的计算能力和存储中受益。&lt;/p&gt;&#xA;&lt;p&gt;不考虑对设备的物理攻击，及属主拥有对设备的完全控制权，不可能让攻击者在现实里碰到设备。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;攻击&lt;/strong&gt;：攻击者可以有多个目标，例如发送错误的信息以误导系统的决策或拒绝系统的服务。因此，它可以进行多次攻击&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Sybil attack&lt;/li&gt;&#xA;&lt;li&gt;spoofing attack：与sybil攻击相反，攻击者试图创建大量虚假或虚拟身份，在欺骗攻击中，攻击者试图欺骗合法用户的身份以利用其权限。&lt;/li&gt;&#xA;&lt;li&gt;message substitution：在替换攻击中，攻击者在传输过程中截获有效消息，对其进行更改，使伪造消息就好像它们是由原始发件人发送的一样。&lt;/li&gt;&#xA;&lt;li&gt;Denial of Service&lt;/li&gt;&#xA;&lt;li&gt;Message Replay Attack：重放&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;本文方案的考虑的主要安全需求和攻击如下表1&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blockchain Meets IoT：An Architecture for Scalable Access Management in IoT</title>
      <link>http://localhost:1313/2018/blockchain-meets-iotan-architecture-for-scalable-access-management-in-iot/</link>
      <pubDate>Fri, 28 Dec 2018 15:42:00 +0800</pubDate>
      <guid>http://localhost:1313/2018/blockchain-meets-iotan-architecture-for-scalable-access-management-in-iot/</guid>
      <description>&lt;p&gt;Novo O. Blockchain Meets IoT: An Architecture for Scalable Access Management in IoT[J]. IEEE Internet of Things Journal, 2018, 5(2): 1184-1195.&lt;/p&gt;&#xA;&lt;p&gt;DOI: &lt;a href=&#34;https://doi.org/10.1109/JIOT.2018.2812239&#34;&gt;10.1109/JIOT.2018.2812239&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;keywords: Access control, Blockchain, IoT, smart contracts&lt;/p&gt;&#xA;&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;&#xA;&lt;p&gt;物联网所面临的一个问题是部署在全球的数十亿的设备如何去管理，现有的访问管理技术是基于一个中心化的模型。这篇论文提出了一种在物联网中用于仲裁角色和权限的新的架构。这种新架构是基于区块链技术的全分布式的访问控制系统。该体系结构由概念验证的实现支持，并在实际的物联网方案中进行评估。结果表明，区块链技术可以用作特定可扩展物联网场景中的访问管理技术。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-引言&#34;&gt;1. 引言&lt;/h2&gt;&#xA;&lt;p&gt;IoT设备数量迅速增长并逐渐对许多关键领域产生重要影响，可预见的是，许多物联网服务将建立在数百万IoT设备的互联互通基础上，而限于IoT设备本身的能力限制和现有的中心化访问控制系统，实际应用依然面临许多挑战。&lt;/p&gt;&#xA;&lt;p&gt;传统的互联网场景下，设备位于同一信任域内，因此需要中心化的访问管理结构。但相比于传统场景，一些物联网场景是动态的，这句话主要含义有两个&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;IoT设备可能是移动的，在生命周期中可能属于不同的管理实体，&lt;/li&gt;&#xA;&lt;li&gt;IoT设备可以同时由多个管理实体管理。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;此外，许多IoT设备和管理实体在CPU，内存和电池等方面能力都有限，无法支持当前管理系统的正常运行。另外，在访问控制查询和更新请求频繁时，中心化结构中的访问控制服务器可能成为性能瓶颈，因此需要新的方法来解决问题。&lt;/p&gt;&#xA;&lt;p&gt;这篇论文提出了一种用于管理IoT设备的新架构，建立了一个能将位于不同地点的传感器网络连接起来的分布式访问控制系统。这一解决方案基于区块链技术，访问控制策略则由区块链强制执行，通过采用区块链，能替代原来的中心化管理方式。与传统中心化结构相比，这篇论文的方案有如下优点：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;灵活性（Mobility）：该架构可用于相互隔离的管理域。因此，每个管理域都有自己的自由来管理物联网设备，而访问控制策略仍然由区块链中的规则强制执行。&lt;/li&gt;&#xA;&lt;li&gt;可访问性：一些物联网设备拥有休眠模式，这使得持续的访问是不可行的。这种解决方案则使访问控制规则随时可用。此外，某些管理服务器中的故障不会破坏对信息的访问，所有访问控制信息都是分布式的。&lt;/li&gt;&#xA;&lt;li&gt;并发：同一物联网设备可能同时拥有多个manager，并且这些manager能同时访问或修改访问控制策略&lt;/li&gt;&#xA;&lt;li&gt;轻量：现有的IoT设备无需任何改动即可采用该方案，另外，管理实体和IoT设备间的通信通过区块链实现，可以实现跨平台的通信。&lt;/li&gt;&#xA;&lt;li&gt;可扩展性：管理实体可以使用该方案操纵多个IoT设备，因为设备对访问控制信息的读取是通过区块链完成的，不直接访问管理实体。另外，该方案支持众多的物联网设备通过不同的网络连接到同一条区块链。&lt;/li&gt;&#xA;&lt;li&gt;透明：该系统隐藏了物联网设备的位置及访问资源的手段。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;本文的方法与其它方案的不同之处在于没有把区块链集成到物联网设备中，从而避免了IoT设备能力限制带来的问题，能用在更广泛的物联网场景中。与其他解决方案相反，该设计在单个智能合约中运行，简化了区块链网络中的整个过程，并减少了节点之间的通信开销。另外，访问控制信息被实时提供给IoT设备。总之，这种方案是专门针对可扩展性设计的，并且能取得比无论是传统的还是同样基于区块链的方案更好的性能。&lt;/p&gt;&#xA;&lt;p&gt;文章的其余部分组织如下，第二部分描述架构，第三部分描述架构实施，第四部分描述评估方案并给出评估结果，第五部分分析系统安全性，第六部分介绍物联网中相关的访问控制技术，最后是结论。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;注：作者将区块链主要特性                                                                             总结为&lt;strong&gt;分布式、透明、防篡改和可审计&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;2-方案&#34;&gt;2. 方案&lt;/h2&gt;&#xA;&lt;p&gt;这篇论文提出的架构是一个分布式的访问管理系统，访问控制信息通过区块链存储和分发。&lt;/p&gt;&#xA;&lt;p&gt;除了IoT设备和管理中心（Management hub）节点，所有实体都是区块链的一部分。区块链网络的每个节点都包含整个区块链的副本，而区块链的规模会随着时间推移逐渐变大，IoT设备受限于存储能力无法保持整个区块链副本，因此这篇论文没有将IoT设备纳入区块链网络，而是额外定义了管理中心节点来代替IoT设备发起和接收访问控制请求。&lt;/p&gt;&#xA;&lt;p&gt;这篇论文的方案还使用一个智能合约定义访问控制涉及的所有操作，该合约是唯一的且无法从区块链中删除，管理者（Manager）与智能合约交互来定义访问控制策略。整体架构图如下&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ieeexplore.ieee.org/mediastore_new/IEEE/content/media/6488907/8334665/8306880/novo2-2812239-small.gif&#34; alt=&#34;去中心化的访问控制系统&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;21-涉及的角色&#34;&gt;2.1 涉及的角色&lt;/h3&gt;&#xA;&lt;p&gt;整个架构由无线传感器网络、管理者、代理节点、智能合约、区块链个和管理中心六部分组成。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;无线传感器网络&lt;/strong&gt;：属于无线传感器网络的IoT设备在计算能力、存储和电池等方面性能都有限制。由于IoT设备不属于区块链网络，因此需要在区块链网络中全局唯一地标识所有设备，使用公钥生成器产生大量唯一的随机数解决该问题。主要通过使用现有的IoT加密技术自动为每个设备创建公钥，使用强制加密连接确保拥有唯一标识。·&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;管理者&lt;/strong&gt;：管理者是负责管理一组物联网设备的访问控制权限的实体。通常，管理者被认为是系统中的轻量级节点。轻量级节点不存储区块链信息，也不像矿工节点那样验证区块链的交易。因此，有能力限制的设备也可以成为系统中的管理者，而不会由于其硬件限制造成障碍。此外，使用我们的方法的管理者不需要一直连接到区块链网络，这有助于减少其硬件资源的使用。&lt;/p&gt;&#xA;&lt;p&gt;任何实体都可以注册成为管理者。但是，作为IoT设备注册的设备必须在管理者的控制下注册。这是为了避免管理者在未经设备允许的情况下注册到它们控制的设备上。此外，系统中所有已注册的IoT设备必须属于至少一个已注册的管理者。否则，没有人能够管理该设备。已注册的IoT设备可以同时属于多个管理者。&lt;/p&gt;&#xA;&lt;p&gt;物联网设备在管理者控制下注册后，管理者可以为它们定义特定的访问控制权限。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;代理节点&lt;/strong&gt;（Agent Node）：代理节点负责部署唯一的智能合约。为了与智能合约进行交互，区块链网络中的所有节点都需要知道智能合约的地址，该地址在合约部署时返回给代理节点&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;智能合约&lt;/strong&gt;：唯一且无法从系统中删除。所有访问控制策略都在智能合约中定义，并由区块链交易触发。除此之外，为了在系统中更新或添加访问控制策略，还必须考虑到管理者是唯一能够与智能合约进行交互的实体。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;区块链网络&lt;/strong&gt;：为简单起见，我们架构中的区块链网络是一个私有区块链，可以在评估系统时为我们提供了更可靠的结果。但是，在实际情况中，应使用公共区块链来实施方案。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;管理中心&lt;/strong&gt;：如前所述，物联网设备不属于区块链网络。并且，大部分物联网设备由于CPU、内存和电池等能力的限制无法成为区块链节点，即使已有一些解决方案无需保存整个区块链的副本，但物联网设备的能力仍无法满足。所以该论文选择使用称为管理中心的节点。管理中心可以将IoT设备在CoAP消息中编码的信息转换为区块链节点可理解的JSON-RPC消息。它直接与区块链节点（例如矿工）相连。多个传感器网络可以连接到一管理中心节点，多个管理中心节点可以连接到同一个区块链节点。物联网设备只能使用管理中心从区块链请求访问信息。&lt;/p&gt;&#xA;&lt;p&gt;与此同时，管理中心节点不能像物联网设备一样有能力限制，因为它服务于众多的物联网设备的请求。&lt;/p&gt;&#xA;&lt;p&gt;在最简单的情况下，不需要身份认证，任何物联网设备都可以直接连接到任何管理中心并访问区块链网络。但是，在许多情况下仍需要访问控制。因此，物联网设备将只能连接到某些特定的管理中心节点。将IoT设备添加到系统后，该设备的管理者必须通知相关的管理中心节点有关该设备的凭据，以及通知设备管理中心节点的位置&lt;/p&gt;</description>
    </item>
    <item>
      <title>Block Chain based Intelligent Industrial Network (DSDIN)</title>
      <link>http://localhost:1313/2018/block-chain-based-intelligent-industrial-network-dsdin/</link>
      <pubDate>Fri, 14 Dec 2018 08:37:00 +0800</pubDate>
      <guid>http://localhost:1313/2018/block-chain-based-intelligent-industrial-network-dsdin/</guid>
      <description>&lt;p&gt;Author：Barco You, Matthias Hub, Mengzhe You, Bo Xu, Mingzhi Yu and Ican Uemlianin&lt;/p&gt;&#xA;&lt;p&gt;Published in：eprint arXiv:1809.06551(1809意为18年9月)&lt;/p&gt;&#xA;&lt;p&gt;SCI期刊分区：在arXic上，不算正式发表&lt;/p&gt;&#xA;&lt;p&gt;keywords：IIoT, BC, Artificial Intelligence, Industry 4.0, Intelligent Manufacturing, Edge Computing.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;主题&lt;/strong&gt;：如何为IIoT构建一个全球范围的分布式工业网络&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;主要工作&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;综述。从工业互联网讲到工业物联网，最后讲到基于区块链的工业物联网&lt;/li&gt;&#xA;&lt;li&gt;详细描述了所构建的基于区块链的智能工业网络DSDIN的各部分组成&lt;/li&gt;&#xA;&lt;li&gt;介绍了一些可以高效的运行在DSDIN上的应用&lt;/li&gt;&#xA;&lt;li&gt;介绍了维持整个体系健康运行的激励机制&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;：过去由于技术限制，制造业是“中央集权”的，工厂（特别是大型制造商）垄断了几乎所有的制造资源，包括：技术，原材料，设备，工人，市场信息等。但是，这种集中生产成本高、效率低并且不灵活，难以应对快速变化，多样化和个性化的用户需求。本文介绍了一个智能工业网络（DSDIN），它提供了一个完全分布式的制造网络，每个人都可以参与制造，因为权力下放而没有中间环节，人们能够快速获得他们想要的产品或服务，获得授权并通过努力（例如提供创意，设计或设备，原材料等）以一种低成本的方式获得回报。DSDIN实际上是一个平台，由DSDIN形成的智能网络，制造中心不再是工厂，实际上没有制造中心。DSDIN为人和物（包括原材料，设备，成品/半成品等）提供多参与的点对点网络。通过网络传输的信息称为智能服务算法（ISA）。用户可以通过ISA将过程模型，公式或控制参数发送到设备，DSDIN中的每个事务都是由ISA定义的智能服务。&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;font size = 2&gt;注：要构建一个全球范围的分布式工业网络，做的是基于区块链技术的工业物联网平台，和以太坊很相似，从文中也可以看到，大量借鉴了以太坊的思路，但是根据工业物联网的特性做了调整。&lt;/font&gt;&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Consortium Blockchain for Secure Energy Trading in Industrial Internet of Things</title>
      <link>http://localhost:1313/2018/consortium-blockchain-for-secure-energy-trading-in-industrial-internet-of-things/</link>
      <pubDate>Thu, 13 Dec 2018 17:14:00 +0800</pubDate>
      <guid>http://localhost:1313/2018/consortium-blockchain-for-secure-energy-trading-in-industrial-internet-of-things/</guid>
      <description>&lt;p&gt;&lt;strong&gt;主题&lt;/strong&gt;：用联盟链解决工业物联网的能量交易问题&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;主要工作&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;针对工业物联网(IIoT)里能量交易的安全与隐私问题，提出能量区块链(energy blockchain)&lt;/li&gt;&#xA;&lt;li&gt;为了减少由交易确认的延迟造成的交易限制，提出一个基于信用的支付方案，以支持快速和频繁的能源限制&lt;/li&gt;&#xA;&lt;li&gt;在体系里构建了一个能量银行，并使用Stackelberg 博弈进行基于信用贷款的最优定价&lt;/li&gt;&#xA;&lt;li&gt;对能量区块链解决的安全问题，能量区块链的性能，基于信用的支付方案的性能做分析&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>区块链学习4-以太坊基础知识</title>
      <link>http://localhost:1313/2018/ethereum-instruction/</link>
      <pubDate>Tue, 11 Dec 2018 20:34:00 +0800</pubDate>
      <guid>http://localhost:1313/2018/ethereum-instruction/</guid>
      <description>&lt;h2 id=&#34;1-基本知识&#34;&gt;1. 基本知识&lt;/h2&gt;&#xA;&lt;p&gt;基本知识需要了解两部分&lt;/p&gt;&#xA;&lt;p&gt;第一部分是以太坊版本演进过程：白皮书——&amp;gt;黄皮书——&amp;gt;Frontier版本——&amp;gt;Homestead版本——&amp;gt;Metropolis版本——&amp;gt;Serenity版本，目前处于Metropolis版本，也就是大都会，更多内容参考 &lt;a href=&#34;https://ethfans.org/posts/ethereum-launch-process&#34;&gt;以太坊发布过程&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;另一部分是基本的概念，下面是以太坊中国社区有人整理的 Vitalik Buterin（以太坊创始人）在Ethereum Devcon3（以太坊第三次开发者大会）上的演讲《Ethereum in 25 minutes, vision 2017》，基本上对以太坊做了一个全面的描述。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://ethfans.org/posts/Ethereum-in-25-minites-vision-2017-1&#34;&gt;Vitalik: 25分钟认识以太坊（上）&lt;/a&gt;，&lt;a href=&#34;https://ethfans.org/posts/25-minutes-in-Ethereum-vision-2017-2&#34;&gt;Vitalik: 25分钟认识以太坊（下）&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-工具&#34;&gt;2. 工具&lt;/h2&gt;&#xA;&lt;p&gt;以太坊钱包 &lt;a href=&#34;https://ethereum.org/&#34;&gt;mist&lt;/a&gt; 是以太坊基金会主推的项目，目前处于测试阶段，开源，所有人都可以贡献代码。可以离线管理账户，包括账户的创建、备份、导入、更新等，现在最重要的功能是进行以太币的交易，但其实它定位不只是一个钱包，而是将来Dapp的市场，类似于安卓的应用商店，在这里可以有你的账号，可以浏览、发布和买卖以太坊的Dapp应用。目前因为开发还不够全面，名称暂时显示为 Ethereum-Wallet。&lt;/p&gt;&#xA;&lt;p&gt;下载地址（需要科学上网）：&lt;a href=&#34;https://github.com/ethereum/mist/releases&#34;&gt;Releases&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;刚打开的时候mist会同步全网信息，需要的时间可能久一点，同步完成后可以进行创建账户、设置密码和转账等操作。其界面如下：&lt;/p&gt;&#xA;&lt;img src=&#34;https://picped-1301226557.cos.ap-beijing.myqcloud.com/YJS_20181211_mist客户端操作.png&#34; alt=&#34;mist界面&#34; style=&#34;zoom: 67%;&#34; /&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://remix.ethereum.org/#optimize=false&amp;amp;version=builtin&#34;&gt;Remix&lt;/a&gt; 是一个基于浏览器的编译器和IDE，是用C++开发的，客户端不需要安装，能够使用Solidity语言构建以太坊合约并调试。界面如下：&lt;/p&gt;&#xA;&lt;img src=&#34;https://picped-1301226557.cos.ap-beijing.myqcloud.com/YJS_20181211_Remix界面.png&#34; alt=&#34;Remix界面&#34; style=&#34;zoom:80%;&#34; /&gt;&#xA;&lt;p&gt;以太坊客户端以编写语言分类，在github上分成了&lt;a href=&#34;https://github.com/ethereum/&#34;&gt;不同项目&lt;/a&gt;，下面进行介绍。目前最流行的应该是 Go 语言客户端 geth，star和fork的数量都远远超过其它客户端，项目介绍是「以太坊协议的官方 go 语言实现」，可以实现搭建私有链、挖矿、账户管理、部署智能合约、调用以太坊接口等常用功能。。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-架构&#34;&gt;3. 架构&lt;/h2&gt;&#xA;&lt;p&gt;以太坊整体架构如图&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://picped-1301226557.cos.ap-beijing.myqcloud.com/YJS_20181211_%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.png&#34; alt=&#34;架构和组成&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;各层介绍如下&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;底层服务：底层服务包括P2P网络、LevelDB数据库、密码学算法和分片（Sharding）优化。&lt;a href=&#34;https://leveldb.org.cn/&#34;&gt;LevelDB数据库&lt;/a&gt;是谷歌开发的一个轻量，高效的key-value数据库，在以太坊中用来存储区块、交易等数据。而&lt;a href=&#34;https://ethfans.org/posts/the-authoritative-guide-to-blockchain-sharding-part-1&#34;&gt;分片&lt;/a&gt;则是为了解决以太坊，甚至所有公有区块链目前面临的低吞吐量和高延迟问题，因为问题的核心在网络中的节点需要处理所有的交易，分片就是将网络中的工作分摊给所有参与的节点。分片优化使得可以并行验证交易，加快了交易验证速度，从而加快了区块生成速度。&lt;/li&gt;&#xA;&lt;li&gt;核心层：包括区块链、共识算法和以太坊虚拟机。区块链和共识算法是区块链平台的基础，以太坊虚拟机则是以太坊的主要特点，用来作为运行智能合约的载体。&lt;/li&gt;&#xA;&lt;li&gt;顶层应用：包括API接口、智能合约和去中心化应用。以太坊的Dapp通过Web3.js与智能合约层进行信息交换，所有的智能合约都运行在EVM上，并会用到RPC的调用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;4-区块&#34;&gt;4. 区块&lt;/h2&gt;&#xA;&lt;p&gt;以太坊使用了比特币区块链的技术，但做了一些调整，区块由 &lt;strong&gt;区块头&lt;/strong&gt;、&lt;strong&gt;交易列表&lt;/strong&gt; 和 &lt;strong&gt;叔区块头&lt;/strong&gt; 三部分组成。&lt;/p&gt;&#xA;&lt;h3 id=&#34;41-区块头&#34;&gt;4.1 区块头&lt;/h3&gt;&#xA;&lt;p&gt;区块头包含下列信息：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;父块的散列值（Prev Hash）&lt;/li&gt;&#xA;&lt;li&gt;叔区块的散列值（Uncles Hash）&lt;/li&gt;&#xA;&lt;li&gt;状态树根散列值（stateRoot）&lt;/li&gt;&#xA;&lt;li&gt;交易树根散列值（Transaction Root）&lt;/li&gt;&#xA;&lt;li&gt;收据树根散列值（Receipt Root）&lt;/li&gt;&#xA;&lt;li&gt;时间戳（Timestamp）&lt;/li&gt;&#xA;&lt;li&gt;随机数（Nonce）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;以太坊的一个创新是保存了三棵Merkle树根，分别是状态树、交易树和收据树。存储三棵树可方便账户做更多查询。&lt;/p&gt;&#xA;&lt;h3 id=&#34;42-交易列表&#34;&gt;4.2 交易列表&lt;/h3&gt;&#xA;&lt;p&gt;和比特币区块链相同&lt;/p&gt;&#xA;&lt;h3 id=&#34;43-叔区块头&#34;&gt;4.3 叔区块头&lt;/h3&gt;&#xA;&lt;p&gt;叔区块是父区块的父区块的子区块，但不是自个的父区块，或更一般的说是祖先的子区块，但不是自己的祖先。当矿工打包的时候发现有这样的块存在，就把它打包进去，称为叔块。如图，黄色的101是一个叔块&lt;/p&gt;</description>
    </item>
    <item>
      <title>背景调查3-区块链与物联网</title>
      <link>http://localhost:1313/2018/blockchain-for-iot/</link>
      <pubDate>Tue, 11 Dec 2018 14:55:00 +0800</pubDate>
      <guid>http://localhost:1313/2018/blockchain-for-iot/</guid>
      <description>&lt;p&gt;和老师商量着定了大方向是物联网和区块链的结合，这篇文章是这段时间以来对该方向调查的总结。&lt;/p&gt;</description>
    </item>
    <item>
      <title>区块链学习3-区块链领域概况</title>
      <link>http://localhost:1313/2018/overview-of-blockchain/</link>
      <pubDate>Tue, 20 Nov 2018 14:25:00 +0800</pubDate>
      <guid>http://localhost:1313/2018/overview-of-blockchain/</guid>
      <description>&lt;p&gt;本篇结束区块链领域概况，包括一些常见名词、核心技术、应用场景和学习区块链需要掌握的基础知识。&lt;/p&gt;</description>
    </item>
    <item>
      <title>背景调查2-近三年区块链方向论文发表情况总结</title>
      <link>http://localhost:1313/2018/analysis-of-papers-published-in-blockchain-field/</link>
      <pubDate>Sat, 17 Nov 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/analysis-of-papers-published-in-blockchain-field/</guid>
      <description>&lt;p&gt;原始的目的是统计一下国内区块链研究现状，但开始这一工作时决定顺便把其它的统计数据也一并记录下来。数据来自&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://apps.webofknowledge.com/WOS_GeneralSearch_input.do?product=WOS&amp;amp;search_mode=GeneralSearch&amp;amp;SID=6CIWceJqI9n1qQa94CZ&amp;amp;preferencesSaved=&#34;&gt;Web of Science核心合集&lt;/a&gt;，即SCI，以&lt;code&gt;blockchain&lt;/code&gt;为关键词，总计3399篇论文&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.engineeringvillage.com/search/quick.url?SEARCHID=30ec8294fa0e452ba59525594e492cda&amp;amp;COUNT=1&amp;amp;usageOrigin=header&amp;amp;usageZone=evlogo#foo&#34;&gt;EI Compendex&lt;/a&gt;，即EI，以&lt;code&gt;blockchain为&lt;/code&gt;关键词，总计6659篇论文&lt;/li&gt;&#xA;&lt;li&gt;CNKI核心期刊，会议，硕博论文&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;1-学科&#34;&gt;1. 学科&lt;/h2&gt;&#xA;&lt;p&gt;论文所属学科以计算机为主，SCI中工程电子电气、计算机科学理论方法、计算机科学信息系统、电信四个学科是最主要的发表领域，剩下的论文数量超过100篇的学科分别是计算机科学的跨学科应用、计算机科学软件工程、计算机科学硬件体系结构、计算机科学人工智能和能源燃料。随后的两个领域分别是工业工程和自动化控制系统，而直观上感觉相关的经济学只排到第13位。&lt;/p&gt;&#xA;&lt;p&gt;SCI论文所属学科论文统计的图片丢失&lt;/p&gt;&#xA;&lt;p&gt;EI中结果仿佛，柱状图如下所示&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://picped-1301226557.cos.ap-beijing.myqcloud.com/YJS_20181117_EI%E8%AE%BA%E6%96%87%E6%89%80%E5%B1%9E%E5%AD%A6%E7%A7%91%E7%BB%9F%E8%AE%A1.png&#34; alt=&#34;EI论文所属学科论文统计&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-出版年&#34;&gt;2. 出版年&lt;/h2&gt;&#xA;&lt;p&gt;虽然比特币起始自2008年，但区块链的论文直到2013年才有收录，并且只有2篇，2018、2019两年达到最高，每年都有近1400篇。柱状图如下&lt;/p&gt;&#xA;&lt;p&gt;（图片丢失）&lt;/p&gt;&#xA;&lt;p&gt;具体每年的数据如下表所示，有趣的是今天才2019年12月2日，结果2020年待发表论文已经有23篇了，超过刚发展的前三年。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;出版年&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;论文数&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;百分比&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2020&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;23&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.677&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2019&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;1385&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;40.747&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2018&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;1392&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;40.953&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2017&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;466&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;13.710&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2016&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;99&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2.913&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2015&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;22&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.647&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2014&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;10&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.294&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2013&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.059&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;EI论文总体的发表趋势相同，都是2017年开始有明显增长，从2018年开始爆发&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://picped-1301226557.cos.ap-beijing.myqcloud.com/YJS_20181117_EI%E8%AE%BA%E6%96%87%E5%8F%91%E8%A1%A8%E5%B9%B4%E4%BB%BD%E7%BB%9F%E8%AE%A1.png&#34; alt=&#34;发表年份&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;两张图中都是在大概2013年起才出现论文，这可能是因为之前&lt;code&gt;区块链&lt;/code&gt;这一概念并没有得到重视，相关的论文关键字很可能是&lt;code&gt;比特币&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-文献类型&#34;&gt;3. 文献类型&lt;/h2&gt;&#xA;&lt;p&gt;SCI中会议论文2136篇，占比62.842%；期刊论文1065篇，占比31.333%；综述86篇，占比2.530%。&lt;/p&gt;&#xA;&lt;p&gt;文献类型统计图片丢失&lt;/p&gt;&#xA;&lt;p&gt;其中会议论文一共2136篇，分散在953个会议中。发表区块链论文最多的两个会议是 IEEE International Congress on Cybermatics 和 IEEE International Conference on Blockchain and Cryptocurrency，后者在2019年第一次举办，是IEEE举办的第一个区块链和加密货币的高级会议。下面是发表论文在10篇及以上的会议名。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;会议名&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;数量&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;百分比&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;IEEE International Congress on Cybermatics&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;97&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2.854 %&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;1ST IEEE International Conference on Blocakchain and Cryptocurrency(ICBC)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;74&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2.177 %&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;IEEE International Conference on Communications(ICC)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;33&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.971 %&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;1ST IEEE International Conference on Hot Information-Centric Networking(HotICN)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;26&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.765 %&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;18TH IEEE International Conference on Data Mining workshops(ICDMW)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;15&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.441 %&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;24TH IEEE International Conference on Papallel and Distributed Systems(ICPADS)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;14&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.412 %&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;9TH IFIP International Conference on New Technologies Mobility and Security(NTMS)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;14&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.412 %&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Crypto Valley Conference on Blockchain Technology(CVCBT)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;14&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.412 %&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;11TH IEEE International Conference on Cloud Computing, Cloud Part of The IEEE World Congress on Services&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;13&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.382 %&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;34TH ACM Sigapp Annual International Symposium on Applied Computing(SAC)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;13&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.382 %&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;4TH International Conference on Cloud Computing and Security(ICCCS)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;13&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.382 %&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;IEEE Global Telecommunications Conference GC(WKSHPS)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;13&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.382 %&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;10TH IFIP International Conference on New Technologies Mobility and Security(NTMS)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;12&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.353 %&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;21ST International Conference on Advanced Communication Technology(ICACT)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;12&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.353 %&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;IEEE International Conference on Big Data&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;12&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.353 %&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;International Conference on Blockchain Technology(ICBCT)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;12&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.353 %&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;5TH IEEE World Forum on Internet of Things(IEEE WF IOT)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;11&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.324 %&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;1ST ACM IEEE International Workshop on Emerging Trends in Software Engineering for Blockchain(WETSEB)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;10&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.294 %&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2ND International Workshop on Cryptocurrencies and Blockchain Technology(CBT) &lt;br&gt;13TH International Workshop on Data Privacy Management(DPM)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;10&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.294 %&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;IEEE Global Communications Conference&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;10&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.294 %&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;International Conference on Computing Networking and Communications(ICNC)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;10&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0.294 %&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;期刊最多的是IEEE Access，183篇，IEEE Internet of Things排第五，44篇，Sensors排第七，34篇，IEEE Transactions on Industrial Informatics排十一，25篇。更多的数据见下表，只统计20篇及以上的，虽然不知道为什么有些会议也算进去了&lt;/p&gt;</description>
    </item>
    <item>
      <title>背景调查1-区块链方向的期刊、会议和基金收集</title>
      <link>http://localhost:1313/2018/conference-journal-and-foundation-information-in-blockchain-field/</link>
      <pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/conference-journal-and-foundation-information-in-blockchain-field/</guid>
      <description>&lt;p&gt;如题，本文只关注重点的几方面&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;收录区块链的期刊、会议列表（将中国的单独分离）&lt;/li&gt;&#xA;&lt;li&gt;期刊专题和会议的征稿通知，从中发现当前热点研究领域&lt;/li&gt;&#xA;&lt;li&gt;基金项目信息中的负责人、研究机构、项目名，从而了解研究现状&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;下面分类讨论&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-期刊&#34;&gt;1. 期刊&lt;/h2&gt;&#xA;&lt;p&gt;期刊目录查询：&lt;a href=&#34;https://www.researchgate.net/publication/321686910_SCI_Science_Citation_Indexed_Journal_List&#34;&gt;SCI&lt;/a&gt;, &lt;a href=&#34;https://www.elsevier.com/solutions/engineering-village/content&#34;&gt;EI&lt;/a&gt;, &lt;a href=&#34;http://www.sanxiau.edu.cn/xtsg/info/1021/1527.htm&#34;&gt;北大核心&lt;/a&gt;, &lt;a href=&#34;http://www.letpub.com.cn/index.php?page=journalapp&amp;amp;view=search&#34;&gt;LetPub JCR分区&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;具体查看某个期刊是否被收录查看&lt;a href=&#34;https://zhuanlan.zhihu.com/p/27010468&#34;&gt;如何快速查询期刊收录情况&lt;/a&gt;这篇文章&lt;/p&gt;&#xA;&lt;p&gt;查看影响因子和版面费情况查看&lt;a href=&#34;http://www.sinoscript.com/search.html#opennewwindow&#34;&gt;SinoScript&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;SCI的收录查询网址为 &lt;a href=&#34;https://mjl.clarivate.com/home&#34;&gt;Master Journal List&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;以上都是完整的目录，包含各个领域，而对收录区块链方向论文的期刊列表，虽然理论上计算机和通信领域的期刊应该都是收录的，但还是根据上次对区块链领域已发布文献的总结，列举曾收录过区块链方向的论文数量较多的一些期刊。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;期刊名&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;中科院分区&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;IEEE Access&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2区&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;IEEE Internet of Things Journal&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;1区&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Advances in Intelligent Systems and Computing&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;会议论文集&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Sensors&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;3区&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;IEEE Transactions on Industrial Informatics&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;1区&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Applied Sciences Basel&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;非计算机，4区&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Future Generation Computer Systems&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2区&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Sustainability&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;非计算机，4区&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;IT Professional&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;3区&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Communications In Computer And  Information Science&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;会议论文集&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Procedia Computer Science&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;会议论文集&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Energies&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;非计算机，3区&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;International Journal of Information Management&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;非计算机，4区&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Computers And Security&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;3区&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Future Internet&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;EI&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;IEEE Transactions On Computational  Social Systems&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;EI&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Concurrency Computation Practice And  Experience&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;4区&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Information Sciences&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2区&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;软件学报&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;计算机研究与发展&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;自动化学报&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;中国电机工程学报&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;电子与信息学报&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;计算机应用研究&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;通信学报&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;电子学报&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;计算机学报&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;专题征稿：&lt;/p&gt;</description>
    </item>
    <item>
      <title>区块链学习2-比特币基本原理</title>
      <link>http://localhost:1313/2018/bitcoin-fundamentals/</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/bitcoin-fundamentals/</guid>
      <description>&lt;p&gt;区块链里最基本也是最重要的几个概念是&lt;strong&gt;地址&lt;/strong&gt;、&lt;strong&gt;交易&lt;/strong&gt;、&lt;strong&gt;区块&lt;/strong&gt;、&lt;strong&gt;网络&lt;/strong&gt;。比特币用地址来标识一笔交易的支出方和接收方。所有的交易最终需要被记到统一的账本（也就是区块链）上，而这个账本是通过区块确认并完成的。每一个新区块的产生，都会被打上时间戳（区块头里的一个字段，是真的时间，后面详细介绍），最终生成按照时间前后排列并加以记录的电子交易证明。每个独立节点之间又通过比特币网络来建立联系，这样就组成了一个去中心化、分布式的电子交易记录时间戳服务器系统。比特币通过构造这个分布式时间戳服务器来解决&lt;a href=&#34;https://baike.baidu.com/item/%E5%8F%8C%E9%87%8D%E6%94%AF%E4%BB%98/7046722?fr=aladdin&#34;&gt;双重支付&lt;/a&gt;问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>科研基础2-文献管理工具 Zotero 学习指南</title>
      <link>http://localhost:1313/2018/introduction-to-zotero/</link>
      <pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/introduction-to-zotero/</guid>
      <description>&lt;p&gt;在文献管理方面的需求包括：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;文献可以方便地导入工具中并提取准确丰富地文献信息&lt;/li&gt;&#xA;&lt;li&gt;工作和学习时，可以快速在工具中找到自己想要的文献&lt;/li&gt;&#xA;&lt;li&gt;在写作时，可以方便的导出工具中的文献&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;由于 Zotero 没有内置的 PDF 阅读工具，因此忽略阅读层面的需求，除此之外，最大的缺点是没有移动端的应用程序。下面分别就几个主要的方面探索使用技巧。&lt;/p&gt;&#xA;&lt;p&gt;注：本文主要参考 &lt;a href=&#34;https://sspai.com/post/56724&#34;&gt;少数派-文献管理神器 Zotero 学习路径指南&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-文献导入&#34;&gt;1. 文献导入&lt;/h2&gt;&#xA;&lt;p&gt;Zotero 支持多种导入方式，包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过 Zotero Connector 浏览器插件导入&lt;/li&gt;&#xA;&lt;li&gt;输入文献对应的 ISBN、DOI、PMID 或 arXiv ID 来导入&lt;/li&gt;&#xA;&lt;li&gt;复制 BibTex 信息从剪贴板导入&lt;/li&gt;&#xA;&lt;li&gt;从文件（BibTeX, RIS, Zotero RDF等）导入&lt;/li&gt;&#xA;&lt;li&gt;将下载好的PDF文件直接拖入软件，然后自动提取文件中的元数据&lt;/li&gt;&#xA;&lt;li&gt;自行添加&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;经过实践，&lt;strong&gt;通过输入  DOI 或 arXiv ID 导入的文献信息最为丰富&lt;/strong&gt;，因此有条件的情况下应采用这种方式。&lt;/p&gt;&#xA;&lt;h3 id=&#34;11-通过标识符添加&#34;&gt;1.1 通过标识符添加&lt;/h3&gt;&#xA;&lt;p&gt;单击 Zotero 窗格中间列顶部的「通过标识符添加条目」按钮，输入标识符后按 Enter。如果要一次输入多个标识符，在输入第一个标识符后按 Shift + Enter 可以进入多行模式，随后输入其余标识符（每行一个），并通过 Enter 换行。输入完成后，再按 Shift + Enter 即可一次导入所有文献，示例如下图，是否带有「DOI:」或「arXiv:」前缀不影响导入效果，下图中第一条和第三条是 DOI，中间一条是arXiv ID。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://picped-1301226557.cos.ap-beijing.myqcloud.com/YJS_20181111_8Mv34O.png&#34; alt=&#34;通过标识符导入文献&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;12-通过-feed-进行订阅&#34;&gt;1.2 通过 feed 进行订阅&lt;/h3&gt;&#xA;&lt;p&gt;文献需要及时跟踪，通常是通过邮件订阅或者RSS，Zotero 本身提供了一种简单的订阅方法，相比于前两种，这种方式更受我喜爱，也是现在主要使用的方式。以 IEEE Internet of Things Journal 期刊为例，在 &lt;a href=&#34;https://ieeexplore.ieee.org/xpl/mostRecentIssue.jsp?punumber=6488907&#34;&gt;期刊主页&lt;/a&gt; 获取订阅链接（和RSS订阅的链接是一样的），然后在 Zotero 中点击左上角的「新建文献库」按钮，选择「新建订阅」，然后选择「来自URL」&lt;/p&gt;</description>
    </item>
    <item>
      <title>科研基础1-文献检索常识</title>
      <link>http://localhost:1313/2018/academic-basic-knowledge/</link>
      <pubDate>Fri, 09 Nov 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/academic-basic-knowledge/</guid>
      <description>&lt;h2 id=&#34;1-常用名词&#34;&gt;1. 常用名词&lt;/h2&gt;&#xA;&lt;p&gt;与学术研究和论文相关的，有许多常用的名词，本节对这些名词作解释和区分。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;会议组织者&lt;/strong&gt;：可能是某个学校或某个组织，为了学术或经济利益举办会议，从科研工作者处收取论文和注册费，然后将论文集交给出版商出版&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;出版商&lt;/strong&gt;：比如Elsevier/Springer/IEEE，他们运行和维护期刊，收取投稿论文进行审阅，最后以纸质、光盘和电子版本形式发行供科研工作者查看，各种举办的会议收到的文章最后也都会交给出版商出版。出版商拥有所收到的论文的版权，也会向会议组织者收取出版费用，向期刊投稿者收取版面费，最后放在自己的数据库中，再向需要论文访问权限的学校、研究机构或个人收取查看的费用。&lt;/p&gt;&#xA;&lt;p&gt;国内的出版商相比来说比较孤立，一般由各协会或大学建立，一种期刊一个出版商，没有形成国外出版商的垄断规模，比如计算机学报、软件学报、北京大学学报、东北大学学报等。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;收录&lt;/strong&gt;：出版商或其它机构建立的论文数据库，科研工作者从这些数据库中寻找和阅读论文。出版商建立的数据库(如IEEExplorer, ScienceDirect)一般是需要付费的，但属于全文数据库，意思是可以看到整篇论文的内容。其它机构建立的数据库是从各出版商的数据库中抓取公开的内容，比如题目、摘要、参考文献等，无法看到整篇论文的内容，但根据收录的论文质量的差别，逐渐形成口碑，被科研工作者广泛采用，如SCI和EI。还有些机构或私人建立的数据库，如SCI-Hub，是苦于出版商高额的收费价格私自建立的全文数据库，没有版权，是非法的，但鉴于当前出版商的垄断行为，这种数据库被越来越多的人使用。&lt;/p&gt;&#xA;&lt;p&gt;国内的数据库机构相比来说具有垄断性质，学术论文普遍归属中国知网(CNKI)，虽然各期刊官网本身也可以检索，但只包括一种期刊，不如知网便利。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;检索&lt;/strong&gt;：检索的含义是从数据库中寻找符合条件的论文，一般来说论文数据库本身都提供对用户的检索接口，如&lt;a href=&#34;https://ieeexplore.ieee.org/Xplore/home.jsp&#34;&gt;IEEE xplorer&lt;/a&gt;、&lt;a href=&#34;https://www.sciencedirect.com/&#34;&gt;ScienceDirect&lt;/a&gt;、&lt;a href=&#34;http://apps.webofknowledge.com/WOS_GeneralSearch_input.do?product=WOS&amp;amp;search_mode=GeneralSearch&amp;amp;SID=6CIWceJqI9n1qQa94CZ&amp;amp;preferencesSaved=&#34;&gt;Web of Science&lt;/a&gt;、&lt;a href=&#34;https://www.engineeringvillage.com/search/quick.url?usageZone=evlogo&amp;amp;usageOrigin=header&#34;&gt;Engineering Village&lt;/a&gt;等，现如今，搜索引擎厂商也提供对论文的检索功能，具有一定影响力及被广泛使用的有&lt;a href=&#34;https://scholar.google.com/&#34;&gt;Google Scholar&lt;/a&gt;、&lt;a href=&#34;https://cn.bing.com/academic?mkt=zh-CN&#34;&gt;Bing学术&lt;/a&gt;、&lt;a href=&#34;http://xueshu.baidu.com/&#34;&gt;百度学术&lt;/a&gt;等&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;IF&lt;/strong&gt;：Impact factor，期刊影响因子，是代表期刊影响大小的一项定量指标，实际上是某期刊在某年被全部源刊物引证该刊前两年发表论文的次数，与该刊前两年所发表的全部源论文数之比。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;JCR&lt;/strong&gt;：Journal Citation Reports，期刊引证报告，是由一些机构对大量期刊之间引用和被引用数据进行统计，并根据IF进行分类统计并发布的报告，目前有影响力的是中科院的JCR和汤森路透JCR。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-出版商&#34;&gt;2. 出版商&lt;/h2&gt;&#xA;&lt;p&gt;中国的期刊发行机构一般是各协会、研究所、大学，然后选择某个常规出版商出版，通常一本期刊属于一个机构或多个机构合作，比如计算机学报由中国计算机学会和中科院计算技术研究所共同主办，科学出版社出版，东北大学学报由东北大学主办，东北大学出版商出版，因此不构成垄断形式的影响力，在此不进行讨论。&lt;/p&gt;&#xA;&lt;p&gt;国外的出版商已逐渐形成几大垄断性质的集团，把持了全球学术出版的各个方面，论文从投稿、发表到查看的全流程都少不了它们的参与，因此逐个进行介绍。&lt;/p&gt;&#xA;&lt;h3 id=&#34;elsevier&#34;&gt;Elsevier&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.elsevier.com/__data/assets/image/0004/688981/Non-Solus-now.jpg&#34; alt=&#34;Elsevier&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Elsevier，中文名&lt;a href=&#34;https://www.elsevier.com/zh-cn&#34;&gt;爱思唯尔&lt;/a&gt;，1880年创建于荷兰，现今总部位于阿姆斯特丹，产品与服务包括期刊、图书专著、教科书和参考书的纸板和电子版，出版领域覆盖医学、生命科学、自然科学和社会科学等，公司每年出版超过2000种期刊，包括Lancet(柳叶刀)和Cell(细胞)等世界著名杂志。其标识是爱思唯尔之树，是一个长者站在葡萄藤缠绕的榆树下，刻有拉丁文“Non Solus&amp;quot;(永不孤单)。&lt;/p&gt;&#xA;&lt;p&gt;爱思唯尔旗下的数据库是&lt;a href=&#34;https://www.sciencedirect.com/&#34;&gt;ScienceDirect&lt;/a&gt;，主要查询该公司自己出版的文献，到现在为止收录了3800多种期刊和35000多部图书，是一个主流的论文数据库平台。&lt;/p&gt;&#xA;&lt;p&gt;文献管理工具&lt;a href=&#34;https://www.elsevier.com/zh-cn/solutions/mendeley&#34;&gt;Mendeley&lt;/a&gt;也是爱思唯尔旗下，这是当今主流的文献管理工具之一。&lt;/p&gt;&#xA;&lt;p&gt;一些参考网址列举如下&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Elsevier介绍： &lt;a href=&#34;https://www.elsevier.com/zh-cn/about/our-business&#34;&gt;https://www.elsevier.com/zh-cn/about/our-business&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;ScienceDirect介绍： &lt;a href=&#34;https://www.elsevier.com/zh-cn/solutions/sciencedirect&#34;&gt;https://www.elsevier.com/zh-cn/solutions/sciencedirect&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Elsevier出版的图书和期刊目录：  &lt;a href=&#34;https://www.elsevier.com/catalog&#34;&gt;https://www.elsevier.com/catalog&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;除了上面提到的医学界的顶级期刊柳叶刀和生命科学界的顶级期刊Cell属于Elsevier外，还有大量期刊和图书属于它，详情查看上面的第三个链接。不过，ScienceDirect种收录的期刊全文都不是免费的，多年来学术界一直致力于反抗Elsevier的垄断行为，名为The Cost of Knowledge的抵制活动现如今已得到33383人的参与，参与这一活动的网址为 &lt;a href=&#34;http://thecostofknowledge.com/&#34;&gt;http://thecostofknowledge.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;springer&#34;&gt;Springer&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://tse4-mm.cn.bing.net/th?id=OIP.ZYLXQ7nXAqfCQyO7xQc7RAHaCe&amp;amp;w=300&amp;amp;h=100&amp;amp;c=7&amp;amp;o=5&amp;amp;cb=11&amp;amp;pid=1.7&#34; alt=&#34;Springer&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Springer，中文名&lt;a href=&#34;https://www.springer.com/cn&#34;&gt;施普林格&lt;/a&gt;，1842年创立于德国，现今总部位于柏林， 拥有超过2900种期刊和300,000本图书，每年出版6,500余种科技图书和约2,000余种科技期刊，涉及到医学、心理学、生物医学、生物、数学、物理、经济学、法律等多种学科。 鼎鼎大名的Nature期刊现在就归属于Springer，是在2015年1月合并的。&lt;/p&gt;&#xA;&lt;p&gt;旗下的论文检索数据库为&lt;a href=&#34;https://link.springer.com/&#34;&gt;Springer Link&lt;/a&gt;，不过大多数情况都是因为图书检索到它&lt;/p&gt;&#xA;&lt;p&gt;一些参考网址如下&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Springer历史： &lt;a href=&#34;https://www.springer.com/cn/about-springer/history&#34;&gt;https://www.springer.com/cn/about-springer/history&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Springer产品与服务： &lt;a href=&#34;https://www.springernature.com/gp/librarians/products&#34;&gt;https://www.springernature.com/gp/librarians/products&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Springer是目前全球最大的书籍出版商，第二大期刊出版商(第一是Elsevier)&lt;/p&gt;&#xA;&lt;h3 id=&#34;wiley&#34;&gt;Wiley&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.bing.com/th?id=OIP.KaiQ1IcP5t4UbYjmJUuObwHaFg&amp;amp;w=211&amp;amp;h=160&amp;amp;c=7&amp;amp;o=5&amp;amp;cb=11&amp;amp;pid=1.7&#34; alt=&#34;Wiley&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Wiley，译为&lt;a href=&#34;https://www.wiley.com/en-cn&#34;&gt;约翰威立&lt;/a&gt;或不翻译，1807年创立于美国，出版了超过350位不同领域诺贝尔奖得主的作品，是世界第三大期刊出版商，也是全球最大的学协会出版商。 拥有1600+种期刊，其中1200+种期刊被JCR收录。 出版涵盖学科范围包括化学、材料科学、信息技术及计算机、工程学、数学与统计、物理与天文学、商业、 人文科学、教育及法律、心理学、社会科学、 生命科学、医学等多个学科。在JCR全部236个学科类别中，219个收录了Wiley期刊，其中有256本期刊在所属的学科中排名前十位。&lt;/p&gt;&#xA;&lt;p&gt;拥有最高影响因子的期刊是《CA: A Cancer Journal for Clinicians》2018年的影响因子高达223.679，是目前影响因子最高的期刊。&lt;/p&gt;&#xA;&lt;p&gt;Wiley旗下的论文数据库是&lt;a href=&#34;https://onlinelibrary.wiley.com/&#34;&gt;Wiley Online Library&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;关于Wiley期刊的详细说明可以查看 &lt;a href=&#34;https://www.wiley.com/en-cn/students&#34;&gt;https://www.wiley.com/en-cn/students&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;其它&#34;&gt;其它&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://us.sagepub.com/en-us/nam&#34;&gt;SAGE&lt;/a&gt;和&lt;a href=&#34;https://taylorandfrancis.com/#&#34;&gt;Taylor&amp;amp;Francis&lt;/a&gt;也是世界出版巨头&lt;/p&gt;&#xA;&lt;p&gt;IEEE是美国电气与电子工程师协会，全球最大的非营利性专业技术协会，也是国际学术会议和期刊中最知名的一个，总部设在纽约。主要致力于在电气、电子、计算机工程和与科学有关的领域开发和研究，在太空、计算机、通信、生物医学、电力及消费性电子产品等领域已制定了900多个行业标准，现已发展成为全球最具有影响力的国际学术组织。IEEE出版有70多种学术期刊杂志，每个专业分会都有自己的刊物，IEEE每年发表的论文著作数量占全世界该领域当年发表量的30%左右。IEEE最出名的除了其出版的期刊外，还有每年举办的业内顶尖学术国际会议，以及&lt;a href=&#34;https://ieeexplore.ieee.org/Xplore/home.jsp&#34;&gt;IEEExplore&lt;/a&gt;数据库&lt;/p&gt;&#xA;&lt;p&gt;ACM是美国计算机协会，举办的学术会议和期刊在全球也具有重要影响力，全文数据库&lt;a href=&#34;https://dl.acm.org/advsearch.cfm?&#34;&gt;ACM DL&lt;/a&gt;是常用数据库之一&lt;/p&gt;</description>
    </item>
    <item>
      <title>区块链学习1-比特币的诞生</title>
      <link>http://localhost:1313/2018/the-birth-of-bitcoin/</link>
      <pubDate>Fri, 02 Nov 2018 14:02:00 +0800</pubDate>
      <guid>http://localhost:1313/2018/the-birth-of-bitcoin/</guid>
      <description>&lt;p&gt;区块链作为比特币背后的技术架构，是随着比特币的出现而诞生的。因此，要讲区块链的诞生，我们就不得不从比特币的历史说起。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blockchain and the Internet of Things in the Industrial Sector</title>
      <link>http://localhost:1313/2018/blockchain-and-the-internet-of-things-in-the-industrial-sector/</link>
      <pubDate>Wed, 24 Oct 2018 12:25:00 +0800</pubDate>
      <guid>http://localhost:1313/2018/blockchain-and-the-internet-of-things-in-the-industrial-sector/</guid>
      <description>&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：三个工业物联网和区块链结合的场景&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;供应链&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;货物在供应链各环节流通时，装运信息缺乏可见性，并且拥有装运延迟，这种延迟通常是由于一个流通的批准文件或货物交接造成的，随着这种事务的增加，相关的交接文件可能错位或丢失，或处于等待状态，可以使用智能合约数字化这一过程，并从供应链中删除这类中间商的工作。如1中所述，区块链主要记载货物的位置和时间信息，作为货物的装运证明和交付证明。这样可以最大限度地减少装运延迟，更准确地预测货物地交付时间，更好地实时检测库存水平。&lt;/p&gt;&#xA;&lt;p&gt;位置数据由IoT传感器捕获，IoT传感器将数据转发到IoT平台。供应链的参与者包括原始设备制造商（OEM），供应商，第三方物流提供商，托运人和仓库。每个参与者都可以根据参与者的角色查看区块链中的相关货运数据。制造商使用物流管理系统来查询区块链的装运数据，并向区块链提供额外的装运信息。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;自动驾驶车辆&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;车辆可以自行加油或充电。如果车辆上的传感器检测到需要维修，则车辆可以自动安排预约并开车到维修设施。自动驾驶汽车制造商可以及时获得区块链上捕获的发动机或动力传动系故障信息，并可以使用此信息来确定组件是否出现故障趋势&lt;/p&gt;&#xA;&lt;p&gt;客户受益于制造商提高的服务水平，提高消费者信心。制造商，监管机构和供应商可以适当了解区块链中的组件故障，并可以更快地主动应对故障趋势，以确保消费者的安全和满意度。在没有人为干预的情况下，车辆将安全地自动支付加油或维修费用。加油，维修和付款的永久记录将记录在区块链上，并由参与者共享，包括车主，制造商，维修设施和融资公司&lt;/p&gt;&#xA;&lt;p&gt;将传感器的数据放在区块链，利用智能合约可以达成自动修车、加油，并利用区块链货币的固有智能完成维修和加油的费用支付。这些支付记录也将存在区块链中，同样还利用其采集的信息不可改变供车主、制造商、维修设施等各方访问数据。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;制造工厂资产管理&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;区块链和物联网解决方案可以预防和预测制造工厂设备的故障。设备传感器可以检测诸如过度振动或热量之类的情况，这可能导致故障或操作员受伤。从传感器在区块链上捕获的关键阈值数据将用于检测这些故障的趋势，并在故障发生之前促进主动维护和维修。从工厂设备生成的分析和认知数据的应用将使可靠性，维护和操作人员能够更加详细，准确地了解资产绩效。监管机构和工厂设备供应商可以查看设备记录，并可以及时提供检查和认证，以确保设备的可靠性。第三方维修合作伙伴可以监控区块链的预防性维护，并将其工作记录在区块链上&lt;/p&gt;</description>
    </item>
    <item>
      <title>Work-in-Progress Integrating Low-Power IoT devices to</title>
      <link>http://localhost:1313/2018/work-in-progress-integrating-low-power-iot-devices-to/</link>
      <pubDate>Tue, 23 Oct 2018 11:22:00 +0800</pubDate>
      <guid>http://localhost:1313/2018/work-in-progress-integrating-low-power-iot-devices-to/</guid>
      <description>&lt;p&gt;Özyılmaz, Kazım Rıfat, and Arda Yurdakul. &amp;ldquo;Work-in-Progress: Integrating low-power IoT devices to a blockchain-based infrastructure.&amp;rdquo; 2017 International Conference on Embedded Software (EMSOFT). IEEE, 2017.&lt;/p&gt;&#xA;&lt;p&gt;说明：关于物联网和区块链结合，节点资源有限的一种解决方案&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;引言部分引用了几篇物联网发展现状的论文，做背景分析可能用到&lt;/p&gt;&#xA;&lt;p&gt;这篇文章主要是为基于LPWAN的物联网部署到区块链基础设施做一个概念验证，也就是证明这事可以做。还提出了各种终端设备的集成到区块链的方法。他们在网关上的软件解决方案利用区块链功能来（a）促进分散的物联网平台，（b）标准化终端设备和物联网基础设施之间数据传输的方式，（c）连接任何类型的物联网终端设备到基于区块链的物联网平台&lt;/p&gt;&#xA;&lt;p&gt;把LoRa网关接入以太坊区块链，实现一个基于事件的通信机制&lt;/p&gt;&#xA;&lt;h2 id=&#34;blockchain-and-iot-integration&#34;&gt;Blockchain and IoT Integration&lt;/h2&gt;&#xA;&lt;p&gt;把物联网终端设备和网关集成到基于区块链的物联网平台上可以通过以下方法实现：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;网关作为区块链的全节点，终端设备和网关通信&lt;/li&gt;&#xA;&lt;li&gt;网关作为区块链的轻节点，终端设备和网关通信&lt;/li&gt;&#xA;&lt;li&gt;终端设备作为常规传感器，电池供电的终端设备不足以集成区块链客户端，由物联网网关把数据推送到区块链&lt;/li&gt;&#xA;&lt;li&gt;终端设备作为服务器可信的客户端：使用BCCAPI这样接口的简单形式的客户端可以集成到电池供电的物联网终端设备中&lt;/li&gt;&#xA;&lt;li&gt;如果终端设备不是由电池供电并且始终开启，终端设备可以作为区块链的轻节点&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;proof-of-concept&#34;&gt;Proof of Concept&lt;/h2&gt;&#xA;&lt;p&gt;场景描述：LPWAN技术可以跟踪覆盖数公里范围的人员或设备。这篇文章中，电池供电的物联网终端设备将位置数据发送到LoRa网关。然后，LoRa网关使用智能合约将此数据流通过官方Go-lang的以太坊客户端Geth路由到私有的以太坊区块链。使用连接到Dragino LoRa / GPS Hat 的Raspberry Pi 2构建LoRa终端设备，使用Raspberry Pi 3构建LoRa网关。为了实现这样的双向LoRaWAN-Ethereum代理，网关应运行LoRa协议软件以与终端设备通信，并运行以太坊客户端以将数据路由到区块链网络。LoRa协议软件用于将数据包转发到应用程序服务器。此外，使用初始生成块创建私有以太坊网络，其具有简单的挖掘设置，以实现更快的响应时间，即更短的挖掘时间。&lt;/p&gt;&#xA;&lt;p&gt;要使网关和区块链交互，需要部署智能合约，部署后智能合约的地址和程序二进制接口用于与其交互。使用一个smart proxy从LoRa包转发器捕获数据，然后通过JSON-RPC接口将其提供给Geth并调用智能合约&lt;/p&gt;&#xA;&lt;p&gt;基于事件的通信主要是指智能合约的程序结构&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blockchains and Smart Contracts for the Internet of Things</title>
      <link>http://localhost:1313/2018/blockchains-and-smart-contracts-for-the-internet-of-things/</link>
      <pubDate>Mon, 22 Oct 2018 10:19:00 +0800</pubDate>
      <guid>http://localhost:1313/2018/blockchains-and-smart-contracts-for-the-internet-of-things/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;缺失可信中介使交易双方之间的协调更快&lt;/p&gt;&#xA;&lt;p&gt;密码学的大量使用为网络中的所有交互带来了权威性&lt;/p&gt;&#xA;&lt;p&gt;智能合约允许分布式的，高度自动化的工作流程&lt;/p&gt;&#xA;&lt;h2 id=&#34;blockchains-and-iot&#34;&gt;Blockchains and IoT&lt;/h2&gt;&#xA;&lt;p&gt;目前的中心化模型中，制造商维护以百万计的设备的软件更新代价是高昂的&lt;/p&gt;&#xA;&lt;p&gt;用户缺乏对应用从后台是否私自获取数据的信任，需要一个透明度保障的方法&lt;/p&gt;&#xA;&lt;p&gt;区块链技术可以解决这些问题&lt;/p&gt;&#xA;&lt;p&gt;制造商的所有物联网设备都在同一个区块链网络上运行，制造商部署智能合约并允许它们在区块链网络上存储最新固件更新的哈希值，这些设备要么将智能合约的地址附加到它们的区块链客户端，要么通过发现服务找到它。然后，它们可以查询合约，了解新的固件更新，并通过分式对等文件系统请求更新并通过哈希验证更新正确性，对该文件的第一次请求由制造商自己的节点（该节点也加入区块链网络）提供服务，但更新文件传播到足够的节点后，制造商的节点可以停止提供服务，由已获得更新的设备向未获得更新的设备提供服务，一切自动进行，没有用户交互。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如果度过研究生阶段</title>
      <link>http://localhost:1313/2018/what-should-be-done-in-master-three-years/</link>
      <pubDate>Wed, 05 Sep 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/what-should-be-done-in-master-three-years/</guid>
      <description>&lt;p&gt;研三重新来写这篇文章，感触更多，也许当初明白这些，会有不同的选择，可惜，世上没有如果。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
