<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang - Tag - songdehua blog</title>
    <link>http://localhost:1313/tags/golang/</link>
    <description>书藏的个人博客，记录学习，记录生活</description>
    <generator>Hugo 0.135.0 &amp; FixIt v0.3.13</generator>
    <language>en</language>
    <lastBuildDate>Mon, 05 Jul 2021 19:13:00 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang学习资料</title>
      <link>http://localhost:1313/2021/golang-learning-materials/</link>
      <pubDate>Mon, 05 Jul 2021 19:13:00 +0800</pubDate>
      <guid>http://localhost:1313/2021/golang-learning-materials/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;学习 Go 时收藏的一些网址，做一下收录，作为结尾。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go实现2048小游戏</title>
      <link>http://localhost:1313/2020/a-cli-implement-of-2048-game-using-go/</link>
      <pubDate>Thu, 08 Oct 2020 19:35:00 +0800</pubDate>
      <guid>http://localhost:1313/2020/a-cli-implement-of-2048-game-using-go/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;Go 实现一个命令行界面的 2048 游戏，仅涉及 Git 和 Go，用来熟悉基本语言特性。原型项目来自 &lt;a href=&#34;https://github.com/chhabraamit/2048&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;https://github.com/chhabraamit/2048&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang查漏补缺</title>
      <link>http://localhost:1313/2020/golang-supplement/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/golang-supplement/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;查漏补缺的一些问题&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang深入学习9-调用栈</title>
      <link>http://localhost:1313/2020/golang-deep-learning-9-call-stack/</link>
      <pubDate>Sat, 15 Aug 2020 09:47:00 +0800</pubDate>
      <guid>http://localhost:1313/2020/golang-deep-learning-9-call-stack/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;本篇介绍如何分析 Go 的调用栈。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang深入学习8-堆栈与逃逸分析</title>
      <link>http://localhost:1313/2020/golang-deep-learning-8-stack-heap-and-escape-analysis/</link>
      <pubDate>Sat, 15 Aug 2020 08:47:00 +0800</pubDate>
      <guid>http://localhost:1313/2020/golang-deep-learning-8-stack-heap-and-escape-analysis/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;本篇介绍 Go 的堆栈和逃逸分析。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang深入学习7-调度器与垃圾回收</title>
      <link>http://localhost:1313/2020/golang-deep-learning-7-scheduler-and-garbage-collection/</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/golang-deep-learning-7-scheduler-and-garbage-collection/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;调度器和垃圾回收都属于 runtime 的一部分，本文我们介绍 Go 中 runtime 的含义，然后再来分析 Go 的调度器和垃圾回收策略。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang深入学习6-使用pprof进行性能分析</title>
      <link>http://localhost:1313/2020/golang-deep-learning-6-performance-analysis-pprof/</link>
      <pubDate>Mon, 27 Jul 2020 18:46:00 +0800</pubDate>
      <guid>http://localhost:1313/2020/golang-deep-learning-6-performance-analysis-pprof/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;pprof 用来做 Go 程序的性能监控，让我们知道在什么地方耗费了多少 CPU、memory。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang深入学习5-使用dlv调试程序</title>
      <link>http://localhost:1313/2020/golang-deep-learning-5-debug-with-dlv/</link>
      <pubDate>Sun, 26 Jul 2020 09:43:00 +0800</pubDate>
      <guid>http://localhost:1313/2020/golang-deep-learning-5-debug-with-dlv/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;在C/C++中，使用 GDB 调试程序，但在Go中，看过网上的一些文章后，发现 dlv 是个更好的选择，本文进行介绍。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang深入学习4-map</title>
      <link>http://localhost:1313/2020/golang-deep-learning-4-map/</link>
      <pubDate>Sat, 25 Jul 2020 09:45:00 +0800</pubDate>
      <guid>http://localhost:1313/2020/golang-deep-learning-4-map/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;本文关心 map 的底层实现、map 的扩容机制和 map 遍历的随机性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang深入学习3-切片</title>
      <link>http://localhost:1313/2020/golang-deep-learning-3-slice/</link>
      <pubDate>Fri, 24 Jul 2020 16:13:00 +0800</pubDate>
      <guid>http://localhost:1313/2020/golang-deep-learning-3-slice/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;本篇理解切片的底层实现和扩容方式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang深入学习2-string</title>
      <link>http://localhost:1313/2020/golang-deep-learning-2-string/</link>
      <pubDate>Fri, 24 Jul 2020 11:19:00 +0800</pubDate>
      <guid>http://localhost:1313/2020/golang-deep-learning-2-string/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;Go 中字符串虽然作为基本数据类型，但本质依然是字符数组，本篇文章理解 Go 底层 string 类型是如何实现的，以及探讨它与 []byte 之间的关系。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang深入学习1-uintptr 和 Unsafe.Pointer</title>
      <link>http://localhost:1313/2020/golang-deep-learning-1-uintptr-and-unsafe.pointer/</link>
      <pubDate>Thu, 23 Jul 2020 12:15:00 +0800</pubDate>
      <guid>http://localhost:1313/2020/golang-deep-learning-1-uintptr-and-unsafe.pointer/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;本篇介绍 Go 中的指针、uintptr 和 unsafe.Pointer 三个概念。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang日志系统</title>
      <link>http://localhost:1313/2020/golang-log-system/</link>
      <pubDate>Sun, 07 Jun 2020 09:48:00 +0800</pubDate>
      <guid>http://localhost:1313/2020/golang-log-system/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;日志是一个系统必不可少的部分，本篇介绍Golang中的日志系统。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang设置与使用cookie</title>
      <link>http://localhost:1313/2020/golang-set-and-use-cookie/</link>
      <pubDate>Mon, 01 Jun 2020 20:11:00 +0800</pubDate>
      <guid>http://localhost:1313/2020/golang-set-and-use-cookie/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;关于 Cookie 的使用是 Web 编程中的重要一部分，本篇介绍 Cookie 的基本知识和 Golang 中使用的方法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang模板</title>
      <link>http://localhost:1313/2020/golang-template/</link>
      <pubDate>Fri, 29 May 2020 17:08:00 +0800</pubDate>
      <guid>http://localhost:1313/2020/golang-template/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;模板就是在写动态页面时不变的部分，服务端程序渲染可变部分生成动态网页，Go 语言提供了 html/template 包来支持模板渲染。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang使用gorilla、mux包</title>
      <link>http://localhost:1313/2020/golang-use-gorilla/mux-package/</link>
      <pubDate>Fri, 29 May 2020 13:38:00 +0800</pubDate>
      <guid>http://localhost:1313/2020/golang-use-gorilla/mux-package/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;本文介绍 &lt;a href=&#34;https://github.com/gorilla/mux&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;gorilla/mux&lt;/a&gt; 包的使用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang启动HTTP服务器</title>
      <link>http://localhost:1313/2020/golang-start-http-server/</link>
      <pubDate>Fri, 29 May 2020 09:32:00 +0800</pubDate>
      <guid>http://localhost:1313/2020/golang-start-http-server/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;本文介绍 Golang 如何实现 HTTP 服务端及客户端。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang密码学算法</title>
      <link>http://localhost:1313/2020/golang-cryptographic-algorithm/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/golang-cryptographic-algorithm/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;在 Go 中，加密是很重要的一部分，本文对此进行介绍。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang数据库编程</title>
      <link>http://localhost:1313/2020/golang-interact-with-mysql/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/golang-interact-with-mysql/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;Go 官方提供了database 包，database 包下有 sql/driver。该包用来定义操作数据库的接口，这保证了无论使用哪种数据库，操作方式都是相同的。但 Go 官方并没有提供连接数据库的 driver，如果要操作数据库，还需要第三方的 driver 包。这里介绍 &lt;a href=&#34;https://github.com/go-sql-driver/mysql&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;go-mysql-driver&lt;/a&gt; 的使用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-安装&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;1. 安装&lt;/span&gt;&#xA;  &lt;a href=&#34;#1-%e5%ae%89%e8%a3%85&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;在执行了 &lt;code&gt;go mod&lt;/code&gt; 的项目目录下执行如下安装命令&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang语法基础12-测试</title>
      <link>http://localhost:1313/2019/golang-syntax-12-test/</link>
      <pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/golang-syntax-12-test/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;实际开发中对代码进行测试是不可缺少的工作，在go中可以通过&lt;code&gt;testing&lt;/code&gt;包来进行代码的测试。&lt;code&gt;testing&lt;/code&gt;包和&lt;code&gt;go test&lt;/code&gt;命令相互配合，能够完成代码的自动化测试。&lt;/p&gt;&#xA;&lt;p&gt;在实际开发中，对代码进行测试是不可缺少的工作，在go中可以通过&lt;code&gt;testing&lt;/code&gt;包对代码进行单元测试和性能测试。&lt;/p&gt;&#xA;&lt;h4 id=&#34;基本说明&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;基本说明&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e8%af%b4%e6%98%8e&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;p&gt;&lt;code&gt;testing&lt;/code&gt;包是与&lt;code&gt;go test&lt;/code&gt;命令配合使用的，编写测试代码需要使用&lt;code&gt;testing&lt;/code&gt;包，而执行测试需要使用&lt;code&gt;go test&lt;/code&gt;命令。执行测试时，会自动读取源码目录下名为&lt;code&gt;*_test.go&lt;/code&gt;的文件，生成并运行测试用的可执行文件，并最终在终端输出测试信息。输出的信息类似于&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang语法基础11-错误处理</title>
      <link>http://localhost:1313/2019/golang-syntax-11-error-and-panic/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/golang-syntax-11-error-and-panic/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;Go中有两套错误处理的方式&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;普通错误： 在函数和方法中返回错误对象作为它们的唯一或最后一个返回值 ，如果返回nil，表示没有错误&lt;/li&gt;&#xA;&lt;li&gt;异常：使用panic和recover&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;主调函数总是应该检查收到的错误，不要忽略，否则可能导致严重的后果。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang语法基础10-协程与通道</title>
      <link>http://localhost:1313/2019/golang-syntax-10-goroutine-and-channel/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/golang-syntax-10-goroutine-and-channel/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;首先来回顾在操作系统中学过的一些概念。进程(processes)是程序执行的基本单位，运行在一个独立的内存地址空间中；一个进程由多个线程(threads)组成，线程的存在是为了能够同时执行多个任务，最大化利用时间，防止产生等待，线程间是共享内存地址空间的。从windows资源管理器看这一点能看的很明白，如下，每个应用程序是一个进程，Typora程序下有两个线程在同时运行。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://picped-1301226557.cos.ap-beijing.myqcloud.com/Go_20191216_3EkjsJ.png&#34; alt=&#34;进程与线程&#34; srcset=&#34;https://picped-1301226557.cos.ap-beijing.myqcloud.com/Go_20191216_3EkjsJ.png?size=small, https://picped-1301226557.cos.ap-beijing.myqcloud.com/Go_20191216_3EkjsJ.png?size=medium 1.5x, https://picped-1301226557.cos.ap-beijing.myqcloud.com/Go_20191216_3EkjsJ.png?size=large 2x&#34; data-title=&#34;进程与线程&#34; style=&#34;background: url(/images/loading.min.svg) no-repeat center;&#34; onload=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}this.dataset.lazyloaded=&#39;&#39;;&#34; onerror=&#34;this.title=this.dataset.title;for(const i of [&#39;style&#39;, &#39;data-title&#39;,&#39;onerror&#39;,&#39;onload&#39;]){this.removeAttribute(i);}&#34;/&gt;&lt;/p&gt;&#xA;&lt;p&gt;并发是建立在多线程之上的概念，将CPU的执行时间划分为许多很小的间隔，多个线程不断地切换执行，从上层看起来就像在同时执行一样，但本质上依然是线性的。并行则是程序在某个特定的事件同时运行在多个CPU上，多核处理器为并行提供了可能。因此，并发也可能是并行的。&lt;/p&gt;&#xA;&lt;p&gt;操作系统课程中一个最主要的问题就是多线程对共享内存空间的访问，我们学到的解决方式是通过加互斥锁来实现，但在设计实现上是一个复杂的过程，非常容易出错，鉴于操作系统考试的惨痛经历，现在完全不想回忆。Go中的标准库&lt;code&gt;sync&lt;/code&gt;中有一些工具可以用来实现互斥锁的相关操作，但它显然没有Go自身支持的Goroutines高效。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-goroutines&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;1. Goroutines&lt;/span&gt;&#xA;  &lt;a href=&#34;#1-goroutines&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;Go原生支持并发，依靠的是协程(goroutine)和通道(channel)两个概念。goroutines的概念是为了和processes、threads、coroutines等概念区别。其中coroutines也叫做协程，而且这才是常规意义下的协程，goroutines只在Go中有效。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang语法基础8-结构体与方法</title>
      <link>http://localhost:1313/2019/golang-syntax-8-struct-and-method/</link>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/golang-syntax-8-struct-and-method/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;结构体是一种非常重要的结构，用到的地方非常多，在 Go 中，结构体还是实现面向对象编程的基础。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang语法基础9-接口与反射</title>
      <link>http://localhost:1313/2019/golang-syntax-9-interface-and-reflect/</link>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/golang-syntax-9-interface-and-reflect/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;本篇介绍 Golang 中的接口与反射。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang语法基础7-函数</title>
      <link>http://localhost:1313/2019/golang-syntax-7-function/</link>
      <pubDate>Mon, 25 Nov 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/golang-syntax-7-function/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;h2 id=&#34;1-函数声明与定义&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;1. 函数声明与定义&lt;/span&gt;&#xA;  &lt;a href=&#34;#1-%e5%87%bd%e6%95%b0%e5%a3%b0%e6%98%8e%e4%b8%8e%e5%ae%9a%e4%b9%89&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;Go中有三种类型的函数：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang语法基础6-数组、切片与映射</title>
      <link>http://localhost:1313/2019/golang-syntax-6-array-slice-and-map/</link>
      <pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/golang-syntax-6-array-slice-and-map/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;只有基本的数据类型无法适应所有的情况，当需要存储和处理大量数据时，通常会使用数组、映射、链表等数据结构，称之为容器(container)。在Go语言中，由于数组不够灵活，增加了切片(slice)类型，切片也是一种容器。&lt;/p&gt;&#xA;&lt;p&gt;C语言没有提供容器封装，开发者需要自己根据性能需求进行封装，或者使用第三方提供的容器。C++ 语言的容器通过标准库提供，如 vector 对应数组，list 对应双链表，map 对应映射等。&lt;/p&gt;&#xA;&lt;p&gt;本篇只介绍数组和切片，映射类型放在下篇介绍，链表类型在数据结构中介绍。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-数组&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;1. 数组&lt;/span&gt;&#xA;  &lt;a href=&#34;#1-%e6%95%b0%e7%bb%84&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;数组是有限个相同类型的数据的集合，Go语言中数组声明的格式为&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang语法基础5-字符串操作与输入输出</title>
      <link>http://localhost:1313/2019/golang-syntax-5-string-input-and-output/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/golang-syntax-5-string-input-and-output/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;本篇介绍字符串的相关操作，涉及&lt;code&gt;string&lt;/code&gt;和&lt;code&gt;strconv&lt;/code&gt;两个标准库，以及介绍输入输出的基本方法，涉及&lt;code&gt;fmt&lt;/code&gt;和&lt;code&gt;bufio&lt;/code&gt;两个标准库。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang语法基础4-运算符与流程控制</title>
      <link>http://localhost:1313/2019/golang-syntax-4-operators-and-flow-control/</link>
      <pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/golang-syntax-4-operators-and-flow-control/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;本文介绍 Golang 中的运算符和流程控制&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang语法基础3-常量变量与基本数据类型</title>
      <link>http://localhost:1313/2019/golang-syntax-3-constants-variables-and-elementary-types/</link>
      <pubDate>Tue, 22 Oct 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/golang-syntax-3-constants-variables-and-elementary-types/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;本文介绍 Go 中的常量、变量、基本数据类型和常用的类型转换。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang语法基础2-命令、包与模块</title>
      <link>http://localhost:1313/2019/golang-basic-grammer-2-command-package-module/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/golang-basic-grammer-2-command-package-module/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;p&gt;本篇介绍Go中的基础命令，包和模块。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-命令&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;1. 命令&lt;/span&gt;&#xA;  &lt;a href=&#34;#1-%e5%91%bd%e4%bb%a4&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;Go 在安装后自带一个命令行工具，名为 &lt;code&gt;go&lt;/code&gt;，用来下载、编译、安装、测试 Go 的包和源文件，关于 Go CLI 的发展历史和设计理念，可以查看 &lt;a href=&#34;https://golang.google.cn/doc/articles/go_command.html&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;About the go command&lt;/a&gt;，这里只介绍如何使用这些命令。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang语法基础1-背景与初探</title>
      <link>http://localhost:1313/2019/golang-basic-grammar-1-background-and-preliminary-exploration/</link>
      <pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/golang-basic-grammar-1-background-and-preliminary-exploration/</guid>
      <category domain="http://localhost:1313/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/">爱编程爱技术的孩子</category>
      <description>&lt;h2 id=&#34;1-起源与发展&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;1. 起源与发展&lt;/span&gt;&#xA;  &lt;a href=&#34;#1-%e8%b5%b7%e6%ba%90%e4%b8%8e%e5%8f%91%e5%b1%95&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;Go/Golang 起源于2007年，并于2009年正式对外发布，是一个完全开源的项目，背后的支持者是谷歌公司，核心设计者是三位著名IT工程师：Ken Thompson，Rob Pike，Robert Griesemer。分别是如下从左到右三位&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
